#!/usr/bin/env python3
"""
üöõ –°–∏—Å—Ç–µ–º–∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ Schneider
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
"""

import asyncio
import json
import os
import sys
import time
import signal
from datetime import datetime
from typing import Dict, Optional
import argparse

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
schneider_parser_instance = None

def setup_encoding():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Unicode –Ω–∞ Windows"""
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    if sys.platform.startswith('win'):
        os.system('chcp 65001 > nul')
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')

def ask_user_session_restore():
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏"""
    try:
        print("\n" + "="*60)
        print("üîê –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–°–°–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
        print("="*60)
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("  1Ô∏è‚É£  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫)")
        print("  2Ô∏è‚É£  –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)")
        print("="*60)
        
        while True:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            if choice == "1":
                print("‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è")
                return True
            elif choice == "2":
                print("‚úÖ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                return False
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    except KeyboardInterrupt:
        print("\nüõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        print("‚ö†Ô∏è –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utils.logger import logger
from src.utils.performance_monitor import PerformanceMonitor
from src.utils.error_handler import ErrorHandler
from src.utils.recovery_system import RecoverySystem, AdaptiveMonitoring, BackupManager
from src.auth.schneider_auth import SchneiderAuth
from src.parser.load_parser import LoadParser
from src.parser.load_monitor import LoadMonitor
from src.telegram.telegram_bot import TelegramNotifier
from src.database.db_manager import DatabaseManager
from src.tests.test_integration import IntegrationTests

class SchneiderParser:
    def __init__(self, config_path: str = "config/config.json", restore_session: bool = True):
        self.config_path = config_path
        self.config = self.load_config()
        self.is_running = False
        self.restore_session = restore_session
        self.shutdown_event = asyncio.Event()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.running_tasks = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.auth = None
        self.parser = None
        self.monitor = None
        self.telegram = None
        self.db = None
        self.performance = None
        self.error_handler = None
        self.recovery_system = None
        self.adaptive_monitoring = None
        self.backup_manager = None
        self.integration_tests = None
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.load_environment_variables(config)
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def load_environment_variables(self, config: Dict) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            from dotenv import load_dotenv
            load_dotenv("config/.env")
            
            # Telegram
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            telegram_chat = os.getenv('TELEGRAM_CHAT_ID')
            
            if telegram_token and telegram_token != "your_bot_token_here":
                config['telegram']['bot_token'] = telegram_token
            if telegram_chat and telegram_chat != "your_chat_id_here":
                config['telegram']['chat_id'] = telegram_chat
            
            # Schneider - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            schneider_email = os.getenv('SCHNEIDER_EMAIL')
            schneider_password = os.getenv('SCHNEIDER_PASSWORD')
            
            if schneider_email:
                config['schneider']['email'] = schneider_email
            if schneider_password:
                config['schneider']['password'] = schneider_password
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.validate_credentials(config)
            
            logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            raise
    
    def validate_credentials(self, config: Dict) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Schneider credentials
        if not config.get('schneider', {}).get('email'):
            errors.append("Schneider email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif config['schneider']['email'] == "primecargoload@gmail.com":
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Schneider")
        
        if not config.get('schneider', {}).get('password'):
            errors.append("Schneider password –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif config['schneider']['password'] == "Primecargo2024$":
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å Schneider")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram credentials
        if not config.get('telegram', {}).get('bot_token'):
            errors.append("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif config['telegram']['bot_token'] == "your_bot_token_here":
            errors.append("Telegram bot token –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —Å —à–∞–±–ª–æ–Ω–∞")
            
        if not config.get('telegram', {}).get('chat_id'):
            errors.append("Telegram chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif config['telegram']['chat_id'] == "your_chat_id_here":
            errors.append("Telegram chat ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω —Å —à–∞–±–ª–æ–Ω–∞")
        
        if errors:
            error_msg = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"- {error}" for error in errors)
            logger.error(f"‚ùå {error_msg}")
            raise Exception(f"Configuration validation failed: {'; '.join(errors)}")
        
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    async def initialize_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db = DatabaseManager(self.config['database']['path'])
            if not await self.db.init_database():
                raise Exception("Failed to initialize database")
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
            self.telegram = TelegramNotifier(
                self.config['telegram']['bot_token'],
                self.config['telegram']['chat_id']
            )
            
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
            if not await self.telegram.test_connection():
                logger.warning("‚ö†Ô∏è Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.performance = PerformanceMonitor()
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            self.error_handler = ErrorHandler(self.telegram, self.db)
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.recovery_system = RecoverySystem(self)
            self.adaptive_monitoring = AdaptiveMonitoring()
            self.backup_manager = BackupManager(self.config['database']['path'])
            
            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.auth = SchneiderAuth(self.config)
            if not await self.auth.initialize_browser():
                raise Exception("Failed to initialize browser")
            
            # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
            self.parser = LoadParser(self.config)
            
            # 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitor = LoadMonitor(self.config, self.parser, self.telegram, self.db)
            
            # 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            self.integration_tests = IntegrationTests(self.config)
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            await self.error_handler.handle_critical_error(e, self)
            return False
    
    async def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            logger.info("üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø–æ–ø—ã—Ç–∫–∞ 1/3)...")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä restore_session –≤ –º–µ—Ç–æ–¥ login
            success = await self.auth.login()
            
            if success:
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                logger.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def setup_search_filters(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ (—É—Å—Ç–∞—Ä–µ–ª–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã)"""
        try:
            logger.info("‚öôÔ∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return False
    
    async def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–∑–æ–≤...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page = await self.auth.get_page()
            if not page:
                raise Exception("No active page available")
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if await self.adaptive_monitoring.should_trigger_recovery():
                        logger.warning("üö® –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                        recovery_success = await self.recovery_system.full_recovery_sequence()
                        
                        if not recovery_success:
                            logger.error("üí• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                            break
                            
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        page = await self.auth.get_page()
                        if not page:
                            raise Exception("No page available after recovery")
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    strategy = await self.adaptive_monitoring.adjust_scanning_strategy()
                    logger.info(f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –∏–Ω—Ç–µ—Ä–≤–∞–ª={strategy['interval']}—Å, "
                              f"–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å={strategy['concurrent_requests']}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    self.monitor.current_scan_interval = strategy['interval']
                    self.monitor.max_concurrent_requests = strategy['concurrent_requests']
                    
                    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    await self.monitor.start_monitoring(page)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    await self.adaptive_monitoring.update_metrics(
                        response_time=30.0,  # –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è = –æ—à–∏–±–∫–∞
                        loads_found=0,
                        errors=1,
                        success=False
                    )
                    
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(30)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await self.error_handler.handle_critical_error(e, self)
    
    async def run_daily_maintenance(self) -> None:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running:
            try:
                await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞
                
                logger.info("üßπ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                deleted_count = await self.db.cleanup_old_records()
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —á–µ—Ä–µ–∑ BackupManager
                if self.config['database']['backup_enabled']:
                    backup_success = await self.backup_manager.create_daily_backup()
                    if backup_success:
                        logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                if self.config['telegram']['enable_daily_reports']:
                    daily_stats = await self.db.get_daily_stats()
                    await self.telegram.send_daily_report(daily_stats)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                perf_report = await self.performance.get_performance_report()
                await self.telegram.send_performance_report(perf_report)
                
                logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
    
    async def run_status_updates(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while self.is_running:
            try:
                await asyncio.sleep(60 * 60)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                monitoring_stats = await self.monitor.get_monitoring_stats()
                performance_stats = await self.performance.get_performance_report()
                adaptation_report = await self.adaptive_monitoring.get_adaptation_report()
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                status_msg = f"""üìä HOURLY STATUS REPORT

üîç Loads Scanned: {monitoring_stats.get('scan_count', 0)}
üì§ Notifications Sent: {monitoring_stats.get('loads_sent_total', 0)}
‚è± Avg Scan Time: {monitoring_stats.get('avg_response_time', 0):.2f}s
üíæ Memory Usage: {performance_stats.get('system_resources', {}).get('avg_memory_percent', 0):.1f}%
üñ• CPU Usage: {performance_stats.get('system_resources', {}).get('avg_cpu_percent', 0):.1f}%
üü¢ Session Status: {'Active' if monitoring_stats.get('is_monitoring') else 'Inactive'}
‚ö°Ô∏è Uptime: {monitoring_stats.get('uptime_hours', 0):.1f}h

üéØ ADAPTIVE MONITORING:
üìà Success Rate: {adaptation_report.get('success_rate', 0):.1%}
üêå Avg Response: {adaptation_report.get('avg_response_time', 0):.1f}s
‚ö†Ô∏è Error Count: {adaptation_report.get('error_count', 0)}
üìä Adaptation Level: {adaptation_report.get('adaptation_level', 'UNKNOWN')}

Last Update: {datetime.now().strftime('%H:%M:%S')}"""
                
                await self.telegram.send_status_update(status_msg)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def main(self) -> None:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        startup_success = False
        monitoring_task = None
        maintenance_task = None
        status_task = None
        
        try:
            logger.info("üöõ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ Schneider –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            await self.check_system_requirements()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            if not await self.initialize_components():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            logger.info("üîê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...")
            if not await self.authenticate():
                await self.diagnose_auth_failure()
                raise Exception("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...")
            if not await self.setup_search_filters():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
            startup_message = (
                "üöÄ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"üìß –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {self.config['schneider']['email']}\n"
                f"üåê –°–∞–π—Ç: {self.config['schneider']['login_url']}\n"
                f"‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞: {'–°–∫—Ä—ã—Ç—ã–π' if self.config['browser']['headless'] else '–í–∏–¥–∏–º—ã–π'}\n"
                f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.config['monitoring']['fast_scan_interval_seconds']} —Å–µ–∫"
            )
            await self.telegram.send_status_update(startup_message)
            
            startup_success = True
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞
            self.is_running = True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
            monitoring_task = asyncio.create_task(self.start_monitoring())
            maintenance_task = asyncio.create_task(self.run_daily_maintenance())
            status_task = asyncio.create_task(self.run_status_updates())
            
            self.running_tasks.update([monitoring_task, maintenance_task, status_task])
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                done, pending = await asyncio.wait(
                    [monitoring_task, maintenance_task, status_task, 
                     asyncio.create_task(self.shutdown_event.wait())],
                    return_when=asyncio.FIRST_COMPLETED
                )
                
                # –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
                for task in pending:
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
                        
            except asyncio.CancelledError:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {error_msg}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            if not startup_success:
                detailed_error = (
                    f"üí• –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê\n\n"
                    f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {error_msg}\n"
                    f"‚è∞ –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                    f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                    f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ —Å–ª—É–∂–±–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                    f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Å–∞–π—Ç–∞ Schneider\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±—Ä–∞—É–∑–µ—Ä–∞\n\n"
                    f"üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
                )
                
                if self.telegram:
                    try:
                        await self.telegram.send_error_alert(detailed_error)
                    except Exception as telegram_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
        
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await self.cleanup_all_tasks()
            await self.cleanup()

    async def check_system_requirements(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            import aiohttp
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get('https://www.google.com', timeout=10) as response:
                        if response.status != 200:
                            raise Exception("Internet connectivity check failed")
                logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                raise Exception(f"No internet connection: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Schneider —Å–∞–π—Ç–∞
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(self.config['schneider']['login_url'], timeout=15) as response:
                        if response.status not in [200, 403]:  # 403 –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç Cloudflare
                            raise Exception(f"Schneider site returned status {response.status}")
                logger.info("‚úÖ –°–∞–π—Ç Schneider –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Å–∞–π—Ç–∞ Schneider: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            required_dirs = ['data', 'logs', 'screenshots', 'backups']
            for dir_name in required_dirs:
                if not os.path.exists(dir_name):
                    os.makedirs(dir_name, exist_ok=True)
                    logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
            raise

    async def diagnose_auth_failure(self) -> None:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            diagnosis = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.config.get('schneider', {}).get('email'):
                diagnosis.append("‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            if not self.config.get('schneider', {}).get('password'):
                diagnosis.append("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.auth or not self.auth.browser:
                diagnosis.append("‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
            try:
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.get(self.config['schneider']['login_url'], timeout=10) as response:
                        if response.status != 200:
                            diagnosis.append(f"‚ö†Ô∏è –°–∞–π—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å {response.status}")
            except Exception as e:
                diagnosis.append(f"‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            if diagnosis:
                diagnosis_msg = "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:\n" + "\n".join(diagnosis)
                logger.error(diagnosis_msg)
                
                if self.telegram:
                    await self.telegram.send_error_alert(diagnosis_msg)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def cleanup_all_tasks(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            
            # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            for task in self.running_tasks.copy():
                if not task.done():
                    task.cancel()
                    try:
                        await asyncio.wait_for(task, timeout=5.0)
                    except (asyncio.CancelledError, asyncio.TimeoutError):
                        pass
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
                        
            self.running_tasks.clear()
            logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")

    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.monitor:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                try:
                    await asyncio.wait_for(self.monitor.stop_monitoring(), timeout=10.0)
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            if self.auth:
                try:
                    await asyncio.wait_for(self.auth.close(), timeout=10.0)
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.telegram:
                try:
                    await asyncio.wait_for(
                        self.telegram.send_status_update("üõë –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"), 
                        timeout=5.0
                    )
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def test_mode(self) -> None:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ç–µ—Å—Ç–æ–≤"""
        try:
            logger.info("üß™ –ó–∞–ø—É—Å–∫ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not await self.initialize_components():
                raise Exception("Component initialization failed")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            test_results = await self.integration_tests.run_full_test_suite()
            
            if test_results:
                logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                await self.telegram.send_status_update(
                    "üß™‚úÖ –ü–û–õ–ù–´–ô –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û\n"
                    "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
                )
            else:
                logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
                await self.telegram.send_error_alert(
                    "üß™‚ùå –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            await self.telegram.send_error_alert(f"üß™üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            await self.cleanup()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    if schneider_parser_instance:
        schneider_parser_instance.shutdown_event.set()
        logger.info("üõë –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    else:
        logger.warning("‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        sys.exit(0)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Unicode
    setup_encoding()
    
    parser = argparse.ArgumentParser(description='Schneider FreightPower Load Parser')
    parser.add_argument('--test', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--config', default='config/config.json', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--websocket-only', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    parser.add_argument('--screenshots', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö')
    parser.add_argument('--no-session-restore', action='store_true', help='–ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    restore_session = True
    if args.no_session_restore:
        restore_session = False
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        session_file = "session_cookies.json"
        if os.path.exists(session_file):
            try:
                with open(session_file, 'r') as f:
                    session_data = json.load(f)
                    if session_data and len(session_data) > 0:
                        # –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        restore_session = ask_user_session_restore()
                    else:
                        restore_session = False
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
                restore_session = False
        else:
            # –§–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            restore_session = False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    global schneider_parser_instance
    schneider_parser_instance = SchneiderParser(args.config, restore_session=restore_session)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.debug:
        schneider_parser_instance.config['logging']['level'] = 'DEBUG'
        logger.info("üêõ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    
    if args.screenshots:
        schneider_parser_instance.config['monitoring']['screenshot_on_error'] = True
        logger.info("üì∏ –í–∫–ª—é—á–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    
    if args.websocket_only:
        schneider_parser_instance.config['monitoring']['primary_mode'] = 'websocket'
        logger.info("üåê –í–∫–ª—é—á–µ–Ω —Ç–æ–ª—å–∫–æ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if args.test:
        asyncio.run(schneider_parser_instance.test_mode())
    else:
        asyncio.run(schneider_parser_instance.main())

if __name__ == "__main__":
    main()
