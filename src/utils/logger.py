import logging
import colorlog
import os
from datetime import datetime
from logging.handlers import RotatingFileHandler
import json

class Logger:
    def __init__(self, name="schneider_parser", log_level="INFO"):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(getattr(logging, log_level.upper()))
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("logs", exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        self._setup_console_handler()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self._setup_file_handler()
        
    def _setup_console_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        if hasattr(console_handler.stream, 'reconfigure'):
            try:
                console_handler.stream.reconfigure(encoding='utf-8')
            except Exception:
                pass
        
        # –¶–≤–µ—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        color_formatter = colorlog.ColoredFormatter(
            "%(log_color)s%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            datefmt="%H:%M:%S",
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white',
            }
        )
        
        console_handler.setFormatter(color_formatter)
        self.logger.addHandler(console_handler)
    
    def _setup_file_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        file_handler = RotatingFileHandler(
            f"logs/schneider_parser_{datetime.now().strftime('%Y%m%d')}.log",
            maxBytes=10*1024*1024,  # 10MB
            backupCount=10,
            encoding='utf-8'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
        )
        file_handler.setLevel(logging.DEBUG)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
        file_formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S"
        )
        
        file_handler.setFormatter(file_formatter)
        self.logger.addHandler(file_handler)
    
    def _make_unicode_safe(self, message: str) -> str:
        """–ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        emoji_replacements = {
            'üßπ': '[CLEANING]',
            '‚úÖ': '[OK]',
            '‚ùå': '[ERROR]',
            'üõë': '[STOP]',
            'üîÑ': '[RELOAD]',
            'üß™': '[TEST]',
            'üí•': '[CRITICAL]',
            'üÜò': '[SOS]',
            '‚ö†Ô∏è': '[WARNING]',
            'üü¢': '[GREEN]',
            'üü°': '[YELLOW]',
            'üîß': '[SETUP]',
            'üöõ': '[TRUCK]',
            'üìä': '[STATS]',
            'üíæ': '[SAVE]',
            'üîÑ': '[SYNC]',
            '‚ö°': '[FAST]',
            'üêå': '[SLOW]',
            'üéØ': '[TARGET]',
            'üìà': '[UP]',
            'üìâ': '[DOWN]'
        }
        
        safe_message = message
        for emoji, replacement in emoji_replacements.items():
            safe_message = safe_message.replace(emoji, replacement)
        
        return safe_message
    
    def _safe_log(self, level_func, message: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode –æ—à–∏–±–æ–∫"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            level_func(message)
        except UnicodeEncodeError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
            safe_message = self._make_unicode_safe(message)
            try:
                level_func(safe_message)
            except Exception as e:
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                fallback_message = f"Log message (Unicode error): {str(message)[:100]}..."
                level_func(fallback_message)
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            fallback_message = f"Logging error: {str(e)} - Original: {str(message)[:50]}..."
            try:
                level_func(fallback_message)
            except:
                pass  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    
    def info(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self._safe_log(self.logger.info, message)
    
    def warning(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        self._safe_log(self.logger.warning, message)
    
    def error(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self._safe_log(self.logger.error, message)
    
    def debug(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self._safe_log(self.logger.debug, message)
    
    def critical(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        self._safe_log(self.logger.critical, message)
    
    def log_performance(self, operation: str, duration_ms: float, success: bool = True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        status = "‚úÖ" if success else "‚ùå"
        self.info(f"{status} {operation}: {duration_ms:.2f}ms")
    
    def log_load_found(self, load_id: str, rate_per_mile: float, profitability_score: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞"""
        emoji = "üü¢" if profitability_score > 2.0 else "üü°"
        self.info(f"{emoji} Load {load_id}: ${rate_per_mile:.2f}/mile (Score: {profitability_score:.2f})")
    
    def log_error_with_context(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        error_msg = f"‚ùå ERROR in {context}: {str(error)}"
        self.error(error_msg)
        if hasattr(error, '__traceback__'):
            import traceback
            self.debug(f"Traceback: {traceback.format_exc()}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = Logger()
