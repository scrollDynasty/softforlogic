"""
–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import time
import os
import shutil
from datetime import datetime
from typing import Dict, Optional
from collections import defaultdict

from .logger import logger
from .performance_monitor import PerformanceMonitor

class RecoverySystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, parser_instance):
        self.parser = parser_instance
        self.recovery_attempts = 0
        self.max_recovery_attempts = 3
        self.last_recovery_time = 0
        self.recovery_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
    async def full_recovery_sequence(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if time.time() - self.last_recovery_time < self.recovery_cooldown:
                logger.warning(f"‚è≥ Recovery cooldown active, waiting...")
                return False
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            self.last_recovery_time = time.time()
            
            # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await self.stop_all_processes()
            
            # 2. –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await self.cleanup_temp_files()
            
            # 3. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            await self.reinitialize_browser()
            
            # 4. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not await self.parser.auth.login():
                raise Exception("Failed to re-authenticate during recovery")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            test_result = await self.run_system_test()
            if not test_result:
                raise Exception("System test failed after recovery")
            
            logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            await self.parser.telegram.send_status_update("üü¢ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.recovery_attempts = 0
            return True
            
        except Exception as e:
            self.recovery_attempts += 1
            logger.error(f"Recovery attempt {self.recovery_attempts} failed: {e}")
            
            if self.recovery_attempts >= self.max_recovery_attempts:
                await self.parser.telegram.send_error_alert(
                    "üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!\\n"
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
                )
                return False
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            delay = 30 * (2 ** self.recovery_attempts)
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            pass  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            return await self.full_recovery_sequence()
    
    async def stop_all_processes(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if hasattr(self.parser, 'monitor') and self.parser.monitor:
                await self.parser.monitor.stop_monitoring()
            
            # –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            pass  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            
            logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    async def cleanup_temp_files(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            screenshots_dir = "screenshots"
            if os.path.exists(screenshots_dir):
                current_time = time.time()
                for filename in os.listdir(screenshots_dir):
                    file_path = os.path.join(screenshots_dir, filename)
                    if os.path.isfile(file_path):
                        file_age = current_time - os.path.getmtime(file_path)
                        if file_age > 3600:  # 1 —á–∞—Å
                            os.remove(file_path)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
            logs_dir = "logs"
            if os.path.exists(logs_dir):
                current_time = time.time()
                for filename in os.listdir(logs_dir):
                    if filename.endswith('.log'):
                        file_path = os.path.join(logs_dir, filename)
                        file_age = current_time - os.path.getmtime(file_path)
                        if file_age > 7 * 24 * 3600:  # 7 –¥–Ω–µ–π
                            os.remove(file_path)
            
            logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def reinitialize_browser(self) -> None:
        """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            if hasattr(self.parser.auth, 'browser') and self.parser.auth.browser:
                await self.parser.auth.close()
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            pass  # –£–±—Ä–∞–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            
            # –ù–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not await self.parser.auth.initialize_browser():
                raise Exception("Failed to reinitialize browser")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise
    
    async def run_system_test(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self.parser.auth.is_authenticated:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page = await self.parser.auth.get_page()
            if not page:
                return False
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.goto("https://freightpower.schneider.com/loads", 
                          timeout=30000, wait_until='networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            body = await page.query_selector('body')
            if not body:
                return False
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞: {e}")
            return False

class AdaptiveMonitoring:
    """–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.success_rate = 1.0
        self.avg_response_time = 2.0
        self.error_count = 0
        self.last_loads_found = 0
        self.consecutive_empty_scans = 0
        self.performance_history = []
        self.max_history_size = 100
        
    async def adjust_scanning_strategy(self) -> Dict:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        strategy = {
            'interval': 2,
            'concurrent_requests': 3,
            'timeout': 15,
            'enable_screenshots': False,
            'use_websocket': True,
            'max_retries': 3
        }
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - —Å–Ω–∏–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        if self.error_count > 5:
            strategy['interval'] = 5
            strategy['concurrent_requests'] = 1
            strategy['enable_screenshots'] = True
            strategy['max_retries'] = 1
            logger.info("üìâ –°–Ω–∏–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
            
        # –ï—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self.avg_response_time > 5:
            strategy['timeout'] = 30
            strategy['interval'] = max(strategy['interval'], 4)
            logger.info("üêå –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
            
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ - —Å–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        if self.consecutive_empty_scans > 10:
            strategy['interval'] = min(strategy['interval'] + 2, 10)
            strategy['use_websocket'] = False  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("üò¥ –°–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä—É–∑–æ–≤")
        
        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∏–π success rate - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if self.success_rate < 0.7:
            strategy['interval'] = 8
            strategy['concurrent_requests'] = 1
            strategy['timeout'] = 45
            strategy['enable_screenshots'] = True
            logger.info("‚ö†Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ success rate")
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (self.success_rate > 0.95 and 
            self.avg_response_time < 3 and 
            self.error_count < 2):
            strategy['interval'] = 2
            strategy['concurrent_requests'] = 5
            strategy['timeout'] = 15
            strategy['use_websocket'] = True
            logger.info("üöÄ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            
        return strategy
    
    async def update_metrics(self, response_time: float, loads_found: int, 
                           errors: int, success: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ)
        self.avg_response_time = (self.avg_response_time * 0.8) + (response_time * 0.2)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—É—Å—Ç—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        if loads_found == 0:
            self.consecutive_empty_scans += 1
        else:
            self.consecutive_empty_scans = 0
            
        self.last_loads_found = loads_found
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ)
        if errors > 0:
            self.error_count += errors
        else:
            self.error_count = max(0, self.error_count - 0.1)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ success rate
        self.performance_history.append(success)
        if len(self.performance_history) > self.max_history_size:
            self.performance_history.pop(0)
        
        if self.performance_history:
            self.success_rate = sum(self.performance_history) / len(self.performance_history)
    
    async def get_adaptation_report(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        return {
            'success_rate': self.success_rate,
            'avg_response_time': self.avg_response_time,
            'error_count': self.error_count,
            'consecutive_empty_scans': self.consecutive_empty_scans,
            'last_loads_found': self.last_loads_found,
            'performance_samples': len(self.performance_history),
            'adaptation_level': self._get_adaptation_level()
        }
    
    def _get_adaptation_level(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        if self.success_rate > 0.95 and self.avg_response_time < 3:
            return "OPTIMAL"
        elif self.success_rate > 0.8 and self.avg_response_time < 5:
            return "GOOD"
        elif self.success_rate > 0.6:
            return "DEGRADED"
        else:
            return "CRITICAL"
    
    async def should_trigger_recovery(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        critical_conditions = [
            self.success_rate < 0.3,  # –ú–µ–Ω–µ–µ 30% —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            self.error_count > 20,    # –ë–æ–ª–µ–µ 20 –æ—à–∏–±–æ–∫
            self.avg_response_time > 30,  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            self.consecutive_empty_scans > 50  # –û—á–µ–Ω—å –¥–æ–ª–≥–æ –Ω–µ—Ç –≥—Ä—É–∑–æ–≤
        ]
        
        return any(critical_conditions)

class BackupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.backup_dir = "backups"
        os.makedirs(self.backup_dir, exist_ok=True)
        
    async def create_daily_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(self.backup_dir, f"loads_backup_{timestamp}.db")
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, backup_path)
                logger.info(f"‚úÖ Backup created: {backup_path}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
            await self.cleanup_old_backups(7)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Backup failed: {e}")
            return False
    
    async def cleanup_old_backups(self, keep_count: int = 7) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        try:
            if not os.path.exists(self.backup_dir):
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤
            backup_files = []
            for filename in os.listdir(self.backup_dir):
                if filename.startswith("loads_backup_") and filename.endswith(".db"):
                    file_path = os.path.join(self.backup_dir, filename)
                    backup_files.append((file_path, os.path.getmtime(file_path)))
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            backup_files.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file_path, _ in backup_files[keep_count:]:
                os.remove(file_path)
                logger.info(f"üóëÔ∏è Removed old backup: {os.path.basename(file_path)}")
                
        except Exception as e:
            logger.error(f"‚ùå Cleanup backups failed: {e}")
    
    async def restore_from_backup(self, backup_filename: str = None) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            if backup_filename is None:
                # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –±—ç–∫–∞–ø
                backup_files = []
                for filename in os.listdir(self.backup_dir):
                    if filename.startswith("loads_backup_") and filename.endswith(".db"):
                        file_path = os.path.join(self.backup_dir, filename)
                        backup_files.append((file_path, os.path.getmtime(file_path)))
                
                if not backup_files:
                    logger.error("‚ùå No backup files found")
                    return False
                
                backup_files.sort(key=lambda x: x[1], reverse=True)
                backup_path = backup_files[0][0]
            else:
                backup_path = os.path.join(self.backup_dir, backup_filename)
            
            if os.path.exists(backup_path):
                shutil.copy2(backup_path, self.db_path)
                logger.info(f"‚úÖ Database restored from: {os.path.basename(backup_path)}")
                return True
            else:
                logger.error(f"‚ùå Backup file not found: {backup_path}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Restore failed: {e}")
            return False