import asyncio
import json
import base64
from typing import Dict, List, Optional, Any
from playwright.async_api import Page, ElementHandle
import google.generativeai as genai
from ..utils.logger import logger


class GeminiFormFiller:
    """AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º —Å –ø–æ–º–æ—â—å—é Google Gemini"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        pass  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ load_parser.py
    
    async def fill_search_form(self, page: Page, search_criteria: Dict) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é AI
        """
        try:
            logger.info("üß† –ù–∞—á–∏–Ω–∞—é AI-–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            screenshot = await page.screenshot()
            screenshot_b64 = base64.b64encode(screenshot).decode()
            
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–æ—Ä–º—ã
            form_html = await self._extract_form_elements(page)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = self._create_form_filling_prompt(search_criteria, form_html)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini
            response = await self._get_gemini_response(prompt, screenshot_b64)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
            actions = self._parse_ai_response(response)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            success = await self._execute_form_actions(page, actions)
            
            if success:
                logger.info("‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI-–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
            return False
    
    async def _extract_form_elements(self, page: Page) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            elements_info = await page.evaluate("""
                () => {
                    const elements = [];
                    
                    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã, –∏–Ω–ø—É—Ç—ã, –∫–Ω–æ–ø–∫–∏
                    const selectors = [
                        'select', 'input[type="text"]', 'input[type="email"]', 
                        'input[type="date"]', 'input[type="search"]', 'textarea',
                        'button[type="submit"]', 'button:contains("Search")',
                        'button:contains("Find")', 'input[type="submit"]'
                    ];
                    
                    selectors.forEach(selector => {
                        const els = document.querySelectorAll(selector);
                        els.forEach((el, index) => {
                            const rect = el.getBoundingClientRect();
                            if (rect.width > 0 && rect.height > 0) {  // –¢–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                elements.push({
                                    type: el.tagName.toLowerCase(),
                                    inputType: el.type || '',
                                    name: el.name || '',
                                    id: el.id || '',
                                    className: el.className || '',
                                    placeholder: el.placeholder || '',
                                    value: el.value || '',
                                    text: el.textContent?.trim() || '',
                                    options: el.tagName === 'SELECT' ? 
                                        Array.from(el.options).map(opt => ({
                                            value: opt.value,
                                            text: opt.textContent.trim()
                                        })) : [],
                                    position: {
                                        x: Math.round(rect.left),
                                        y: Math.round(rect.top),
                                        width: Math.round(rect.width),
                                        height: Math.round(rect.height)
                                    },
                                    selector: el.id ? `#${el.id}` : 
                                             el.name ? `[name="${el.name}"]` :
                                             el.className ? `.${el.className.split(' ')[0]}` :
                                             `${el.tagName.toLowerCase()}:nth-of-type(${index + 1})`
                                });
                            }
                        });
                    });
                    
                    return elements;
                }
            """)
            
            return json.dumps(elements_info, indent=2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã: {e}")
            return "[]"
    
    def _create_form_filling_prompt(self, criteria: Dict, form_html: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        return f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–µ–±-—Ñ–æ—Ä–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.

–î–ê–ù–ù–´–ï –î–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø:
{json.dumps(criteria, indent=2, ensure_ascii=False)}

–°–¢–†–£–ö–¢–£–†–ê –§–û–†–ú–´:
{form_html}

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
2. –°–æ–ø–æ—Å—Ç–∞–≤—å –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Ñ–æ—Ä–º—ã
3. –°–æ–∑–¥–∞–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã

–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "actions": [
        {{
            "action": "select_option",
            "selector": "#equipment-select",
            "value": "Dry Van",
            "field_purpose": "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        }},
        {{
            "action": "fill_input",
            "selector": "[name='origin']",
            "value": "GAFFNEY, SC",
            "field_purpose": "–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        }},
        {{
            "action": "click_button",
            "selector": "button[type='submit']",
            "field_purpose": "–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞"
        }}
    ]
}}

–í–û–ó–ú–û–ñ–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
- select_option: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ
- fill_input: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
- click_button: –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
- set_date: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–ª—è –ø–æ —Å–º—ã—Å–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, origin_location -> –ø–æ–ª–µ "Origin" –∏–ª–∏ "From")
- –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (–¥–∞—Ç—ã, —á–∏—Å–ª–∞, —Ç–µ–∫—Å—Ç)
- –ù–µ —Å–æ–∑–¥–∞–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""
    
    async def _get_gemini_response(self, prompt: str, screenshot_b64: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Gemini AI"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            image_data = {
                'mime_type': 'image/png',
                'data': screenshot_b64
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            response = self.model.generate_content([
                prompt,
                image_data
            ])
            
            return response.text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
            return ""
    
    def _parse_ai_response(self, response: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_start = response.find('{')
            json_end = response.rfind('}') + 1
            
            if json_start != -1 and json_end != -1:
                json_str = response[json_start:json_end]
                parsed = json.loads(json_str)
                return parsed.get('actions', [])
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ AI")
            return []
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            return []
    
    async def _execute_form_actions(self, page: Page, actions: List[Dict]) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        success_count = 0
        total_actions = len(actions)
        
        for action in actions:
            try:
                action_type = action.get('action')
                selector = action.get('selector')
                value = action.get('value')
                purpose = action.get('field_purpose', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ')
                
                logger.info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é: {purpose} ({action_type})")
                
                if action_type == 'select_option':
                    element = await page.wait_for_selector(selector, timeout=5000)
                    if element:
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
                        try:
                            await element.select_option(label=value)
                        except:
                            try:
                                await element.select_option(value=value)
                            except:
                                # –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                                options = await element.query_selector_all('option')
                                for option in options:
                                    text = await option.text_content()
                                    if value.lower() in text.lower() or text.lower() in value.lower():
                                        option_value = await option.get_attribute('value')
                                        await element.select_option(value=option_value)
                                        break
                        success_count += 1
                        logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {value}")
                
                elif action_type == 'fill_input':
                    element = await page.wait_for_selector(selector, timeout=5000)
                    if element:
                        await element.clear()
                        await element.fill(str(value))
                        success_count += 1
                        logger.info(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {value}")
                
                elif action_type == 'set_date':
                    element = await page.wait_for_selector(selector, timeout=5000)
                    if element:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        date_value = self._format_date(value)
                        await element.fill(date_value)
                        success_count += 1
                        logger.info(f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_value}")
                
                elif action_type == 'click_button':
                    element = await page.wait_for_selector(selector, timeout=5000)
                    if element:
                        await element.click()
                        success_count += 1
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
                        await page.wait_for_timeout(1000)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ {purpose}: {e}")
        
        success_rate = success_count / total_actions if total_actions > 0 else 0
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {success_count}/{total_actions} ({success_rate:.1%})")
        
        return success_rate >= 0.7  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 70%+ –¥–µ–π—Å—Ç–≤–∏–π
    
    def _format_date(self, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            from datetime import datetime
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            if '.' in date_str:
                parts = date_str.split('.')
                if len(parts) == 3:
                    day, month, year = parts
                    return f"{month.zfill(2)}/{day.zfill(2)}/{year}"
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM/DD/YYYY - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if '/' in date_str:
                return date_str
            
            return date_str
            
        except Exception:
            return date_str