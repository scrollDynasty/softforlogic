import asyncio
import traceback
import time
from typing import Dict, Optional
from collections import defaultdict
from datetime import datetime

from .logger import logger

class ErrorHandler:
    def __init__(self, telegram_notifier, db_manager):
        self.telegram = telegram_notifier
        self.db = db_manager
        self.error_counts = defaultdict(int)
        self.last_error_time = defaultdict(float)
        self.recovery_attempts = 0
        self.max_recovery_attempts = 3
        
    async def handle_auth_error(self, error: Exception) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        error_msg = str(error)
        logger.error(f"üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="AuthenticationError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="authentication"
        )
        
        if "2FA" in error_msg:
            print("üîê 2FA –∫–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å...")
            return await self.request_2fa_input()
        elif "blocked" in error_msg.lower():
            await self.telegram.send_error_alert("üö´ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return False
        elif "credentials" in error_msg.lower():
            await self.telegram.send_error_alert("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        elif "cloudflare" in error_msg.lower():
            await self.telegram.send_error_alert("üõ°Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return False
            
        return True
    
    async def handle_parsing_error(self, error: Exception, page_url: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        error_type = type(error).__name__
        self.error_counts[error_type] += 1
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type=error_type,
            error_message=str(error),
            stack_trace=traceback.format_exc(),
            context="parsing"
        )
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if self.error_counts[error_type] > 10:
            screenshot_path = await self.take_debug_screenshot(page_url)
            await self.telegram.send_error_alert(
                f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error_type}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.error_counts[error_type]}\n"
                f"URL: {page_url}",
                screenshot_path
            )
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if self.error_counts[error_type] > 5:
            logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ {error_type}")
            await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
        return True
    
    async def handle_network_error(self, error: Exception) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        error_msg = str(error)
        logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="NetworkError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="network"
        )
        
        if "timeout" in error_msg.lower():
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Ç–∏ - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º")
            await asyncio.sleep(10)
            return True
        elif "connection" in error_msg.lower():
            logger.warning("üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return await self.check_connectivity()
        elif "rate limit" in error_msg.lower():
            logger.warning("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
            return True
        elif "ssl" in error_msg.lower():
            logger.warning("üîí SSL –æ—à–∏–±–∫–∞ - –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞")
            return True
            
        return False
    
    async def handle_browser_error(self, error: Exception) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        error_msg = str(error)
        logger.error(f"üåê –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="BrowserError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="browser"
        )
        
        if "crashed" in error_msg.lower():
            logger.warning("üí• –ë—Ä–∞—É–∑–µ—Ä —É–ø–∞–ª - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            return True
        elif "context" in error_msg.lower():
            logger.warning("üîÑ –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ")
            return True
        elif "page" in error_msg.lower():
            logger.warning("üìÑ –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
            return True
            
        return False
    
    async def handle_database_error(self, error: Exception) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        error_msg = str(error)
        logger.error(f"üíæ –û—à–∏–±–∫–∞ –ë–î: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="DatabaseError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="database"
        )
        
        if "locked" in error_msg.lower():
            logger.warning("üîí –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(5)
            return True
        elif "corrupt" in error_msg.lower():
            logger.error("üí• –ë–î –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
            await self.telegram.send_error_alert("üí• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞!")
            return False
        elif "full" in error_msg.lower():
            logger.warning("üíæ –ë–î –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            await self.db.cleanup_old_records()
            return True
            
        return False
    
    async def handle_telegram_error(self, error: Exception) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        error_msg = str(error)
        logger.error(f"üì± –û—à–∏–±–∫–∞ Telegram: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="TelegramError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="telegram"
        )
        
        if "bot token" in error_msg.lower():
            logger.error("üîë –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            return False
        elif "chat" in error_msg.lower():
            logger.error("üí¨ –û—à–∏–±–∫–∞ —á–∞—Ç–∞")
            return False
        elif "rate limit" in error_msg.lower():
            logger.warning("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram - –æ–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(60)
            return True
            
        return False
    
    async def request_2fa_input(self) -> bool:
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞"""
        try:
            print("\nüîê 2FA Authentication Required")
            print("üì± Please check your authenticator app and enter the 6-digit code:")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å timeout
            code = await asyncio.wait_for(
                asyncio.to_thread(input, "2FA Code: "),
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–≤–æ–¥
            )
            
            if len(code) == 6 and code.isdigit():
                logger.info("‚úÖ 2FA –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω")
                return True
            else:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 2FA –∫–æ–¥–∞")
                return False
                
        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ 2FA: {e}")
            return False
    
    async def check_connectivity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            import aiohttp
            
            async with aiohttp.ClientSession() as session:
                async with session.get('https://www.google.com', timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    async def take_debug_screenshot(self, page_url: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            from playwright.async_api import async_playwright
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"screenshots/debug_{timestamp}.png"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            import os
            os.makedirs("screenshots", exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            playwright = await async_playwright().start()
            browser = await playwright.chromium.launch(headless=True)
            page = await browser.new_page()
            
            await page.goto(page_url, timeout=30000)
            await page.screenshot(path=screenshot_path, full_page=True)
            
            await browser.close()
            await playwright.stop()
            
            logger.info(f"üì∏ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            return screenshot_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è debug —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    async def full_recovery_sequence(self, parser_instance) -> bool:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            self.recovery_attempts += 1
            
            if self.recovery_attempts > self.max_recovery_attempts:
                await self.telegram.send_error_alert(
                    "üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!\n"
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
                )
                return False
            
            # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await self.stop_all_processes(parser_instance)
            
            # 2. –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await self.cleanup_temp_files()
            
            # 3. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            await self.reinitialize_browser(parser_instance)
            
            # 4. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not await parser_instance.auth.login():
                raise Exception("Failed to re-authenticate during recovery")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            test_result = await self.run_system_test(parser_instance)
            if not test_result:
                raise Exception("System test failed after recovery")
            
            logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            await self.telegram.send_status_update("üü¢ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            self.recovery_attempts = 0
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {self.recovery_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            delay = 30 * (2 ** self.recovery_attempts)
            await asyncio.sleep(delay)
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            return await self.full_recovery_sequence(parser_instance)
    
    async def stop_all_processes(self, parser_instance) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if hasattr(parser_instance, 'monitor'):
                await parser_instance.monitor.stop_monitoring()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            if hasattr(parser_instance, 'auth'):
                await parser_instance.auth.close()
            
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    async def cleanup_temp_files(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import os
            import glob
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
            temp_dirs = [
                "/tmp/.com.google.Chrome*",
                "/tmp/.org.chromium.Chromium*",
                "~/.cache/chromium",
                "~/.cache/google-chrome"
            ]
            
            for pattern in temp_dirs:
                try:
                    for path in glob.glob(os.path.expanduser(pattern)):
                        if os.path.isdir(path):
                            import shutil
                            shutil.rmtree(path, ignore_errors=True)
                except Exception:
                    pass
            
            logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def reinitialize_browser(self, parser_instance) -> None:
        """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            await parser_instance.auth.initialize_browser()
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise
    
    async def run_system_test(self, parser_instance) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            logger.info("üß™ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not await parser_instance.auth.is_authenticated_check():
                logger.error("‚ùå –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page = await parser_instance.auth.get_page()
            if not page:
                logger.error("‚ùå –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ (–±–∞–∑–æ–≤—ã–π)
            try:
                await page.goto("https://freightpower.schneider.com/loads", timeout=10000)
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"‚ùå –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            return False
    
    async def handle_critical_error(self, error: Exception, parser_instance) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        error_msg = str(error)
        logger.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        await self.db.log_error(
            error_type="CriticalError",
            error_message=error_msg,
            stack_trace=traceback.format_exc(),
            context="critical"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await self.telegram.send_error_alert(
            f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´!\n\n"
            f"–û—à–∏–±–∫–∞: {error_msg}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
        )
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            await self.full_recovery_sequence(parser_instance)
        except Exception as recovery_error:
            logger.critical(f"üí• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {recovery_error}")
            await self.telegram.send_error_alert(
                "üÜò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨!\n"
                "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
            )
    
    def get_error_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        return {
            'total_errors': sum(self.error_counts.values()),
            'error_types': dict(self.error_counts),
            'recovery_attempts': self.recovery_attempts,
            'last_errors': dict(self.last_error_time)
        }
