import time
import psutil
import asyncio
from typing import Dict, List, Optional
from collections import deque
from datetime import datetime, timedelta

from .logger import logger

class PerformanceMonitor:
    def __init__(self, max_history: int = 1000):
        self.scan_times = deque(maxlen=max_history)
        self.memory_usage = deque(maxlen=max_history)
        self.cpu_usage = deque(maxlen=max_history)
        self.error_counts = deque(maxlen=max_history)
        self.start_time = time.time()
        self.last_optimization_time = 0
        
    async def track_scan_performance(self, scan_time_ms: float) -> None:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_times.append(scan_time_ms)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if scan_time_ms > 10000:  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.warning(f"üêå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {scan_time_ms:.0f}ms")
        elif scan_time_ms < 1000:  # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.debug(f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {scan_time_ms:.0f}ms")
    
    async def track_system_resources(self) -> Dict:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            cpu_percent = psutil.cpu_percent(interval=0.1)
            self.cpu_usage.append(cpu_percent)
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            self.memory_usage.append(memory_percent)
            
            # –î–∏—Å–∫
            disk_usage = psutil.disk_usage('/').percent
            
            # –°–µ—Ç—å
            network_io = psutil.net_io_counters()
            
            resources = {
                'cpu_usage': cpu_percent,
                'memory_usage': memory_percent,
                'memory_available_mb': memory.available / (1024 * 1024),
                'disk_usage': disk_usage,
                'network_bytes_sent': network_io.bytes_sent,
                'network_bytes_recv': network_io.bytes_recv,
                'uptime_seconds': time.time() - self.start_time
            }
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if cpu_percent > 80:
                logger.warning(f"üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent:.1f}%")
            if memory_percent > 85:
                logger.warning(f"üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%")
            if disk_usage > 90:
                logger.warning(f"üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage:.1f}%")
            
            return resources
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return {}
    
    async def get_performance_report(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.scan_times:
                avg_scan_time = sum(self.scan_times) / len(self.scan_times)
                min_scan_time = min(self.scan_times)
                max_scan_time = max(self.scan_times)
                recent_avg = sum(list(self.scan_times)[-10:]) / min(10, len(self.scan_times))
            else:
                avg_scan_time = min_scan_time = max_scan_time = recent_avg = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if self.cpu_usage:
                avg_cpu = sum(self.cpu_usage) / len(self.cpu_usage)
                max_cpu = max(self.cpu_usage)
            else:
                avg_cpu = max_cpu = 0
                
            if self.memory_usage:
                avg_memory = sum(self.memory_usage) / len(self.memory_usage)
                max_memory = max(self.memory_usage)
            else:
                avg_memory = max_memory = 0
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime = time.time() - self.start_time
            uptime_hours = uptime / 3600
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_score = self._calculate_performance_score(
                avg_scan_time, avg_cpu, avg_memory
            )
            
            return {
                'scan_performance': {
                    'avg_scan_time_ms': avg_scan_time,
                    'min_scan_time_ms': min_scan_time,
                    'max_scan_time_ms': max_scan_time,
                    'recent_avg_ms': recent_avg,
                    'total_scans': len(self.scan_times)
                },
                'system_resources': {
                    'avg_cpu_percent': avg_cpu,
                    'max_cpu_percent': max_cpu,
                    'avg_memory_percent': avg_memory,
                    'max_memory_percent': max_memory
                },
                'uptime': {
                    'seconds': uptime,
                    'hours': uptime_hours,
                    'formatted': f"{int(uptime_hours)}h {int((uptime % 3600) / 60)}m"
                },
                'performance_score': performance_score,
                'recommendations': self._get_performance_recommendations(
                    avg_scan_time, avg_cpu, avg_memory
                )
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def _calculate_performance_score(self, avg_scan_time: float, avg_cpu: float, avg_memory: float) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)"""
        score = 100
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if avg_scan_time > 10000:
            score -= 30
        elif avg_scan_time > 5000:
            score -= 15
        elif avg_scan_time > 2000:
            score -= 5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        if avg_cpu > 80:
            score -= 25
        elif avg_cpu > 60:
            score -= 10
        elif avg_cpu > 40:
            score -= 5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        if avg_memory > 85:
            score -= 25
        elif avg_memory > 70:
            score -= 10
        elif avg_memory > 50:
            score -= 5
        
        return max(0, score)
    
    def _get_performance_recommendations(self, avg_scan_time: float, avg_cpu: float, avg_memory: float) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        if avg_scan_time > 10000:
            recommendations.append("üîß –£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            recommendations.append("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
            recommendations.append("üîß –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if avg_cpu > 80:
            recommendations.append("üî• –°–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU")
            recommendations.append("üî• –£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
        
        if avg_memory > 85:
            recommendations.append("üíæ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            recommendations.append("üíæ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        
        if not recommendations:
            recommendations.append("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        
        return recommendations
    
    async def should_scale_down(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω–∏–∑–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            cpu_usage = psutil.cpu_percent(interval=0.1)
            memory_usage = psutil.virtual_memory().percent
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.scan_times:
                recent_avg = sum(list(self.scan_times)[-5:]) / min(5, len(self.scan_times))
                if recent_avg > 15000:  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    return True
            
            return cpu_usage > 80 or memory_usage > 85
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def optimize_browser_settings(self, page) -> None:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        try:
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            await page.route('**/*.{png,jpg,jpeg,gif,css,woff,woff2,svg,ico}', 
                            lambda route: route.abort())
            await page.route('**/analytics/**', lambda route: route.abort())
            await page.route('**/tracking/**', lambda route: route.abort())
            await page.route('**/ads/**', lambda route: route.abort())
            await page.route('**/facebook.com/**', lambda route: route.abort())
            await page.route('**/google-analytics.com/**', lambda route: route.abort())
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ JavaScript –¥–ª—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            await page.add_init_script("""
                // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                window.console.log = () => {};
                window.console.warn = () => {};
                window.console.error = () => {};
                
                // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
                const style = document.createElement('style');
                style.textContent = '* { animation: none !important; transition: none !important; }';
                document.head.appendChild(style);
            """)
            
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def get_memory_usage_mb(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –ú–ë"""
        try:
            process = psutil.Process()
            memory_info = process.memory_info()
            return memory_info.rss / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ú–ë
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return 0
    
    async def cleanup_memory(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            
            logger.info("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    async def log_performance_metrics(self, operation: str, duration_ms: float, 
                                    success: bool = True, details: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—á–µ—Ä–µ–¥–∏
            if operation == "scan":
                self.scan_times.append(duration_ms)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
            logger.log_performance(operation, duration_ms, success)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            if duration_ms > 30000:  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                logger.warning(f"üêå –ê–Ω–æ–º–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {operation}: {duration_ms:.0f}ms")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def get_system_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            return {
                'platform': psutil.sys.platform,
                'cpu_count': psutil.cpu_count(),
                'cpu_freq': psutil.cpu_freq()._asdict() if psutil.cpu_freq() else {},
                'memory_total_gb': psutil.virtual_memory().total / (1024**3),
                'disk_total_gb': psutil.disk_usage('/').total / (1024**3),
                'python_version': f"{psutil.sys.version_info.major}.{psutil.sys.version_info.minor}.{psutil.sys.version_info.micro}"
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            return {}
