import asyncio
import time
import json
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from playwright.async_api import Page

from ..utils.logger import logger
from ..utils.performance_monitor import PerformanceMonitor
from .load_parser import LoadParser

class LoadMonitor:
    def __init__(self, config: Dict, parser: LoadParser, telegram_notifier, db_manager):
        self.config = config
        self.parser = parser
        self.telegram = telegram_notifier
        self.db = db_manager
        self.performance = PerformanceMonitor()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.scan_interval = config['monitoring']['fast_scan_interval_seconds']
        self.max_concurrent_requests = config['monitoring']['max_concurrent_requests']
        self.max_retry_attempts = config['monitoring']['max_retry_attempts']
        self.adaptive_scanning = config['monitoring']['adaptive_scanning']
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.is_monitoring = False
        self.last_scan_time = 0
        self.scan_count = 0
        self.loads_found_total = 0
        self.loads_sent_total = 0
        self.error_count = 0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.current_scan_interval = self.scan_interval
        self.success_rate = 1.0
        self.avg_response_time = 2.0
        
    async def start_monitoring(self, page: Page) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–∑–æ–≤...")
            self.is_monitoring = True
            
            # –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await asyncio.gather(
                self.fast_scan_monitoring(page),
                self.session_maintenance(page),
                self.performance_monitoring(),
                self.adaptive_scanning_control()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.is_monitoring = False
    
    async def fast_scan_monitoring(self, page: Page) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"""
        while self.is_monitoring:
            start_time = time.time()
            
            try:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if self.adaptive_scanning:
                    self.current_scan_interval = self._calculate_adaptive_interval()
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                tasks = []
                for page_num in range(1, 4):  # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    task = asyncio.create_task(
                        self.scan_single_page(page, page_num)
                    )
                    tasks.append(task)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å timeout
                results = await asyncio.wait_for(
                    asyncio.gather(*tasks, return_exceptions=True),
                    timeout=self.config['monitoring']['max_scan_time_seconds']
                )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                all_loads = []
                for result in results:
                    if isinstance(result, list):
                        all_loads.extend(result)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
                await self.process_loads_batch(all_loads)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.scan_count += 1
                self.loads_found_total += len(all_loads)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
                duration = (time.time() - start_time) * 1000
                await self._log_monitoring_cycle(len(all_loads), duration)
                
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                self.error_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                self.error_count += 1
                await self._handle_scan_error(e, page)
            
            # –¢–æ—á–Ω—ã–π timing –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            elapsed = time.time() - start_time
            sleep_time = max(0, self.current_scan_interval - elapsed)
            await asyncio.sleep(sleep_time)
    
    async def scan_single_page(self, page: Page, page_num: int) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–∑–∞–º–∏
            loads_url = f"https://freightpower.schneider.com/loads?page={page_num}"
            await page.goto(loads_url, wait_until='networkidle')
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤
            loads = await self.parser.scan_loads_page(page)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            profitable_loads = await self.parser.filter_profitable_loads(loads)
            
            logger.debug(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: {len(loads)} –≥—Ä—É–∑–æ–≤, {len(profitable_loads)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö")
            return profitable_loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
            return []
    
    async def process_loads_batch(self, loads: List[Dict]) -> None:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        if not loads:
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_tasks = []
        
        for load in loads:
            task = asyncio.create_task(
                self.process_single_load(load)
            )
            processing_tasks.append(task)
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        
        async def bounded_process(task):
            async with semaphore:
                return await task
        
        results = await asyncio.gather(
            *[bounded_process(task) for task in processing_tasks],
            return_exceptions=True
        )
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        successful = sum(1 for r in results if r is True)
        self.loads_sent_total += successful
        
        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–º: {successful}/{len(loads)} –≥—Ä—É–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    async def process_single_load(self, load_data: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        try:
            # 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ (< 0.01 —Å–µ–∫)
            load_hash = self.db.generate_load_hash(load_data)
            if not await self.db.is_load_new(load_data['id'], load_hash):
                return False
            
            # 2. –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (< 0.01 —Å–µ–∫)
            analysis = load_data.get('analysis', {})
            if not analysis:
                return False
            
            # 3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (< 0.5 —Å–µ–∫)
            send_task = asyncio.create_task(
                self.telegram.send_notification(load_data, analysis)
            )
            save_task = asyncio.create_task(
                self.db.mark_as_sent(load_data, analysis)
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            send_result, save_result = await asyncio.gather(
                send_task, save_task, return_exceptions=True
            )
            
            if isinstance(send_result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {send_result}")
                return False
                
            if isinstance(save_result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {save_result}")
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –≥—Ä—É–∑: {load_data['id']} "
                       f"(${analysis.get('rate_per_mile', 0):.2f}/mile)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–∑–∞ {load_data.get('id', 'unknown')}: {e}")
            return False
    
    async def session_maintenance(self, page: Page) -> None:
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        while self.is_monitoring:
            try:
                await asyncio.sleep(self.config['monitoring']['session_check_interval_minutes'] * 60)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
                current_url = page.url
                if 'login' in current_url or 'signin' in current_url:
                    logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    break
                
                logger.debug("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    async def performance_monitoring(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while self.is_monitoring:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                resources = await self.performance.track_system_resources()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                if await self.performance.should_scale_down():
                    logger.warning("üî• –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - —Å–Ω–∏–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å")
                    self.current_scan_interval = min(self.current_scan_interval * 1.5, 10)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                if resources:
                    logger.debug(f"üìä CPU: {resources.get('cpu_usage', 0):.1f}%, "
                               f"Memory: {resources.get('memory_usage', 0):.1f}%")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    async def adaptive_scanning_control(self) -> None:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        while self.is_monitoring:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if self.scan_count > 0:
                    self.success_rate = (self.scan_count - self.error_count) / self.scan_count
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if self.success_rate < 0.8:
                    self.current_scan_interval = min(self.current_scan_interval * 1.2, 10)
                    logger.info(f"üîß –°–Ω–∏–∂–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.current_scan_interval:.1f}s")
                elif self.success_rate > 0.95 and self.avg_response_time < 3000:
                    self.current_scan_interval = max(self.current_scan_interval * 0.9, 1)
                    logger.info(f"üîß –£–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.current_scan_interval:.1f}s")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    def _calculate_adaptive_interval(self) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        base_interval = self.scan_interval
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if self.success_rate < 0.7:
            base_interval *= 1.5
        elif self.success_rate > 0.9:
            base_interval *= 0.8
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if self.avg_response_time > 5000:
            base_interval *= 1.3
        elif self.avg_response_time < 1000:
            base_interval *= 0.9
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        return max(1.0, min(10.0, base_interval))
    
    async def _log_monitoring_cycle(self, loads_found: int, duration_ms: float) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            stats = {
                'loads_found': loads_found,
                'loads_sent': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                'avg_scan_time_ms': duration_ms,
                'errors_count': self.error_count,
                'session_active': True,
                'memory_usage': 0,
                'cpu_usage': 0
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            resources = await self.performance.track_system_resources()
            if resources:
                stats['memory_usage'] = resources.get('memory_usage', 0)
                stats['cpu_usage'] = resources.get('cpu_usage', 0)
            
            await self.db.log_monitoring_cycle(stats)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def _handle_scan_error(self, error: Exception, page: Page) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            error_msg = str(error)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ë–î
            await self.db.log_error(
                error_type=type(error).__name__,
                error_details=error_msg,
                stack_trace="",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å traceback
                context="load_monitoring"
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
            if self.config['monitoring']['screenshot_on_error']:
                screenshot_path = await self.parser.screenshot_on_error(
                    "monitoring_error", page
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                await self.telegram.send_error_alert(error_msg, screenshot_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        self.is_monitoring = False
    
    async def get_monitoring_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'is_monitoring': self.is_monitoring,
            'scan_count': self.scan_count,
            'loads_found_total': self.loads_found_total,
            'loads_sent_total': self.loads_sent_total,
            'error_count': self.error_count,
            'success_rate': self.success_rate,
            'current_scan_interval': self.current_scan_interval,
            'avg_response_time': self.avg_response_time,
            'uptime_hours': (time.time() - self.last_scan_time) / 3600 if self.last_scan_time else 0
        }
    
    async def websocket_monitoring(self, page: Page) -> None:
        """WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
        try:
            logger.info("üîå –ü–æ–ø—ã—Ç–∫–∞ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
            logger.warning("‚ö†Ô∏è WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fast scan")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def detect_page_changes(self, page: Page) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content = await page.content()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
