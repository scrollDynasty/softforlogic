import asyncio
import time
import re
import os
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from playwright.async_api import Page, ElementHandle

from ..utils.logger import logger
from ..utils.rate_calculator import RateCalculator
from ..utils.performance_monitor import PerformanceMonitor
from ..utils.gemini_form_filler import GeminiFormFiller
from ..utils.smart_ai_navigator import SmartAINavigator
from .selectors import selector_manager

class LoadParser:
    def __init__(self, config: Dict):
        self.config = config
        self.performance = PerformanceMonitor()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º
        self.ai_form_filler = None
        self.smart_ai_navigator = None
        
        if config.get('ai', {}).get('enable_ai_form_filling', False):
            gemini_api_key = config.get('ai', {}).get('gemini_api_key')
            if gemini_api_key:
                try:
                    self.ai_form_filler = GeminiFormFiller(gemini_api_key)
                    logger.info("ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Smart AI Navigator —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω
                    if os.getenv('DISABLE_AI_NAVIGATOR', 'false').lower() != 'true':
                        self.smart_ai_navigator = SmartAINavigator(gemini_api_key)
                        logger.info("üß† Smart AI Navigator –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        logger.info("‚ö†Ô∏è Smart AI Navigator –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ DISABLE_AI_NAVIGATOR=true")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞: {e}")
            else:
                logger.warning("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –£–º–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å fallback –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        self.SMART_SELECTORS = {
            'load_items': [
                "[data-testid='load-card']",
                ".load-item, .freight-row",
                "tr[data-load-id]",
                ".shipment-row",
                "[class*='load'][class*='row']",
                "tr:has(td)",
                ".freight-item"
            ],
            'load_id': [
                "[data-testid='load-id']",
                ".load-number, .reference-number",
                "[class*='load-id'], [class*='reference']",
                "td:first-child, .id-column",
                "[data-testid='reference']",
                ".load-reference"
            ],
            'pickup_location': [
                "[data-testid='pickup-location']",
                ".origin, .pickup",
                "[class*='pickup'], [class*='origin']",
                "td:nth-child(2), .pickup-column",
                ".pickup-location"
            ],
            'delivery_location': [
                "[data-testid='delivery-location']",
                ".destination, .delivery",
                "[class*='delivery'], [class*='destination']",
                "td:nth-child(3), .delivery-column",
                ".delivery-location"
            ],
            'miles': [
                "[data-testid='miles']",
                ".distance, .total-miles",
                "[class*='miles'], [class*='distance']",
                "td:nth-child(4), .miles-column",
                ".total-distance"
            ],
            'deadhead': [
                "[data-testid='deadhead']",
                ".deadhead-miles, .empty-miles",
                "[class*='deadhead'], [class*='empty']",
                "td:nth-child(5), .deadhead-column",
                ".empty-miles"
            ],
            'rate': [
                "[data-testid='rate']",
                ".rate-amount, .price",
                "[class*='rate'], [class*='price']",
                "td:nth-child(6), .rate-column",
                ".load-rate"
            ],
            'equipment': [
                "[data-testid='equipment']",
                ".trailer-type, .equipment-type",
                "[class*='equipment'], [class*='trailer']",
                "td:nth-child(7), .equipment-column",
                ".trailer-type"
            ],
            'pickup_date': [
                "[data-testid='pickup-date']",
                ".pickup-datetime, .ready-date",
                "[class*='pickup'][class*='date']",
                "td:nth-child(8), .date-column",
                ".ready-date"
            ]
        }
    
    async def set_search_filters(self, location: str, max_deadhead: int, min_miles: int) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {location}, max DH: {max_deadhead}, min miles: {min_miles}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return False
    
    async def scan_loads_page(self, page: Page) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥—Ä—É–∑–∞–º–∏"""
        try:
            start_time = time.time()
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –≥—Ä—É–∑–∞–º–∏
            load_elements = await self.find_elements_smart(page, 'load_items')
            
            if not load_elements:
                logger.warning("‚ö†Ô∏è –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return []
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(load_elements)} –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–∑–æ–≤
            tasks = []
            for element in load_elements:
                task = asyncio.create_task(self.extract_load_data(element))
                tasks.append(task)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            results = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=30
            )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            loads = []
            for result in results:
                if isinstance(result, dict) and result:
                    loads.append(result)
                elif isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞: {result}")
            
            duration = (time.time() - start_time) * 1000
            await self.performance.track_scan_performance(duration)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(loads)} –≥—Ä—É–∑–æ–≤ –∑–∞ {duration:.0f}ms")
            return loads
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    async def find_elements_smart(self, page: Page, selector_group: str) -> List[ElementHandle]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å fallback —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ SelectorManager"""
        return await selector_manager.find_elements_smart(page, selector_group)
    
    async def extract_load_data(self, load_element: ElementHandle) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"""
        try:
            load_data = {}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≥—Ä—É–∑–∞
            load_id = await self._extract_text_smart(load_element, 'load_id')
            if not load_id:
                logger.debug("‚ö†Ô∏è ID –≥—Ä—É–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
            
            load_data['id'] = load_id.strip()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            load_data['pickup'] = await self._extract_text_smart(load_element, 'pickup_location')
            load_data['delivery'] = await self._extract_text_smart(load_element, 'delivery_location')
            load_data['equipment'] = await self._extract_text_smart(load_element, 'equipment')
            load_data['pickup_date'] = await self._extract_text_smart(load_element, 'pickup_date')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            miles_text = await self._extract_text_smart(load_element, 'miles')
            load_data['miles'] = RateCalculator.parse_miles_from_text(miles_text) if miles_text else 0
            
            deadhead_text = await self._extract_text_smart(load_element, 'deadhead')
            load_data['deadhead'] = RateCalculator.parse_deadhead_from_text(deadhead_text) if deadhead_text else 0
            
            rate_text = await self._extract_text_smart(load_element, 'rate')
            load_data['rate'] = RateCalculator.parse_rate_from_text(rate_text) if rate_text else None
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
            load_data['timestamp'] = datetime.now().isoformat()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_load_data(load_data):
                logger.debug(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ {load_data.get('id')}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
            
            return load_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞: {e}")
            return None
    
    async def _extract_text_smart(self, element: ElementHandle, selector_group: str) -> Optional[str]:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å fallback —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        selectors = self.SMART_SELECTORS.get(selector_group, [])
        
        for selector in selectors:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥—Ä—É–∑–∞
                found_element = await element.query_selector(selector)
                if found_element:
                    text = await found_element.text_content()
                    if text and text.strip():
                        return text.strip()
            except Exception:
                continue
        
        return None
    
    def _validate_load_data(self, load_data: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"""
        required_fields = ['id', 'pickup', 'delivery']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if not load_data.get(field):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        miles = load_data.get('miles', 0)
        deadhead = load_data.get('deadhead', 0)
        
        if miles <= 0 or deadhead < 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if miles > 3000 or deadhead > 500:
            return False
        
        return True
    
    async def calculate_profitability(self, deadhead: int, miles: int, rate: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞"""
        return RateCalculator.calculate_minimum_rate(deadhead, miles)
    
    async def filter_profitable_loads(self, loads: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        try:
            profitable_loads = []
            criteria = self.config['search_criteria']
            
            for load in loads:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                if not self._meets_criteria(load, criteria):
                    continue
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
                analysis = RateCalculator.calculate_comprehensive_profitability(load)
                
                if analysis.is_profitable:
                    load['analysis'] = {
                        'rate_per_mile': analysis.rate_per_mile,
                        'profitability_score': analysis.profitability_score,
                        'priority': analysis.priority,
                        'total_miles': analysis.total_miles,
                        'deadhead_ratio': analysis.deadhead_ratio,
                        'profit_margin': analysis.profit_margin
                    }
                    profitable_loads.append(load)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
                    logger.log_load_found(
                        load['id'], 
                        analysis.rate_per_mile, 
                        analysis.profitability_score
                    )
            
            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–æ {len(profitable_loads)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–∑ {len(loads)}")
            return profitable_loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤: {e}")
            return []
    
    def _meets_criteria(self, load: Dict, criteria: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
        try:
            miles = load.get('miles', 0)
            deadhead = load.get('deadhead', 0)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if miles < criteria.get('min_total_miles', 200):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ deadhead
            if deadhead > criteria.get('max_deadhead_miles', 250):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            excluded_states = criteria.get('excluded_states', [])
            pickup = load.get('pickup', '').upper()
            delivery = load.get('delivery', '').upper()
            
            for state in excluded_states:
                if state in pickup or state in delivery:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return False
    
    async def get_load_details(self, load_id: str, page: Page) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞: {load_id}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞ {load_id}: {e}")
            return None
    
    async def screenshot_on_error(self, page: Page, error_context: str = "") -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            timestamp = int(time.time())
            screenshot_path = f"error_screenshot_{timestamp}.png"
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            await page.screenshot(path=screenshot_path, full_page=True)
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Smart AI Navigator, –ø—Ä–æ–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            if self.smart_ai_navigator:
                try:
                    logger.info("üß† AI –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏...")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    analysis = await self.smart_ai_navigator._analyze_current_state(page)
                    
                    if analysis and not analysis.get('error'):
                        ai_analysis = analysis.get('ai_analysis', {})
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        page_type = ai_analysis.get('page_type', 'unknown')
                        auth_status = ai_analysis.get('authentication_status', 'unknown')
                        blocking_issues = ai_analysis.get('blocking_issues', [])
                        recommended_action = ai_analysis.get('next_recommended_action', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
                        confidence = ai_analysis.get('confidence', 0)
                        
                        logger.info(f"üîç AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                        logger.info(f"  üìÑ –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_type}")
                        logger.info(f"  üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_status}")
                        logger.info(f"  üö´ –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {blocking_issues}")
                        logger.info(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {recommended_action}")
                        logger.info(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
                        diagnosis_path = f"ai_diagnosis_{timestamp}.json"
                        diagnosis_data = {
                            'timestamp': timestamp,
                            'error_context': error_context,
                            'screenshot_path': screenshot_path,
                            'ai_analysis': ai_analysis,
                            'page_info': analysis.get('page_info', {}),
                            'url': page.url,
                            'title': await page.title()
                        }
                        
                        import json
                        with open(diagnosis_path, 'w', encoding='utf-8') as f:
                            json.dump(diagnosis_data, f, indent=2, ensure_ascii=False)
                        
                        logger.info(f"üìã AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {diagnosis_path}")
                        
                        # –ï—Å–ª–∏ AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                        if blocking_issues and len(blocking_issues) > 0:
                            logger.info("üîÑ AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã, –ø—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                            await self._ai_auto_recovery(page, ai_analysis, error_context)
                    
                except Exception as diag_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
            
            return screenshot_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return ""
    
    async def _ai_auto_recovery(self, page: Page, ai_analysis: Dict, error_context: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            blocking_issues = ai_analysis.get('blocking_issues', [])
            page_type = ai_analysis.get('page_type', 'unknown')
            auth_status = ai_analysis.get('authentication_status', 'unknown')
            
            logger.info("ü§ñ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            
            recovery_actions = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
            if 'session_expired' in blocking_issues or auth_status == 'session_expired':
                recovery_actions.append({
                    'action': 'session_recovery',
                    'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞'
                })
            
            if 'page_not_loaded' in blocking_issues or page_type == 'loading_page':
                recovery_actions.append({
                    'action': 'page_reload',
                    'description': '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
                })
            
            if '2fa_required' in blocking_issues or auth_status == '2fa_required':
                recovery_actions.append({
                    'action': 'wait_for_2fa',
                    'description': '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA'
                })
            
            if page_type == 'error_page':
                recovery_actions.append({
                    'action': 'navigate_home',
                    'description': '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            for action in recovery_actions:
                try:
                    action_type = action['action']
                    description = action['description']
                    
                    logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {description}")
                    
                    if action_type == 'page_reload':
                        await page.reload(wait_until='domcontentloaded', timeout=15000)
                        await page.wait_for_timeout(2000)
                        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    
                    elif action_type == 'navigate_home':
                        await page.goto("https://freightpower.schneider.com/carrier/app/home", 
                                      wait_until='domcontentloaded', timeout=15000)
                        logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    
                    elif action_type == 'session_recovery':
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        await page.goto("https://freightpower.schneider.com/carrier/login", 
                                      wait_until='domcontentloaded', timeout=15000)
                        logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                    
                    elif action_type == 'wait_for_2fa':
                        logger.info("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                        await page.wait_for_timeout(10000)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                    
                    # –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    
                except Exception as recovery_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {action_type}: {recovery_error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if recovery_actions:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                new_analysis = await self.smart_ai_navigator._analyze_current_state(page)
                if new_analysis and not new_analysis.get('error'):
                    new_ai_analysis = new_analysis.get('ai_analysis', {})
                    new_blocking_issues = new_ai_analysis.get('blocking_issues', [])
                    
                    if len(new_blocking_issues) < len(blocking_issues):
                        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        logger.info(f"üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(blocking_issues) - len(new_blocking_issues)}")
                    elif len(new_blocking_issues) == 0:
                        logger.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ")
                        logger.info(f"üö´ –û—Å—Ç–∞—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã: {new_blocking_issues}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def auto_discover_selectors(self, page: Page) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            discovered_selectors = {}
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö
            potential_containers = await page.query_selector_all(
                "[class*='load'], [class*='freight'], [class*='shipment'], "
                "[data-*='load'], tr, .row"
            )
            
            for container in potential_containers:
                # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                text_content = await container.text_content()
                if text_content and self._looks_like_load_data(text_content):
                    selector = await container.evaluate("""
                        el => {
                            let selector = el.tagName.toLowerCase();
                            if (el.className) {
                                selector += '.' + el.className.split(' ').join('.');
                            }
                            return selector;
                        }
                    """)
                    
                    if 'load_items' not in discovered_selectors:
                        discovered_selectors['load_items'] = []
                    discovered_selectors['load_items'].append(selector)
            
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(discovered_selectors.get('load_items', []))} –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
            return discovered_selectors
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def _looks_like_load_data(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ"""
        if not text:
            return False
        
        indicators = ['mile', 'pickup', 'delivery', 'deadhead', 'SNI-', 'LOAD-', '$']
        matches = sum(1 for indicator in indicators if indicator.lower() in text.lower())
        
        return matches >= 2

    async def navigate_to_search_page(self, page: Page) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Smart AI Navigator"""
        try:
            if self.smart_ai_navigator:
                logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É—é Smart AI Navigator –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                
                context = {
                    'target_url': 'https://freightpower.schneider.com/carrier/app/search',
                    'fallback_urls': [
                        'https://freightpower.schneider.com/carrier/app/home',
                        'https://freightpower.schneider.com/carrier/app/loads'
                    ],
                    'expected_elements': ['search form', 'load search', 'filters'],
                    'session_info': 'authenticated user session'
                }
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è AI –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    ai_result = await asyncio.wait_for(
                        self.smart_ai_navigator.analyze_and_navigate(
                            page, 
                            goal="navigate_to_search_page",
                            context=context
                        ),
                        timeout=30.0  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ AI –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    )
                except asyncio.TimeoutError:
                    logger.error("‚è∞ –¢–ê–ô–ú–ê–£–¢: AI Navigator –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –æ–±—ã—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...")
                    ai_result = {'success': False, 'error': 'timeout'}
                
                if ai_result.get('success'):
                    logger.info(f"‚úÖ Smart AI Navigator —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∑–∞ {ai_result.get('execution_time', 0):.1f}—Å")
                    logger.info(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {ai_result.get('confidence', 0):.1%}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
                    stats = self.smart_ai_navigator.get_learning_stats()
                    if stats['total_actions'] > 0:
                        logger.info(f"üìö AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['successful_actions']}/{stats['total_actions']} —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ({stats['success_rate']:.1%})")
                    
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Smart AI Navigator –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é: {ai_result.get('error', 'Unknown error')}")
                    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                    return await self._fallback_navigate_to_search_page(page)
            else:
                logger.error("‚ùå Smart AI Navigator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                return await self._fallback_navigate_to_search_page(page)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Smart AI –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
            return await self._fallback_navigate_to_search_page(page)
    
    async def _fallback_navigate_to_search_page(self, page: Page) -> bool:
        """Fallback –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ AI (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π)"""
        try:
            logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
            current_url = page.url
            logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            if 'search' in current_url.lower():
                logger.info("‚úÖ –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞")
                return True
            
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–∞–∂–¥–∞—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            target_urls = [
                "https://freightpower.schneider.com/carrier/app/search",
                "https://freightpower.schneider.com/loads",
                "https://freightpower.schneider.com/carrier/app/loads",
            ]
            
            # 1) –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ URL —Å –±—ã—Å—Ç—Ä—ã–º 'commit' –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π URL
            for idx, url in enumerate(target_urls, start=1):
                try:
                    logger.info(f"üöÄ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ (–≤–∞—Ä–∏–∞–Ω—Ç {idx}): {url}")
                    try:
                        # –¢–∞–π–º-–±–æ–∫—Å–∏—Ä—É–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π goto –≥–¥–µ-—Ç–æ –∑–∞–ª–∏–ø–Ω–µ—Ç
                        await asyncio.wait_for(
                            page.goto(url, wait_until='commit', timeout=8000),
                            timeout=12.0
                        )
                    except asyncio.TimeoutError:
                        logger.warning("‚è∞ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è page.goto, –ø—Ä–æ–≤–µ—Ä—è—é URL...")
                    except Exception as nav_err:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ page.goto: {nav_err}")
                    
                    # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã URL
                    try:
                        await page.wait_for_url(r".*(search|loads).*", timeout=6000)
                    except Exception:
                        pass
                    
                    current_url = page.url
                    logger.info(f"üìç –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ URL: {current_url}")
                    if re.search(r"(search|loads)", current_url.lower()):
                        logger.info("‚úÖ Fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                        return True
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                logger.info("üß≠ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π")
                selectors = [
                    "a[href*='search']",
                    "a:has-text('Search')",
                    "a:has-text('Find Loads')",
                    "button:has-text('Search')",
                    "button:has-text('Find Loads')",
                    "a[href*='loads']",
                ]
                for sel in selectors:
                    try:
                        el = await page.wait_for_selector(sel, timeout=2000)
                        if el:
                            await el.click()
                            try:
                                await page.wait_for_url(r".*(search|loads).*", timeout=6000)
                            except Exception:
                                pass
                            current_url = page.url
                            logger.info(f"üìç –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ URL: {current_url}")
                            if re.search(r"(search|loads)", current_url.lower()):
                                logger.info("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–∞")
                                return True
                    except Exception:
                        continue
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # 3) –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ URL —á–µ—Ä–µ–∑ JS –∫–∞–∫ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞
            try:
                logger.info("üõ† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ URL —á–µ—Ä–µ–∑ JS")
                await page.evaluate("""(url) => { window.stop(); location.href = url; }""",
                                    "https://freightpower.schneider.com/carrier/app/search")
                try:
                    await page.wait_for_url(r".*(search|loads).*", timeout=6000)
                except Exception:
                    pass
                current_url = page.url
                logger.info(f"üìç –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã URL: {current_url}")
                if re.search(r"(search|loads)", current_url.lower()):
                    logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False

    def get_user_search_criteria(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–Ω—è—Ç–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π"""
        print("\n" + "="*60)
        print("üîç –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í")
        print("="*60)
        print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
        print("(–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)")
        print("="*60)
        
        criteria = {}
        
        # –¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏
        capacity_type = input("–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (Dry Van, Reefer, Flatbed, Power Only): ").strip()
        if capacity_type:
            criteria['capacity_type'] = capacity_type
        
        # –ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏
        origin_location = input("–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —à—Ç–∞—Ç): ").strip()
        if origin_location:
            criteria['origin_location'] = origin_location
        
        # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏
        origin_radius = input("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏ (25-250 –º–∏–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
        if origin_radius:
            try:
                criteria['origin_radius'] = int(origin_radius)
            except ValueError:
                criteria['origin_radius'] = 100
        
        # –ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        destination_location = input("–ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —à—Ç–∞—Ç –∏–ª–∏ 'Anywhere'): ").strip()
        if destination_location:
            criteria['destination_location'] = destination_location
        
        # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        destination_radius = input("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (25-250 –º–∏–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
        if destination_radius:
            try:
                criteria['destination_radius'] = int(destination_radius)
            except ValueError:
                criteria['destination_radius'] = 100
        
        # –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –û–¢
        pickup_date_from = input("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –û–¢ (MM/DD/YYYY): ").strip()
        if pickup_date_from:
            criteria['pickup_date_from'] = pickup_date_from
        
        # –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –î–û
        pickup_date_to = input("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –î–û (MM/DD/YYYY): ").strip()
        if pickup_date_to:
            criteria['pickup_date_to'] = pickup_date_to
        
        # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢
        delivery_date_from = input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢ (MM/DD/YYYY): ").strip()
        if delivery_date_from:
            criteria['delivery_date_from'] = delivery_date_from
        
        # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û
        delivery_date_to = input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û (MM/DD/YYYY): ").strip()
        if delivery_date_to:
            criteria['delivery_date_to'] = delivery_date_to
        
        # –í—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("="*60)
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        for key, value in criteria.items():
            display_key = {
                'capacity_type': '–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
                'origin_location': '–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏',
                'origin_radius': '–†–∞–¥–∏—É—Å –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏',
                'destination_location': '–ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏', 
                'destination_radius': '–†–∞–¥–∏—É—Å –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏',
                'pickup_date_from': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –û–¢',
                'pickup_date_to': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –î–û',
                'delivery_date_from': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢',
                'delivery_date_to': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û'
            }.get(key, key)
            print(f"  {display_key}: {value}")
        print("="*60)
        
        return criteria

    async def setup_user_filters(self, page: Page, user_criteria: Dict) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ AI –ø–æ–º–æ—â–Ω–∏–∫
            if self.ai_form_filler:
                logger.info("ü§ñ –ó–∞–ø—É—Å–∫ AI-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                success = await self.ai_form_filler.fill_search_form(page, user_criteria)
                
                if success:
                    logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–º–æ—â—å—é AI")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return False
            else:
                logger.error("‚ùå AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def _fallback_setup_filters(self, page: Page, user_criteria: Dict) -> bool:
        """Fallback –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ AI (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            logger.info("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ç–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
            
            # –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_load_state('domcontentloaded', timeout=8000)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –±—ã—Å—Ç—Ä–æ
            success_count = 0
            total_attempts = 0
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
            if user_criteria.get('capacity_type'):
                total_attempts += 1
                if await self._quick_set_capacity_type(page, user_criteria['capacity_type']):
                    success_count += 1
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if user_criteria.get('origin_location'):
                total_attempts += 1
                if await self._quick_set_location(page, 'origin', user_criteria['origin_location']):
                    success_count += 1
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            if user_criteria.get('destination_location'):
                total_attempts += 1
                if await self._quick_set_location(page, 'destination', user_criteria['destination_location']):
                    success_count += 1
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
            total_attempts += 1
            if await self._quick_execute_search(page):
                success_count += 1
            
            success_rate = success_count / total_attempts if total_attempts > 0 else 0
            logger.info(f"üìä Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {success_count}/{total_attempts} ({success_rate:.1%})")
            
            return success_rate >= 0.5  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 50%+ –¥–µ–π—Å—Ç–≤–∏–π
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False

    async def _quick_set_capacity_type(self, page: Page, capacity_type: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            selectors = ["select:first-of-type", "select[name*='equipment']", "select[name*='capacity']"]
            
            for selector in selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        await element.select_option(label=capacity_type)
                        return True
                except:
                    continue
            return False
        except:
            return False

    async def _quick_set_location(self, page: Page, location_type: str, location: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π –ª–æ–∫–∞—Ü–∏–∏
            if location_type == 'origin':
                selectors = ["input[placeholder*='Origin']", "input[placeholder*='From']", "input[name*='origin']"]
            else:
                selectors = ["input[placeholder*='Destination']", "input[placeholder*='To']", "input[name*='destination']"]
            
            for selector in selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        await element.fill(location)
                        return True
                except:
                    continue
            return False
        except:
            return False

    async def _quick_execute_search(self, page: Page) -> bool:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            selectors = ["button[type='submit']", "input[type='submit']", "button:contains('Search')", "button:contains('Find')"]
            
            for selector in selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        await element.click()
                        return True
                except:
                    continue
            return False
        except:
            return False

    async def _set_capacity_type(self, page: Page, capacity_type: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)"""
        try:
            logger.info(f"üöõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {capacity_type}")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Schneider FreightPower
            capacity_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Schneider
                "select[data-testid*='equipment']",
                "select[data-testid*='capacity']",
                "select[data-testid*='trailer']",
                "select[name*='equipmentType']",
                "select[name*='capacity']",
                "select[name*='equipment']",
                "select[id*='capacity']",
                "select[id*='equipment']",
                "select[id*='trailer']",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ–ø—Ü–∏–π (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ)
                "select:has(option[value*='DRY_VAN'])",
                "select:has(option[value*='Dry Van'])",
                "select:has(option:contains('Dry Van'))",
                "select:has(option:contains('Reefer'))",
                "select:has(option:contains('Flatbed'))",
                "select:has(option:contains('Power Only'))",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
                ".equipment-select select",
                ".capacity-select select",
                ".trailer-type select",
                "[class*='equipment'] select",
                "[class*='capacity'] select",
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "form select:first-of-type",
                ".form-group:first-of-type select",
                "div:has(label:contains('Equipment')) select",
                "div:has(label:contains('Capacity')) select"
            ]
            
            for selector in capacity_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=1500)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–∞—è –æ–ø—Ü–∏—è –≤ —Å–µ–ª–µ–∫—Ç–µ
                        options = await element.query_selector_all('option')
                        option_data = []
                        
                        for option in options:
                            value = await option.get_attribute('value')
                            text = await option.text_content()
                            option_data.append({
                                'value': value.strip() if value else "",
                                'text': text.strip() if text else ""
                            })
                        
                        option_texts = [opt['text'] for opt in option_data]
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏: {option_texts}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        success = False
                        
                        # –°–ø–æ—Å–æ–± 1: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É
                        for opt in option_data:
                            if opt['text'].lower() == capacity_type.lower():
                                try:
                                    await element.select_option(label=opt['text'])
                                    success = True
                                    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{opt['text']}'")
                                    break
                                except Exception:
                                    continue
                        
                        # –°–ø–æ—Å–æ–± 2: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
                        if not success:
                            for opt in option_data:
                                if opt['value'].lower() == capacity_type.lower():
                                    try:
                                        await element.select_option(value=opt['value'])
                                        success = True
                                        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é: '{opt['value']}'")
                                        break
                                    except Exception:
                                        continue
                        
                        # –°–ø–æ—Å–æ–± 3: —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if not success:
                            capacity_lower = capacity_type.lower()
                            for opt in option_data:
                                text_lower = opt['text'].lower()
                                value_lower = opt['value'].lower()
                                
                                if (capacity_lower in text_lower or text_lower in capacity_lower or
                                    capacity_lower in value_lower or value_lower in capacity_lower):
                                    try:
                                        if opt['text']:
                                            await element.select_option(label=opt['text'])
                                        else:
                                            await element.select_option(value=opt['value'])
                                        success = True
                                        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{opt['text']}' –¥–ª—è '{capacity_type}'")
                                        break
                                    except Exception:
                                        continue
                        
                        # –°–ø–æ—Å–æ–± 4: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è Schneider
                        if not success:
                            type_mappings = {
                                'dry van': ['dry van', 'dryvan', 'van', 'dry_van'],
                                'reefer': ['reefer', 'refrigerated', 'temp controlled'],
                                'flatbed': ['flatbed', 'flat bed', 'flat'],
                                'power only': ['power only', 'power', 'bobtail']
                            }
                            
                            search_terms = type_mappings.get(capacity_type.lower(), [capacity_type.lower()])
                            
                            for opt in option_data:
                                text_lower = opt['text'].lower()
                                value_lower = opt['value'].lower()
                                
                                for term in search_terms:
                                    if term in text_lower or term in value_lower:
                                        try:
                                            if opt['text']:
                                                await element.select_option(label=opt['text'])
                                            else:
                                                await element.select_option(value=opt['value'])
                                            success = True
                                            logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥: '{opt['text']}' –¥–ª—è '{capacity_type}'")
                                            break
                                        except Exception:
                                            continue
                                if success:
                                    break
                        
                        if success:
                            return
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '{capacity_type}' –≤ —Å–µ–ª–µ–∫—Ç–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏: {option_texts}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {capacity_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {e}")

    async def _set_location(self, page: Page, location_type: str, location: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
            if location_type.lower() == 'origin':
                location_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Origin –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    "input[name*='origin']",
                    "input[id*='origin']",
                    "input[placeholder*='Origin']",
                    "input[placeholder*='Romeoville']",
                    "[data-testid*='origin']",
                    ".origin input",
                    ".origin-location input",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Origin –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ)
                    "form input[type='text']:nth-of-type(1)",
                    "form input:first-of-type",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "input[name*='pickup']",
                    "input[placeholder*='pickup']"
                ]
            else:  # destination
                location_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Destination –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    "input[name*='destination']",
                    "input[id*='destination']",
                    "input[placeholder*='Destination']",
                    "input[placeholder*='Dayville']",
                    "[data-testid*='destination']",
                    ".destination input",
                    ".destination-location input",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Destination –æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ)
                    "form input[type='text']:nth-of-type(2)",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "input[name*='delivery']",
                    "input[placeholder*='delivery']"
                ]
            
            success = False
            for selector in location_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=1500)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                        placeholder = await element.get_attribute('placeholder')
                        name = await element.get_attribute('name')
                        element_id = await element.get_attribute('id')
                        
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ: placeholder='{placeholder}', name='{name}', id='{element_id}'")
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        await element.click()
                        await element.clear()
                        await page.wait_for_timeout(200)  # –ë—ã–ª–æ 500
                        await element.type(location)
                        await page.wait_for_timeout(800)  # –ë—ã–ª–æ 1500
                        
                        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        try:
                            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                            autocomplete_selectors = [
                                ".autocomplete-option",
                                ".dropdown-item",
                                ".suggestion",
                                ".typeahead-option",
                                "[role='option']",
                                ".ui-menu-item",
                                ".location-option"
                            ]
                            
                            autocomplete_found = False
                            for ac_selector in autocomplete_selectors:
                                try:
                                    await page.wait_for_selector(ac_selector, timeout=1500)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                                    await page.wait_for_timeout(200)  # –ë—ã–ª–æ 500
                                    await page.click(f"{ac_selector}:first-child")
                                    autocomplete_found = True
                                    logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –∏–∑ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {location_type}")
                                    break
                                except Exception:
                                    continue
                            
                            if not autocomplete_found:
                                # –ï—Å–ª–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–∂–∏–º–∞–µ–º Enter
                                await element.press("Enter")
                                logger.info(f"‚úÖ –ù–∞–∂–∞—Ç Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {location_type}")
                                
                        except Exception:
                            # Fallback - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º Enter
                            await element.press("Enter")
                            logger.info(f"‚úÖ Fallback: –Ω–∞–∂–∞—Ç Enter –¥–ª—è {location_type}")
                        
                        await page.wait_for_timeout(300)  # –ë—ã–ª–æ 1000
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                        current_value = await element.input_value()
                        if current_value and (location.lower() in current_value.lower() or current_value.lower() in location.lower()):
                            logger.info(f"‚úÖ –ú–µ—Å—Ç–æ {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {location} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value})")
                            success = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è {location_type}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{location}', –ø–æ–ª—É—á–µ–Ω–æ '{current_value}'")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {location_type}: {e}")
                    continue
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ {location_type}: {location}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–∞ {location_type}: {e}")

    async def _set_radius(self, page: Page, location_type: str, radius: int) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ +/-"""
        try:
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {radius} –º–∏–ª—å")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–¥–∏—É—Å–∞
            if location_type.lower() == 'origin':
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Origin Radius (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π)
                base_selectors = [
                    "[data-testid*='origin-radius']",
                    "[id*='origin'][id*='radius']",
                    "[class*='origin'][class*='radius']",
                    ".radius-control:first-of-type",
                    ".origin-radius",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                    ".radius-control:nth-of-type(1)",
                    "[class*='radius']:nth-of-type(1)"
                ]
            else:  # destination
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Destination Radius (–æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π)
                base_selectors = [
                    "[data-testid*='destination-radius']",
                    "[id*='destination'][id*='radius']",
                    "[class*='destination'][class*='radius']",
                    ".radius-control:nth-of-type(2)",
                    ".destination-radius",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                    "[class*='radius']:nth-of-type(2)"
                ]

            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–æ–º
            radius_container = None
            current_value = 100  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            for base_selector in base_selectors:
                try:
                    container = await page.wait_for_selector(base_selector, timeout=2000)
                    if container:
                        radius_container = container
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–¥–∏—É—Å–∞: {base_selector}")
                        break
                except Exception:
                    continue
            
            if not radius_container:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º +/-
                try:
                    plus_buttons = await page.query_selector_all("button:has-text('+'), .btn-plus, [class*='plus'], [data-action='increase']")
                    minus_buttons = await page.query_selector_all("button:has-text('-'), .btn-minus, [class*='minus'], [data-action='decrease']")
                    
                    if plus_buttons and minus_buttons:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–¥–∏—É—Å—É
                        target_index = 0 if location_type.lower() == 'origin' else 1
                        if target_index < len(plus_buttons) and target_index < len(minus_buttons):
                            plus_btn = plus_buttons[target_index]
                            minus_btn = minus_buttons[target_index]
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
                            parent = await plus_btn.query_selector('xpath=..')
                            if parent:
                                value_elements = await parent.query_selector_all("span, input, .value, [class*='value']")
                                for elem in value_elements:
                                    text = await elem.text_content()
                                    if text and text.strip().isdigit():
                                        current_value = int(text.strip())
                                        break
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏
                            difference = radius - current_value
                            
                            if difference > 0:
                                # –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å - –Ω–∞–∂–∏–º–∞–µ–º +
                                for _ in range(abs(difference) // 25):  # –û–±—ã—á–Ω–æ —à–∞–≥ 25
                                    await plus_btn.click()
                                    await page.wait_for_timeout(100)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                            elif difference < 0:
                                # –ù—É–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å - –Ω–∞–∂–∏–º–∞–µ–º -
                                for _ in range(abs(difference) // 25):
                                    await minus_btn.click()
                                    await page.wait_for_timeout(100)
                            
                            logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ +/-: {radius}")
                            return
                            
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ +/-: {e}")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏—â–µ–º –≤ –Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if radius_container:
                # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ + –∏ - –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                try:
                    plus_btn = await radius_container.query_selector("button:has-text('+'), .btn-plus, [class*='plus']")
                    minus_btn = await radius_container.query_selector("button:has-text('-'), .btn-minus, [class*='minus']")
                    
                    if plus_btn and minus_btn:
                        # –ò—â–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        value_elem = await radius_container.query_selector("span, input, .value, [class*='value']")
                        if value_elem:
                            text = await value_elem.text_content()
                            if text and text.strip().replace('mi', '').strip().isdigit():
                                current_value = int(text.strip().replace('mi', '').strip())
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
                        difference = radius - current_value
                        
                        if difference > 0:
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                            clicks_needed = abs(difference) // 25
                            for _ in range(clicks_needed):
                                await plus_btn.click()
                                await page.wait_for_timeout(100)
                        elif difference < 0:
                            # –£–º–µ–Ω—å—à–∞–µ–º
                            clicks_needed = abs(difference) // 25
                            for _ in range(clicks_needed):
                                await minus_btn.click()
                                await page.wait_for_timeout(100)
                        
                        logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {radius}")
                        return
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}")
            
            # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å —Å–µ–ª–µ–∫—Ç–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            select_selectors = [
                f"select[name*='{location_type}'][name*='radius']",
                f"select[id*='{location_type}'][id*='radius']",
                "select:has(option[value='25']):has(option[value='250'])"
            ]
            
            for selector in select_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=1000)
                    if element:
                        await element.select_option(value=str(radius))
                        logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç: {radius}")
                        return
                except Exception:
                    continue
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–æ–º –¥–ª—è {location_type}: {radius}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {e}")

    async def _set_date(self, page: Page, date_type: str, date_value: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑ DD.MM.YYYY –≤ MM/DD/YYYY
            formatted_date = self._format_date(date_value)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞—Ç—ã
            if 'pickup' in date_type.lower() or 'from' in date_type.lower():
                date_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Pick-Up Date)
                    "input[name*='pickup'][name*='from']",
                    "input[name*='pickup'][name*='start']",
                    "input[id*='pickup'][id*='from']",
                    "input[placeholder*='Aug 21']",
                    "input[placeholder*='pickup']",
                    "[data-testid*='pickup-from']",
                    "[data-testid*='pickup-start']",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞)
                    "form input[type='date']:first-of-type",
                    "form input[placeholder*='Aug']:first-of-type",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞—Ç
                    "input[name*='date']:first-of-type",
                    ".date-picker:first-of-type input"
                ]
            elif 'pickup' in date_type.lower() and ('to' in date_type.lower() or 'end' in date_type.lower()):
                date_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–û (Pick-Up Date To)
                    "input[name*='pickup'][name*='to']",
                    "input[name*='pickup'][name*='end']",
                    "input[id*='pickup'][id*='to']",
                    "input[placeholder*='Aug 23']",
                    "[data-testid*='pickup-to']",
                    "[data-testid*='pickup-end']",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–≤—Ç–æ—Ä–∞—è –¥–∞—Ç–∞)
                    "form input[type='date']:nth-of-type(2)",
                    "form input[placeholder*='Aug']:nth-of-type(2)"
                ]
            elif 'delivery' in date_type.lower() or 'destination' in date_type.lower():
                if 'from' in date_type.lower() or 'start' in date_type.lower():
                    date_selectors = [
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢
                        "input[name*='delivery'][name*='from']",
                        "input[name*='delivery'][name*='start']",
                        "input[id*='delivery'][id*='from']",
                        "input[placeholder*='delivery']",
                        "[data-testid*='delivery-from']",
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Ç—Ä–µ—Ç—å—è –¥–∞—Ç–∞)
                        "form input[type='date']:nth-of-type(3)"
                    ]
                else:  # delivery to
                    date_selectors = [
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û
                        "input[name*='delivery'][name*='to']",
                        "input[name*='delivery'][name*='end']",
                        "input[id*='delivery'][id*='to']",
                        "input[placeholder*='Aug 29']",
                        "[data-testid*='delivery-to']",
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç–∞—è –¥–∞—Ç–∞)
                        "form input[type='date']:nth-of-type(4)"
                    ]
            else:
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞—Ç
                date_selectors = [
                    f"input[name*='{date_type}']",
                    f"[data-testid='{date_type}']",
                    f"input[placeholder*='{date_type.replace('_', ' ').title()}']",
                    "input[type='date']",
                    "input[placeholder*='Aug']"
                ]
            
            success = False
            for selector in date_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=1500)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    if element:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
                        placeholder = await element.get_attribute('placeholder')
                        name = await element.get_attribute('name')
                        element_id = await element.get_attribute('id')
                        input_type = await element.get_attribute('type')
                        
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–∞—Ç—ã: type='{input_type}', placeholder='{placeholder}', name='{name}', id='{element_id}'")
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
                        await element.click()
                        await element.clear()
                        await page.wait_for_timeout(200)  # –ë—ã–ª–æ 500
                        
                        # –í–≤–æ–¥–∏–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
                        if input_type == 'date':
                            # –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ date –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                            iso_date = self._convert_to_iso_date(date_value)
                            await element.fill(iso_date)
                        else:
                            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º MM/DD/YYYY
                            await element.type(formatted_date)
                        
                        await page.wait_for_timeout(200)  # –ë—ã–ª–æ 500
                        await element.press("Tab")  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                        current_value = await element.input_value()
                        if current_value:
                            logger.info(f"‚úÖ –î–∞—Ç–∞ {date_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {formatted_date} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value})")
                            success = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è {date_type}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –¥–∞—Ç—ã {date_type}: {e}")
                    continue
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É {date_type}: {date_value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã {date_type}: {e}")
    
    def _format_date(self, date_str: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ MM/DD/YYYY"""
        try:
            if '.' in date_str:
                day, month, year = date_str.split('.')
                return f"{month.zfill(2)}/{day.zfill(2)}/{year}"
            elif '/' in date_str:
                return date_str  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            else:
                return date_str
        except Exception:
            return date_str
    
    def _convert_to_iso_date(self, date_str: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç ISO (YYYY-MM-DD)"""
        try:
            if '.' in date_str:
                day, month, year = date_str.split('.')
                return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
            elif '/' in date_str:
                month, day, year = date_str.split('/')
                return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
            else:
                return date_str
        except Exception:
            return date_str

    async def _execute_search_button(self, page: Page) -> None:
        """–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞...")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
            search_button_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
                "button[type='submit']",
                "input[type='submit']",
                "button:contains('Search')",
                "button:contains('Find')",
                "button:contains('Go')",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                "button:contains('–ü–æ–∏—Å–∫')",
                "button:contains('–ù–∞–π—Ç–∏')",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ ID –∏ –∫–ª–∞—Å—Å–∞–º
                "button[id*='search']",
                "button[class*='search']",
                "button[name*='search']",
                "[data-testid*='search-button']",
                ".search-button",
                "#search-button",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–µ
                "form button:last-of-type",
                "form input[type='submit']:last-of-type",
                ".btn-primary",
                ".btn-search",
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button[role='button']:last-of-type",
                ".button:last-of-type"
            ]
            
            success = False
            for selector in search_button_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=1000)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        is_visible = await element.is_visible()
                        is_enabled = await element.is_enabled()
                        
                        if is_visible and is_enabled:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                            button_text = await element.text_content()
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞: '{button_text}' (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                            
                            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                            await element.click()
                            await page.wait_for_timeout(800)  # –ë—ã–ª–æ 2000 - –∂–¥–µ–º –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
                            
                            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞, –∑–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤")
                            success = True
                            break
                        else:
                            logger.debug(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞: visible={is_visible}, enabled={is_enabled}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
                    continue
            
            if not success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–ª–µ")
                # Fallback - –Ω–∞–∂–∏–º–∞–µ–º Enter –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                try:
                    await page.keyboard.press("Enter")
                    await page.wait_for_timeout(800)  # –ë—ã–ª–æ 2000
                    logger.info("‚úÖ –ù–∞–∂–∞—Ç Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")

    async def execute_search(self, page: Page) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤...")
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            search_selectors = [
                "button[type='submit']",
                "button:has-text('Search')",
                "button:has-text('Find Loads')",
                "input[type='submit'][value*='Search']",
                "[data-testid='search-button']",
                ".search-button"
            ]
            
            search_button = None
            for selector in search_selectors:
                try:
                    search_button = await page.wait_for_selector(selector, timeout=3000)
                    if search_button and await search_button.is_visible():
                        break
                except Exception:
                    continue
            
            if search_button:
                await search_button.click()
                logger.info("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                await page.wait_for_selector(
                    ".results, .load-results, [data-testid='search-results']", 
                    timeout=15000  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
                )
                
                logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
            else:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def scan_search_results(self, page: Page) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await page.wait_for_selector(".results, .load-results, [data-testid='search-results']", timeout=8000)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            await page.wait_for_timeout(800)  # –ë—ã–ª–æ 2000
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            loads = await self.scan_loads_page(page)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(loads)} –≥—Ä—É–∑–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
            return loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    async def refresh_search_results(self, page: Page) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.reload(wait_until='networkidle')
            await page.wait_for_timeout(500)  # –ë—ã–ª–æ 1000
            
            # –ò–ª–∏ –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            refresh_selectors = [
                "button:has-text('Refresh')",
                "[data-testid='refresh-button']",
                ".refresh-button"
            ]
            
            for selector in refresh_selectors:
                try:
                    button = await page.wait_for_selector(selector, timeout=1000)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    if button:
                        await button.click()
                        await page.wait_for_load_state('networkidle')
                        return True
                except Exception:
                    continue
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def parse_load_results(self, page: Page) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π"""
        try:
            logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...")
            
            loads = []
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤
            load_elements = await page.query_selector_all(
                ".load-item, .freight-item, [data-testid='load-card'], .result-row"
            )
            
            for element in load_elements:
                try:
                    load_data = {}
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ
                    origin = await element.query_selector(".origin, .pickup-location")
                    if origin:
                        load_data['pickup_location'] = await origin.text_content()
                    
                    destination = await element.query_selector(".destination, .delivery-location")
                    if destination:
                        load_data['delivery_location'] = await destination.text_content()
                    
                    rate = await element.query_selector(".rate, .price, .pay")
                    if rate:
                        load_data['freight_rate'] = await rate.text_content()
                    
                    distance = await element.query_selector(".distance, .miles")
                    if distance:
                        load_data['total_miles'] = await distance.text_content()
                    
                    pickup_date = await element.query_selector(".pickup-date, .ready-date")
                    if pickup_date:
                        load_data['pickup_date'] = await pickup_date.text_content()
                    
                    delivery_date = await element.query_selector(".delivery-date, .due-date")
                    if delivery_date:
                        load_data['delivery_date'] = await delivery_date.text_content()
                    
                    equipment = await element.query_selector(".equipment, .trailer-type")
                    if equipment:
                        load_data['equipment_type'] = await equipment.text_content()
                    
                    weight = await element.query_selector(".weight")
                    if weight:
                        load_data['cargo_weight'] = await weight.text_content()
                    
                    if load_data:
                        loads.append(load_data)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–∑–∞: {e}")
                    continue
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(loads)}")
            return loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
