import asyncio
import time
import re
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from playwright.async_api import Page, ElementHandle

from ..utils.logger import logger
from ..utils.rate_calculator import RateCalculator
from ..utils.performance_monitor import PerformanceMonitor
from .selectors import selector_manager

class LoadParser:
    def __init__(self, config: Dict):
        self.config = config
        self.performance = PerformanceMonitor()
        
        # –£–º–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å fallback –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        self.SMART_SELECTORS = {
            'load_items': [
                "[data-testid='load-card']",
                ".load-item, .freight-row",
                "tr[data-load-id]",
                ".shipment-row",
                "[class*='load'][class*='row']",
                "tr:has(td)",
                ".freight-item"
            ],
            'load_id': [
                "[data-testid='load-id']",
                ".load-number, .reference-number",
                "[class*='load-id'], [class*='reference']",
                "td:first-child, .id-column",
                "[data-testid='reference']",
                ".load-reference"
            ],
            'pickup_location': [
                "[data-testid='pickup-location']",
                ".origin, .pickup",
                "[class*='pickup'], [class*='origin']",
                "td:nth-child(2), .pickup-column",
                ".pickup-location"
            ],
            'delivery_location': [
                "[data-testid='delivery-location']",
                ".destination, .delivery",
                "[class*='delivery'], [class*='destination']",
                "td:nth-child(3), .delivery-column",
                ".delivery-location"
            ],
            'miles': [
                "[data-testid='miles']",
                ".distance, .total-miles",
                "[class*='miles'], [class*='distance']",
                "td:nth-child(4), .miles-column",
                ".total-distance"
            ],
            'deadhead': [
                "[data-testid='deadhead']",
                ".deadhead-miles, .empty-miles",
                "[class*='deadhead'], [class*='empty']",
                "td:nth-child(5), .deadhead-column",
                ".empty-miles"
            ],
            'rate': [
                "[data-testid='rate']",
                ".rate-amount, .price",
                "[class*='rate'], [class*='price']",
                "td:nth-child(6), .rate-column",
                ".load-rate"
            ],
            'equipment': [
                "[data-testid='equipment']",
                ".trailer-type, .equipment-type",
                "[class*='equipment'], [class*='trailer']",
                "td:nth-child(7), .equipment-column",
                ".trailer-type"
            ],
            'pickup_date': [
                "[data-testid='pickup-date']",
                ".pickup-datetime, .ready-date",
                "[class*='pickup'][class*='date']",
                "td:nth-child(8), .date-column",
                ".ready-date"
            ]
        }
    
    async def set_search_filters(self, location: str, max_deadhead: int, min_miles: int) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {location}, max DH: {max_deadhead}, min miles: {min_miles}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return False
    
    async def scan_loads_page(self, page: Page) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥—Ä—É–∑–∞–º–∏"""
        try:
            start_time = time.time()
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –≥—Ä—É–∑–∞–º–∏
            load_elements = await self.find_elements_smart(page, 'load_items')
            
            if not load_elements:
                logger.warning("‚ö†Ô∏è –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return []
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(load_elements)} –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–∑–æ–≤
            tasks = []
            for element in load_elements:
                task = asyncio.create_task(self.extract_load_data(element))
                tasks.append(task)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            results = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=30
            )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            loads = []
            for result in results:
                if isinstance(result, dict) and result:
                    loads.append(result)
                elif isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞: {result}")
            
            duration = (time.time() - start_time) * 1000
            await self.performance.track_scan_performance(duration)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(loads)} –≥—Ä—É–∑–æ–≤ –∑–∞ {duration:.0f}ms")
            return loads
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    async def find_elements_smart(self, page: Page, selector_group: str) -> List[ElementHandle]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å fallback —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ SelectorManager"""
        return await selector_manager.find_elements_smart(page, selector_group)
    
    async def extract_load_data(self, load_element: ElementHandle) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"""
        try:
            load_data = {}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≥—Ä—É–∑–∞
            load_id = await self._extract_text_smart(load_element, 'load_id')
            if not load_id:
                logger.debug("‚ö†Ô∏è ID –≥—Ä—É–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
            
            load_data['id'] = load_id.strip()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            load_data['pickup'] = await self._extract_text_smart(load_element, 'pickup_location')
            load_data['delivery'] = await self._extract_text_smart(load_element, 'delivery_location')
            load_data['equipment'] = await self._extract_text_smart(load_element, 'equipment')
            load_data['pickup_date'] = await self._extract_text_smart(load_element, 'pickup_date')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            miles_text = await self._extract_text_smart(load_element, 'miles')
            load_data['miles'] = RateCalculator.parse_miles_from_text(miles_text) if miles_text else 0
            
            deadhead_text = await self._extract_text_smart(load_element, 'deadhead')
            load_data['deadhead'] = RateCalculator.parse_deadhead_from_text(deadhead_text) if deadhead_text else 0
            
            rate_text = await self._extract_text_smart(load_element, 'rate')
            load_data['rate'] = RateCalculator.parse_rate_from_text(rate_text) if rate_text else None
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
            load_data['timestamp'] = datetime.now().isoformat()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_load_data(load_data):
                logger.debug(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ {load_data.get('id')}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
            
            return load_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞: {e}")
            return None
    
    async def _extract_text_smart(self, element: ElementHandle, selector_group: str) -> Optional[str]:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å fallback —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        selectors = self.SMART_SELECTORS.get(selector_group, [])
        
        for selector in selectors:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥—Ä—É–∑–∞
                found_element = await element.query_selector(selector)
                if found_element:
                    text = await found_element.text_content()
                    if text and text.strip():
                        return text.strip()
            except Exception:
                continue
        
        return None
    
    def _validate_load_data(self, load_data: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"""
        required_fields = ['id', 'pickup', 'delivery']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if not load_data.get(field):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        miles = load_data.get('miles', 0)
        deadhead = load_data.get('deadhead', 0)
        
        if miles <= 0 or deadhead < 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if miles > 3000 or deadhead > 500:
            return False
        
        return True
    
    async def calculate_profitability(self, deadhead: int, miles: int, rate: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞"""
        return RateCalculator.calculate_minimum_rate(deadhead, miles)
    
    async def filter_profitable_loads(self, loads: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        try:
            profitable_loads = []
            criteria = self.config['search_criteria']
            
            for load in loads:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                if not self._meets_criteria(load, criteria):
                    continue
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
                analysis = RateCalculator.calculate_comprehensive_profitability(load)
                
                if analysis.is_profitable:
                    load['analysis'] = {
                        'rate_per_mile': analysis.rate_per_mile,
                        'profitability_score': analysis.profitability_score,
                        'priority': analysis.priority,
                        'total_miles': analysis.total_miles,
                        'deadhead_ratio': analysis.deadhead_ratio,
                        'profit_margin': analysis.profit_margin
                    }
                    profitable_loads.append(load)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
                    logger.log_load_found(
                        load['id'], 
                        analysis.rate_per_mile, 
                        analysis.profitability_score
                    )
            
            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–æ {len(profitable_loads)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–∑ {len(loads)}")
            return profitable_loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤: {e}")
            return []
    
    def _meets_criteria(self, load: Dict, criteria: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
        try:
            miles = load.get('miles', 0)
            deadhead = load.get('deadhead', 0)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if miles < criteria.get('min_total_miles', 200):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ deadhead
            if deadhead > criteria.get('max_deadhead_miles', 250):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            excluded_states = criteria.get('excluded_states', [])
            pickup = load.get('pickup', '').upper()
            delivery = load.get('delivery', '').upper()
            
            for state in excluded_states:
                if state in pickup or state in delivery:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return False
    
    async def get_load_details(self, load_id: str, page: Page) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞: {load_id}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞ {load_id}: {e}")
            return None
    
    async def screenshot_on_error(self, error_context: str, page: Page) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"screenshots/error_{error_context}_{timestamp}.png"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            import os
            os.makedirs("screenshots", exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            await page.screenshot(path=screenshot_path, full_page=True)
            
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            return screenshot_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return ""
    
    async def auto_discover_selectors(self, page: Page) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            discovered_selectors = {}
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö
            potential_containers = await page.query_selector_all(
                "[class*='load'], [class*='freight'], [class*='shipment'], "
                "[data-*='load'], tr, .row"
            )
            
            for container in potential_containers:
                # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                text_content = await container.text_content()
                if text_content and self._looks_like_load_data(text_content):
                    selector = await container.evaluate("""
                        el => {
                            let selector = el.tagName.toLowerCase();
                            if (el.className) {
                                selector += '.' + el.className.split(' ').join('.');
                            }
                            return selector;
                        }
                    """)
                    
                    if 'load_items' not in discovered_selectors:
                        discovered_selectors['load_items'] = []
                    discovered_selectors['load_items'].append(selector)
            
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(discovered_selectors.get('load_items', []))} –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
            return discovered_selectors
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def _looks_like_load_data(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ"""
        if not text:
            return False
        
        indicators = ['mile', 'pickup', 'delivery', 'deadhead', 'SNI-', 'LOAD-', '$']
        matches = sum(1 for indicator in indicators if indicator.lower() in text.lower())
        
        return matches >= 2

    async def navigate_to_search_page(self, page: Page) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞"""
        try:
            logger.info("üîç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await page.goto("https://freightpower.schneider.com/carrier/app/home", wait_until='networkidle', timeout=30000)
            await asyncio.sleep(2)
            
            # –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ Search
            search_selectors = [
                "a[href*='search']",
                "a:has-text('Search')",
                "[data-testid='search-link']",
                ".nav-link:has-text('Search')",
                "nav a:has-text('Search')"
            ]
            
            search_clicked = False
            for selector in search_selectors:
                try:
                    search_element = await page.wait_for_selector(selector, timeout=5000)
                    if search_element:
                        await search_element.click()
                        await page.wait_for_load_state('networkidle')
                        search_clicked = True
                        logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª Search –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        break
                except Exception:
                    continue
            
            if not search_clicked:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ URL
                try:
                    await page.goto("https://freightpower.schneider.com/carrier/app/search", wait_until='networkidle', timeout=30000)
                    logger.info("‚úÖ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞")
                    search_clicked = True
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞: {e}")
            
            return search_clicked
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞: {e}")
            return False

    def get_user_search_criteria(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–Ω—è—Ç–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π"""
        print("\n" + "="*60)
        print("üîç –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í")
        print("="*60)
        print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
        print("(–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)")
        print("="*60)
        
        criteria = {}
        
        # –¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏
        capacity_type = input("–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (Dry Van, Reefer, Flatbed, Power Only): ").strip()
        if capacity_type:
            criteria['capacity_type'] = capacity_type
        
        # –ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏
        origin_location = input("–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —à—Ç–∞—Ç): ").strip()
        if origin_location:
            criteria['origin_location'] = origin_location
        
        # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏
        origin_radius = input("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏ (25-250 –º–∏–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
        if origin_radius:
            try:
                criteria['origin_radius'] = int(origin_radius)
            except ValueError:
                criteria['origin_radius'] = 100
        
        # –ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        destination_location = input("–ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (–≥–æ—Ä–æ–¥, —à—Ç–∞—Ç –∏–ª–∏ 'Anywhere'): ").strip()
        if destination_location:
            criteria['destination_location'] = destination_location
        
        # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        destination_radius = input("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ (25-250 –º–∏–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ").strip()
        if destination_radius:
            try:
                criteria['destination_radius'] = int(destination_radius)
            except ValueError:
                criteria['destination_radius'] = 100
        
        # –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –û–¢
        pickup_date_from = input("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –û–¢ (MM/DD/YYYY): ").strip()
        if pickup_date_from:
            criteria['pickup_date_from'] = pickup_date_from
        
        # –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –î–û
        pickup_date_to = input("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –î–û (MM/DD/YYYY): ").strip()
        if pickup_date_to:
            criteria['pickup_date_to'] = pickup_date_to
        
        # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢
        delivery_date_from = input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢ (MM/DD/YYYY): ").strip()
        if delivery_date_from:
            criteria['delivery_date_from'] = delivery_date_from
        
        # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û
        delivery_date_to = input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û (MM/DD/YYYY): ").strip()
        if delivery_date_to:
            criteria['delivery_date_to'] = delivery_date_to
        
        # –í—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("="*60)
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        for key, value in criteria.items():
            display_key = {
                'capacity_type': '–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
                'origin_location': '–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏',
                'origin_radius': '–†–∞–¥–∏—É—Å –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏',
                'destination_location': '–ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏', 
                'destination_radius': '–†–∞–¥–∏—É—Å –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏',
                'pickup_date_from': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –û–¢',
                'pickup_date_to': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –î–û',
                'delivery_date_from': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢',
                'delivery_date_to': '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û'
            }.get(key, key)
            print(f"  {display_key}: {value}")
        print("="*60)
        
        return criteria

    async def setup_user_filters(self, page: Page, user_criteria: Dict) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_load_state('networkidle', timeout=30000)
            await asyncio.sleep(3)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            form_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ Schneider FreightPower
                "form[name*='search']",
                "form[id*='search']",
                "[data-testid*='search']",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
                "form:has(select):has(input)",
                "div:has(select[name*='capacity'])",
                "div:has(input[placeholder*='Origin'])",
                "div:has(input[name*='origin'])",
                "div:has(select[name*='equipment'])",
                ".search-form",
                "#search-form",
                ".search-container",
                ".filter-form",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "form",
                "main form",
                ".container form",
                ".content form",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                "*:has(select:contains('Dry Van'))",
                "*:has(input[placeholder*='City'])",
                "*:has(button:contains('Search'))",
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "[role='form']",
                "form[name='searchForm']",
                "[class*='search']",
                "[id*='search']"
            ]
            
            form_found = False
            found_selector = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
            for selector in form_selectors:
                try:
                    element = await page.query_selector(selector)
                    if element:
                        is_visible = await element.is_visible()
                        if is_visible:
                            form_found = True
                            found_selector = selector
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ (–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫): {selector}")
                            break
                except Exception:
                    continue
            
            # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
            if not form_found:
                logger.info("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ–æ—Ä–º—ã –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...")
                for selector in form_selectors:
                    try:
                        await page.wait_for_selector(selector, timeout=5000)
                        form_found = True
                        found_selector = selector
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º): {selector}")
                        break
                    except Exception:
                        continue
            
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            if not form_found:
                logger.info("üîç –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
                
                # –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–∏—Å–∫–æ–º
                search_elements = [
                    "select[name*='capacity']",
                    "select:has(option:contains('Dry Van'))",
                    "input[name*='origin']",
                    "input[placeholder*='Origin']",
                    "button:contains('Search')",
                    "select[name*='equipment']"
                ]
                
                elements_found = 0
                for selector in search_elements:
                    try:
                        element = await page.query_selector(selector)
                        if element:
                            is_visible = await element.is_visible()
                            if is_visible:
                                elements_found += 1
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞: {selector}")
                    except Exception:
                        continue
                
                if elements_found > 0:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {elements_found} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    form_found = True
                else:
                    logger.warning("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            
            if not form_found:
                logger.warning("‚ö†Ô∏è –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–µ—ë")
                await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞
            else:
                await asyncio.sleep(2)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
            if user_criteria.get('capacity_type'):
                await self._set_capacity_type(page, user_criteria['capacity_type'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏
            if user_criteria.get('origin_location'):
                await self._set_location(page, 'origin', user_criteria['origin_location'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏
            if user_criteria.get('origin_radius'):
                await self._set_radius(page, 'origin', user_criteria['origin_radius'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
            if user_criteria.get('destination_location'):
                await self._set_location(page, 'destination', user_criteria['destination_location'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
            if user_criteria.get('destination_radius'):
                await self._set_radius(page, 'destination', user_criteria['destination_radius'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –û–¢
            if user_criteria.get('pickup_date_from'):
                await self._set_date(page, 'pickup_from', user_criteria['pickup_date_from'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥—Ä—É–∑–∫–µ –î–û
            if user_criteria.get('pickup_date_to'):
                await self._set_date(page, 'pickup_to', user_criteria['pickup_date_to'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢
            if user_criteria.get('delivery_date_from'):
                await self._set_date(page, 'delivery_from', user_criteria['delivery_date_from'])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û
            if user_criteria.get('delivery_date_to'):
                await self._set_date(page, 'delivery_to', user_criteria['delivery_date_to'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await self._execute_search_button(page)
            
            logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: {e}")
            return False

    async def _set_capacity_type(self, page: Page, capacity_type: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞) —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        try:
            logger.info(f"üöõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {capacity_type}")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            await asyncio.sleep(2)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
            capacity_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Schneider FreightPower
                "select[id*='capacity']",
                "select[name*='capacity']",
                "select[data-testid*='capacity']",
                "select[class*='capacity']",
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                "select[name*='equipment']",
                "select[id*='equipment']",
                "select[class*='equipment']",
                "select[name*='trailer']",
                "select[id*='trailer']",
                "select[class*='trailer']",
                "select[name*='truck']",
                "select[name*='vehicle']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ–ø—Ü–∏–π (—Å–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ)
                "select:has(option[value*='Dry Van'])",
                "select:has(option:contains('Dry Van'))",
                "select:has(option:contains('Reefer'))",
                "select:has(option:contains('Flatbed'))",
                "select:has(option:contains('Van'))",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ placeholder –∏–ª–∏ label
                "select[placeholder*='equipment']",
                "select[placeholder*='capacity']",
                "select[aria-label*='equipment']",
                "select[aria-label*='capacity']",
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                ".capacity-type select",
                ".equipment-type select",
                ".trailer-type select",
                "[data-testid='capacity-select']",
                "[data-testid='equipment-select']",
                
                # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–ø–µ—Ä–≤—ã–π select —á–∞—Å—Ç–æ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
                "form select:first-of-type",
                "form select:nth-of-type(1)",
                ".form-group:first-of-type select",
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "select",  # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã
            ]
            
            success = False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç –±—ã—Å—Ç—Ä—ã–º –ø–æ–∏—Å–∫–æ–º
            for selector in capacity_selectors:
                try:
                    elements = await page.query_selector_all(selector)
                    for element in elements:
                        if not element:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
                        is_visible = await element.is_visible()
                        if not is_visible:
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–∞
                        options = await element.query_selector_all('option')
                        if not options:
                            continue
                            
                        option_texts = []
                        option_values = []
                        for option in options:
                            text = await option.text_content()
                            value = await option.get_attribute('value')
                            option_texts.append(text.strip() if text else "")
                            option_values.append(value.strip() if value else "")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–ø—Ü–∏—è—Ö —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                        equipment_keywords = ['dry van', 'reefer', 'flatbed', 'van', 'trailer', 'truck']
                        has_equipment = any(
                            keyword in ' '.join(option_texts).lower() 
                            for keyword in equipment_keywords
                        )
                        
                        if not has_equipment and selector != "select":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∫—Ä–æ–º–µ fallback)
                            continue
                            
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ ({selector}): {option_texts}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        success = await self._try_set_select_value(element, capacity_type, option_texts, option_values)
                        
                        if success:
                            logger.info(f"‚úÖ –¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {capacity_type}")
                            return
                        else:
                            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '{capacity_type}' –≤ —Å–µ–ª–µ–∫—Ç–µ —Å –æ–ø—Ü–∏—è–º–∏: {option_texts}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
            if not success:
                logger.info("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...")
                for selector in capacity_selectors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    try:
                        element = await page.wait_for_selector(selector, timeout=3000)
                        if element:
                            is_visible = await element.is_visible()
                            if not is_visible:
                                continue
                                
                            options = await element.query_selector_all('option')
                            option_texts = []
                            option_values = []
                            for option in options:
                                text = await option.text_content()
                                value = await option.get_attribute('value')
                                option_texts.append(text.strip() if text else "")
                                option_values.append(value.strip() if value else "")
                            
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º): {option_texts}")
                            
                            success = await self._try_set_select_value(element, capacity_type, option_texts, option_values)
                            
                            if success:
                                logger.info(f"‚úÖ –¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {capacity_type}")
                                return
                                
                    except Exception as e:
                        logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º: {e}")
                        continue
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {capacity_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {e}")
    
    async def _try_set_select_value(self, element, target_value: str, option_texts: list, option_values: list) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–ª–µ–∫—Ç–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        try:
            # –°–ø–æ—Å–æ–± 1: –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            try:
                await element.select_option(label=target_value)
                return True
            except Exception:
                pass
            
            # –°–ø–æ—Å–æ–± 2: –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
            try:
                await element.select_option(value=target_value)
                return True
            except Exception:
                pass
            
            # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –æ–ø—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
            for option_text in option_texts:
                if target_value.lower() in option_text.lower() or option_text.lower() in target_value.lower():
                    try:
                        await element.select_option(label=option_text)
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –æ–ø—Ü–∏—è: '{option_text}' –¥–ª—è '{target_value}'")
                        return True
                    except Exception:
                        continue
            
            # –°–ø–æ—Å–æ–± 4: –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–¥–ª—è "Dry Van")
            if "dry" in target_value.lower() and "van" in target_value.lower():
                for option_text in option_texts:
                    if "dry" in option_text.lower() and "van" in option_text.lower():
                        try:
                            await element.select_option(label=option_text)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–ø—Ü–∏—è Dry Van: '{option_text}'")
                            return True
                        except Exception:
                            continue
            
            # –°–ø–æ—Å–æ–± 5: –ø–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            for i, (value, text) in enumerate(zip(option_values, option_texts)):
                if (target_value.lower() in value.lower() or 
                    target_value.lower() in text.lower() or
                    any(word in text.lower() for word in target_value.lower().split())):
                    try:
                        if value:
                            await element.select_option(value=value)
                        else:
                            await element.select_option(index=i)
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–ø—Ü–∏—è –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: '{text}' (value='{value}')")
                        return True
                    except Exception:
                        continue
            
            return False
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ–ª–µ–∫—Ç: {e}")
            return False

    async def _set_location(self, page: Page, location_type: str, location: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
            if location_type.lower() == 'origin':
                location_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Origin –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    "input[name*='origin']",
                    "input[id*='origin']",
                    "input[placeholder*='Origin']",
                    "input[placeholder*='Romeoville']",
                    "[data-testid*='origin']",
                    ".origin input",
                    ".origin-location input",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Origin –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ)
                    "form input[type='text']:nth-of-type(1)",
                    "form input:first-of-type",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "input[name*='pickup']",
                    "input[placeholder*='pickup']"
                ]
            else:  # destination
                location_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Destination –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    "input[name*='destination']",
                    "input[id*='destination']",
                    "input[placeholder*='Destination']",
                    "input[placeholder*='Dayville']",
                    "[data-testid*='destination']",
                    ".destination input",
                    ".destination-location input",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Destination –æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ)
                    "form input[type='text']:nth-of-type(2)",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    "input[name*='delivery']",
                    "input[placeholder*='delivery']"
                ]
            
            success = False
            for selector in location_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                        placeholder = await element.get_attribute('placeholder')
                        name = await element.get_attribute('name')
                        element_id = await element.get_attribute('id')
                        
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ: placeholder='{placeholder}', name='{name}', id='{element_id}'")
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        await element.click()
                        await element.clear()
                        await asyncio.sleep(0.5)
                        await element.type(location)
                        await asyncio.sleep(1.5)
                        
                        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        try:
                            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                            autocomplete_selectors = [
                                ".autocomplete-option",
                                ".dropdown-item",
                                ".suggestion",
                                ".typeahead-option",
                                "[role='option']",
                                ".ui-menu-item",
                                ".location-option"
                            ]
                            
                            autocomplete_found = False
                            for ac_selector in autocomplete_selectors:
                                try:
                                    await page.wait_for_selector(ac_selector, timeout=2000)
                                    await asyncio.sleep(0.5)
                                    await page.click(f"{ac_selector}:first-child")
                                    autocomplete_found = True
                                    logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –∏–∑ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {location_type}")
                                    break
                                except Exception:
                                    continue
                            
                            if not autocomplete_found:
                                # –ï—Å–ª–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–∂–∏–º–∞–µ–º Enter
                                await element.press("Enter")
                                logger.info(f"‚úÖ –ù–∞–∂–∞—Ç Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {location_type}")
                                
                        except Exception:
                            # Fallback - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º Enter
                            await element.press("Enter")
                            logger.info(f"‚úÖ Fallback: –Ω–∞–∂–∞—Ç Enter –¥–ª—è {location_type}")
                        
                        await asyncio.sleep(1)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                        current_value = await element.input_value()
                        if current_value and (location.lower() in current_value.lower() or current_value.lower() in location.lower()):
                            logger.info(f"‚úÖ –ú–µ—Å—Ç–æ {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {location} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value})")
                            success = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è {location_type}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{location}', –ø–æ–ª—É—á–µ–Ω–æ '{current_value}'")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {location_type}: {e}")
                    continue
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ {location_type}: {location}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–∞ {location_type}: {e}")

    async def _set_radius(self, page: Page, location_type: str, radius: int) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—á–µ—Ç—á–∏–∫–æ–≤ (–∫–Ω–æ–ø–∫–∏ +/-)"""
        try:
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ {location_type} –Ω–∞ {radius} –º–∏–ª—å...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Ä–∞–¥–∏—É—Å–∞ –∫–∞–∫ —Å—á–µ—Ç—á–∏–∫ (stepper/spinner)
            success = await self._set_radius_stepper(page, location_type, radius)
            
            # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π select
            if not success:
                success = await self._set_radius_select(page, location_type, radius)
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å {radius} –¥–ª—è {location_type}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {e}")
    
    async def _set_radius_stepper(self, page: Page, location_type: str, radius: int) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ +/- (stepper/spinner)"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π —Ä–∞–¥–∏—É—Å–∞ –∏ –∫–Ω–æ–ø–æ–∫
            if location_type.lower() == 'origin':
                field_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Origin Radius –ø–æ–ª—è
                    "input[name*='origin'][name*='radius']",
                    "input[id*='origin'][id*='radius']",
                    "[data-testid*='origin-radius'] input",
                    ".origin-radius input",
                    "input[placeholder*='radius']:first-of-type",
                    "input[type='number']:first-of-type",
                    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ origin
                    "form input[type='number']:first-of-type",
                    "form input[min='25'][max='250']:first-of-type"
                ]
            else:  # destination
                field_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Destination Radius –ø–æ–ª—è
                    "input[name*='destination'][name*='radius']",
                    "input[id*='destination'][id*='radius']",
                    "[data-testid*='destination-radius'] input",
                    ".destination-radius input",
                    "input[placeholder*='radius']:nth-of-type(2)",
                    "input[type='number']:nth-of-type(2)",
                    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ - –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ destination
                    "form input[type='number']:nth-of-type(2)",
                    "form input[min='25'][max='250']:nth-of-type(2)"
                ]
            
            # –ò—â–µ–º –ø–æ–ª–µ —Ä–∞–¥–∏—É—Å–∞
            radius_field = None
            for selector in field_selectors:
                try:
                    radius_field = await page.wait_for_selector(selector, timeout=2000)
                    if radius_field:
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {selector}")
                        break
                except Exception:
                    continue
            
            if not radius_field:
                logger.debug(f"üîç –ü–æ–ª–µ —Ä–∞–¥–∏—É—Å–∞ {location_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–∫ stepper")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_value_str = await radius_field.get_attribute('value') or await radius_field.input_value()
            try:
                current_value = int(current_value_str) if current_value_str else 25  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except ValueError:
                current_value = 25
            
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {current_value}")
            
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if current_value == radius:
                logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {radius}")
                return True
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ +/- —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º
            plus_button = None
            minus_button = None
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è
            plus_selectors = [
                # –†—è–¥–æ–º —Å –ø–æ–ª–µ–º —Ä–∞–¥–∏—É—Å–∞
                f"{field_selectors[0]} + button",  # –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—è
                f"{field_selectors[0]} ~ button:contains('+')",
                f"{field_selectors[0]} ~ button[aria-label*='increase']",
                f"{field_selectors[0]} ~ button[title*='increase']",
                # –í —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                f"{field_selectors[0]} .. button:contains('+')",
                f"{field_selectors[0]} .. button[class*='plus']",
                f"{field_selectors[0]} .. button[class*='increment']",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button:contains('+'):visible",
                "button[class*='plus']:visible",
                "button[class*='increment']:visible",
                "button[aria-label*='increase']:visible"
            ]
            
            minus_selectors = [
                # –†—è–¥–æ–º —Å –ø–æ–ª–µ–º —Ä–∞–¥–∏—É—Å–∞
                f"{field_selectors[0]} + button:contains('-')",
                f"{field_selectors[0]} ~ button:contains('-')",
                f"{field_selectors[0]} ~ button[aria-label*='decrease']",
                f"{field_selectors[0]} ~ button[title*='decrease']",
                # –í —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                f"{field_selectors[0]} .. button:contains('-')",
                f"{field_selectors[0]} .. button[class*='minus']",
                f"{field_selectors[0]} .. button[class*='decrement']",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button:contains('-'):visible",
                "button[class*='minus']:visible",
                "button[class*='decrement']:visible",
                "button[aria-label*='decrease']:visible"
            ]
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É + 
            for selector in plus_selectors:
                try:
                    plus_button = await page.query_selector(selector)
                    if plus_button:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                        is_visible = await plus_button.is_visible()
                        if is_visible:
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '+' –¥–ª—è {location_type}: {selector}")
                            break
                except Exception:
                    continue
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É -
            for selector in minus_selectors:
                try:
                    minus_button = await page.query_selector(selector)
                    if minus_button:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                        is_visible = await minus_button.is_visible()
                        if is_visible:
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '-' –¥–ª—è {location_type}: {selector}")
                            break
                except Exception:
                    continue
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Ö –ø–æ DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            if not plus_button or not minus_button:
                # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è
                parent_container = await radius_field.evaluate("""
                    field => {
                        let parent = field.parentElement;
                        while (parent && parent !== document.body) {
                            const buttons = parent.querySelectorAll('button');
                            if (buttons.length >= 2) {
                                return parent;
                            }
                            parent = parent.parentElement;
                        }
                        return null;
                    }
                """)
                
                if parent_container:
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                    buttons = await parent_container.query_selector_all('button')
                    for button in buttons:
                        text = await button.text_content()
                        if '+' in text and not plus_button:
                            plus_button = button
                        elif '-' in text and not minus_button:
                            minus_button = button
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            if not plus_button:
                logger.debug(f"üîç –ö–Ω–æ–ø–∫–∞ '+' –¥–ª—è —Ä–∞–¥–∏—É—Å–∞ {location_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∞—Ç—å
            if current_value < radius:
                # –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å
                clicks_needed = radius - current_value
                button_to_use = plus_button
                action = "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
            else:
                # –ù—É–∂–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å
                clicks_needed = current_value - radius
                button_to_use = minus_button
                action = "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"
                if not minus_button:
                    logger.warning(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '-' –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ {location_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
            
            logger.info(f"üîÑ {action} —Ä–∞–¥–∏—É—Å–∞ {location_type} —Å {current_value} –¥–æ {radius} ({clicks_needed} –∫–ª–∏–∫–æ–≤)")
            
            # –ö–ª–∏–∫–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            for i in range(clicks_needed):
                try:
                    await button_to_use.click()
                    await page.wait_for_timeout(200)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤
                    if i % 5 == 4:  # –ö–∞–∂–¥—ã–µ 5 –∫–ª–∏–∫–æ–≤
                        new_value_str = await radius_field.get_attribute('value') or await radius_field.input_value()
                        try:
                            new_value = int(new_value_str) if new_value_str else current_value
                            logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {new_value} (–∫–ª–∏–∫ {i+1}/{clicks_needed})")
                            if new_value == radius:
                                logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ {location_type}: {radius}")
                                return True
                        except ValueError:
                            pass
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–µ {action}: {e}")
                    return False
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            final_value_str = await radius_field.get_attribute('value') or await radius_field.input_value()
            try:
                final_value = int(final_value_str) if final_value_str else current_value
                if final_value == radius:
                    logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ stepper: {radius}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ—Ç–æ—á–Ω–æ: {final_value} –≤–º–µ—Å—Ç–æ {radius}")
                    return False
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ {location_type}")
                return False
                
        except Exception as e:
            logger.debug(f"üîç –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ {location_type} —á–µ—Ä–µ–∑ stepper: {e}")
            return False
    
    async def _set_radius_select(self, page: Page, location_type: str, radius: int) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏—É—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π select (fallback)"""
        try:
            # –ü–æ–∏—Å–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
            if location_type.lower() == 'origin':
                radius_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Origin Radius
                    "select[name*='origin'][name*='radius']",
                    "select[id*='origin'][id*='radius']",
                    "[data-testid*='origin-radius']",
                    ".origin-radius select",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Origin radius –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π)
                    "form select[name*='radius']:first-of-type",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä–∞–¥–∏—É—Å–∞
                    "select:has(option[value='25']):has(option[value='250'])",
                    "select:has(option:contains('25mi')):has(option:contains('250mi'))"
                ]
            else:  # destination
                radius_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Destination Radius
                    "select[name*='destination'][name*='radius']",
                    "select[id*='destination'][id*='radius']", 
                    "[data-testid*='destination-radius']",
                    ".destination-radius select",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (Destination radius –æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π)
                    "form select[name*='radius']:nth-of-type(2)",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä–∞–¥–∏—É—Å–∞
                    "select:has(option[value='25']):has(option[value='250'])",
                    "select:has(option:contains('25mi')):has(option:contains('250mi'))"
                ]
            
            for selector in radius_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
                        options = await element.query_selector_all('option')
                        option_values = []
                        option_texts = []
                        for option in options:
                            value = await option.get_attribute('value')
                            text = await option.text_content()
                            option_values.append(value.strip() if value else "")
                            option_texts.append(text.strip() if text else "")
                        
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è {location_type}: values={option_values}, texts={option_texts}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        radius_str = str(radius)
                        
                        # –°–ø–æ—Å–æ–± 1: –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
                        try:
                            await element.select_option(value=radius_str)
                            logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é: {radius}")
                            return True
                        except Exception:
                            pass
                        
                        # –°–ø–æ—Å–æ–± 2: –ø–æ —Ç–µ–∫—Å—Ç—É —Å 'mi'
                        try:
                            await element.select_option(label=f"{radius}mi")
                            logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É: {radius}mi")
                            return True
                        except Exception:
                            pass
                        
                        # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –æ–ø—Ü–∏–∏
                        for i, (value, text) in enumerate(zip(option_values, option_texts)):
                            if (radius_str in value or radius_str in text or 
                                f"{radius}mi" in text or f"{radius}" in text):
                                try:
                                    if value:
                                        await element.select_option(value=value)
                                    else:
                                        await element.select_option(index=i)
                                    logger.info(f"‚úÖ –†–∞–¥–∏—É—Å {location_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–æ—Ö–æ–∂—É—é –æ–ø—Ü–∏—é: '{text}' (value='{value}')")
                                    return True
                                except Exception:
                                    continue
                        
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å {radius} –¥–ª—è {location_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏: {option_texts}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Ä–∞–¥–∏—É—Å–∞ {location_type}: {e}")
                    continue
            
            return False
                    
        except Exception as e:
            logger.debug(f"üîç –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ {location_type} —á–µ—Ä–µ–∑ select: {e}")
            return False

    async def _set_date(self, page: Page, date_type: str, date_value: str) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑ DD.MM.YYYY –≤ MM/DD/YYYY
            formatted_date = self._format_date(date_value)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞—Ç—ã
            if 'pickup' in date_type.lower() or 'from' in date_type.lower():
                date_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Pick-Up Date)
                    "input[name*='pickup'][name*='from']",
                    "input[name*='pickup'][name*='start']",
                    "input[id*='pickup'][id*='from']",
                    "input[placeholder*='Aug 21']",
                    "input[placeholder*='pickup']",
                    "[data-testid*='pickup-from']",
                    "[data-testid*='pickup-start']",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞)
                    "form input[type='date']:first-of-type",
                    "form input[placeholder*='Aug']:first-of-type",
                    # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞—Ç
                    "input[name*='date']:first-of-type",
                    ".date-picker:first-of-type input"
                ]
            elif 'pickup' in date_type.lower() and ('to' in date_type.lower() or 'end' in date_type.lower()):
                date_selectors = [
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –î–û (Pick-Up Date To)
                    "input[name*='pickup'][name*='to']",
                    "input[name*='pickup'][name*='end']",
                    "input[id*='pickup'][id*='to']",
                    "input[placeholder*='Aug 23']",
                    "[data-testid*='pickup-to']",
                    "[data-testid*='pickup-end']",
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–≤—Ç–æ—Ä–∞—è –¥–∞—Ç–∞)
                    "form input[type='date']:nth-of-type(2)",
                    "form input[placeholder*='Aug']:nth-of-type(2)"
                ]
            elif 'delivery' in date_type.lower() or 'destination' in date_type.lower():
                if 'from' in date_type.lower() or 'start' in date_type.lower():
                    date_selectors = [
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –û–¢
                        "input[name*='delivery'][name*='from']",
                        "input[name*='delivery'][name*='start']",
                        "input[id*='delivery'][id*='from']",
                        "input[placeholder*='delivery']",
                        "[data-testid*='delivery-from']",
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Ç—Ä–µ—Ç—å—è –¥–∞—Ç–∞)
                        "form input[type='date']:nth-of-type(3)"
                    ]
                else:  # delivery to
                    date_selectors = [
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –î–û
                        "input[name*='delivery'][name*='to']",
                        "input[name*='delivery'][name*='end']",
                        "input[id*='delivery'][id*='to']",
                        "input[placeholder*='Aug 29']",
                        "[data-testid*='delivery-to']",
                        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—á–µ—Ç–≤–µ—Ä—Ç–∞—è –¥–∞—Ç–∞)
                        "form input[type='date']:nth-of-type(4)"
                    ]
            else:
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞—Ç
                date_selectors = [
                    f"input[name*='{date_type}']",
                    f"[data-testid='{date_type}']",
                    f"input[placeholder*='{date_type.replace('_', ' ').title()}']",
                    "input[type='date']",
                    "input[placeholder*='Aug']"
                ]
            
            success = False
            for selector in date_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=3000)
                    if element:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
                        placeholder = await element.get_attribute('placeholder')
                        name = await element.get_attribute('name')
                        element_id = await element.get_attribute('id')
                        input_type = await element.get_attribute('type')
                        
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–∞—Ç—ã: type='{input_type}', placeholder='{placeholder}', name='{name}', id='{element_id}'")
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
                        await element.click()
                        await element.clear()
                        await asyncio.sleep(0.5)
                        
                        # –í–≤–æ–¥–∏–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
                        if input_type == 'date':
                            # –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ date –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                            iso_date = self._convert_to_iso_date(date_value)
                            await element.fill(iso_date)
                        else:
                            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º MM/DD/YYYY
                            await element.type(formatted_date)
                        
                        await asyncio.sleep(0.5)
                        await element.press("Tab")  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                        current_value = await element.input_value()
                        if current_value:
                            logger.info(f"‚úÖ –î–∞—Ç–∞ {date_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {formatted_date} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value})")
                            success = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è {date_type}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –¥–∞—Ç—ã {date_type}: {e}")
                    continue
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É {date_type}: {date_value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã {date_type}: {e}")
    
    def _format_date(self, date_str: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ MM/DD/YYYY"""
        try:
            if '.' in date_str:
                day, month, year = date_str.split('.')
                return f"{month.zfill(2)}/{day.zfill(2)}/{year}"
            elif '/' in date_str:
                return date_str  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            else:
                return date_str
        except Exception:
            return date_str
    
    def _convert_to_iso_date(self, date_str: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç ISO (YYYY-MM-DD)"""
        try:
            if '.' in date_str:
                day, month, year = date_str.split('.')
                return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
            elif '/' in date_str:
                month, day, year = date_str.split('/')
                return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
            else:
                return date_str
        except Exception:
            return date_str

    async def _execute_search_button(self, page: Page) -> None:
        """–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞...")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
            search_button_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
                "button[type='submit']",
                "input[type='submit']",
                "button:contains('Search')",
                "button:contains('Find')",
                "button:contains('Go')",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                "button:contains('–ü–æ–∏—Å–∫')",
                "button:contains('–ù–∞–π—Ç–∏')",
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ ID –∏ –∫–ª–∞—Å—Å–∞–º
                "button[id*='search']",
                "button[class*='search']",
                "button[name*='search']",
                "[data-testid*='search-button']",
                ".search-button",
                "#search-button",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–µ
                "form button:last-of-type",
                "form input[type='submit']:last-of-type",
                ".btn-primary",
                ".btn-search",
                # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button[role='button']:last-of-type",
                ".button:last-of-type"
            ]
            
            success = False
            for selector in search_button_selectors:
                try:
                    element = await page.wait_for_selector(selector, timeout=2000)
                    if element:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        is_visible = await element.is_visible()
                        is_enabled = await element.is_enabled()
                        
                        if is_visible and is_enabled:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                            button_text = await element.text_content()
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞: '{button_text}' (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                            
                            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                            await element.click()
                            await asyncio.sleep(2)  # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
                            
                            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞, –∑–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤")
                            success = True
                            break
                        else:
                            logger.debug(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞: visible={is_visible}, enabled={is_enabled}")
                            
                except Exception as e:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
                    continue
            
            if not success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–ª–µ")
                # Fallback - –Ω–∞–∂–∏–º–∞–µ–º Enter –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                try:
                    await page.keyboard.press("Enter")
                    await asyncio.sleep(2)
                    logger.info("‚úÖ –ù–∞–∂–∞—Ç Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")

    async def execute_search(self, page: Page) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤...")
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            search_selectors = [
                "button[type='submit']",
                "button:has-text('Search')",
                "button:has-text('Find Loads')",
                "input[type='submit'][value*='Search']",
                "[data-testid='search-button']",
                ".search-button"
            ]
            
            search_button = None
            for selector in search_selectors:
                try:
                    search_button = await page.wait_for_selector(selector, timeout=3000)
                    if search_button and await search_button.is_visible():
                        break
                except Exception:
                    continue
            
            if search_button:
                await search_button.click()
                logger.info("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                await page.wait_for_selector(
                    ".results, .load-results, [data-testid='search-results']", 
                    timeout=15000  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
                )
                
                logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
            else:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def scan_search_results(self, page: Page) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await page.wait_for_selector(".results, .load-results, [data-testid='search-results']", timeout=10000)
            await asyncio.sleep(2)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            loads = await self.scan_loads_page(page)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(loads)} –≥—Ä—É–∑–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
            return loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return []

    async def refresh_search_results(self, page: Page) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.reload(wait_until='networkidle')
            await asyncio.sleep(1)
            
            # –ò–ª–∏ –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            refresh_selectors = [
                "button:has-text('Refresh')",
                "[data-testid='refresh-button']",
                ".refresh-button"
            ]
            
            for selector in refresh_selectors:
                try:
                    button = await page.wait_for_selector(selector, timeout=2000)
                    if button:
                        await button.click()
                        await page.wait_for_load_state('networkidle')
                        return True
                except Exception:
                    continue
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
            return False

    async def parse_load_results(self, page: Page) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π"""
        try:
            logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...")
            
            loads = []
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤
            load_elements = await page.query_selector_all(
                ".load-item, .freight-item, [data-testid='load-card'], .result-row"
            )
            
            for element in load_elements:
                try:
                    load_data = {}
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ
                    origin = await element.query_selector(".origin, .pickup-location")
                    if origin:
                        load_data['pickup_location'] = await origin.text_content()
                    
                    destination = await element.query_selector(".destination, .delivery-location")
                    if destination:
                        load_data['delivery_location'] = await destination.text_content()
                    
                    rate = await element.query_selector(".rate, .price, .pay")
                    if rate:
                        load_data['freight_rate'] = await rate.text_content()
                    
                    distance = await element.query_selector(".distance, .miles")
                    if distance:
                        load_data['total_miles'] = await distance.text_content()
                    
                    pickup_date = await element.query_selector(".pickup-date, .ready-date")
                    if pickup_date:
                        load_data['pickup_date'] = await pickup_date.text_content()
                    
                    delivery_date = await element.query_selector(".delivery-date, .due-date")
                    if delivery_date:
                        load_data['delivery_date'] = await delivery_date.text_content()
                    
                    equipment = await element.query_selector(".equipment, .trailer-type")
                    if equipment:
                        load_data['equipment_type'] = await equipment.text_content()
                    
                    weight = await element.query_selector(".weight")
                    if weight:
                        load_data['cargo_weight'] = await weight.text_content()
                    
                    if load_data:
                        loads.append(load_data)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–∑–∞: {e}")
                    continue
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(loads)}")
            return loads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
