import asyncio
import time
from datetime import datetime
from typing import Dict, Optional
import traceback

from telegram import Bot
from telegram.error import TelegramError

from ..utils.logger import logger

class TelegramNotifier:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.bot = Bot(token=bot_token)
        self.last_notification_time = 0
        self.notification_count = 0
        self.hour_start_time = time.time()
        
    async def format_message(self, load_data: dict, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        profit_emoji = "üü¢" if analysis.get('profitability_score', 0) > 2.0 else "üü°"
        urgency_emoji = "üö®" if analysis.get('profitability_score', 0) > 2.5 else "‚ö°Ô∏è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã pickup
        pickup_date = load_data.get('pickup_date', 'N/A')
        if pickup_date and pickup_date != 'N/A':
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
                if isinstance(pickup_date, str):
                    pickup_date = pickup_date[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            except:
                pickup_date = 'N/A'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        rate = load_data.get('rate', 0)
        rate_formatted = f"${rate:,.2f}" if rate else "N/A"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate per mile
        rate_per_mile = analysis.get('rate_per_mile', 0)
        rate_per_mile_formatted = f"${rate_per_mile:.2f}" if rate_per_mile else "N/A"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ profit margin
        profit_margin = analysis.get('profit_margin', 0)
        profit_margin_formatted = f"${profit_margin:,.2f}" if profit_margin else "N/A"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority = analysis.get('priority', 'MEDIUM')
        priority_emoji = "üî¥" if priority == "HIGH" else "üü°" if priority == "MEDIUM" else "üü¢"
        
        message = f"""{urgency_emoji} NEW PROFITABLE LOAD {profit_emoji}

üì¶ **Load ID**: `{load_data.get('id', 'N/A')}`
üìç **Route**: {load_data.get('pickup', 'N/A')} ‚Üí {load_data.get('delivery', 'N/A')}
üõ£ **Total Miles**: {analysis.get('total_miles', 0):,} miles  
üöö **Deadhead**: {load_data.get('deadhead', 0)} miles ({analysis.get('deadhead_ratio', 0):.1%})
üí∞ **Rate**: {rate_formatted} ({rate_per_mile_formatted}/mile)
üíµ **Profit Margin**: {profit_margin_formatted}
‚è∞ **Pickup**: {pickup_date}
üöõ **Equipment**: {load_data.get('equipment', 'N/A')}

üìä **Profitability Score**: {analysis.get('profitability_score', 0):.2f}x
‚ö°Ô∏è **Found**: {datetime.now().strftime('%H:%M:%S')}
üéØ **Priority**: {priority_emoji} {priority}

üîó [View Load Details]({load_data.get('url', '#')})"""
        
        return message
    
    async def send_notification(self, load_data: dict, analysis: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ–º –≥—Ä—É–∑–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._check_notification_limits():
                logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
            
            message = await self.format_message(load_data, analysis)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
            for attempt in range(3):
                try:
                    await self.bot.send_message(
                        chat_id=self.chat_id,
                        text=message,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    
                    self.last_notification_time = time.time()
                    self.notification_count += 1
                    
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {load_data.get('id', 'unknown')}")
                    return True
                    
                except TelegramError as e:
                    if attempt < 2:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        await asyncio.sleep(1)
                    else:
                        raise e
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_error_alert(self, error_msg: str, screenshot_path: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"""üö® **SYSTEM ERROR ALERT**

‚ùå **Error**: {error_msg}
‚è∞ **Time**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîß **Status**: Requires attention

Please check the system immediately!"""
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if screenshot_path:
                try:
                    with open(screenshot_path, 'rb') as photo:
                        await self.bot.send_photo(
                            chat_id=self.chat_id,
                            photo=photo,
                            caption="üì∏ Error Screenshot"
                        )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def send_status_update(self, status_msg: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            message = f"""üìä **SYSTEM STATUS UPDATE**

{status_msg}

‚è∞ **Last Update**: {datetime.now().strftime('%H:%M:%S')}"""
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    async def send_daily_report(self, stats: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            loads_sent = stats.get('loads_sent', 0)
            avg_profitability = stats.get('avg_profitability', 0)
            total_miles = stats.get('total_miles', 0)
            avg_scan_time = stats.get('avg_scan_time_ms', 0)
            total_errors = stats.get('total_errors', 0)
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "üü¢" if total_errors == 0 else "üü°" if total_errors < 5 else "üî¥"
            
            message = f"""üìà **DAILY PERFORMANCE REPORT** {status_emoji}

üìÖ **Date**: {datetime.now().strftime('%Y-%m-%d')}

üì¶ **Loads Sent**: {loads_sent}
üìä **Avg Profitability**: {avg_profitability:.2f}x
üõ£ **Total Miles**: {total_miles:,}
‚ö°Ô∏è **Avg Scan Time**: {avg_scan_time:.0f}ms
‚ùå **Total Errors**: {total_errors}

üìà **Performance Summary**:
‚Ä¢ {'Excellent' if loads_sent > 10 else 'Good' if loads_sent > 5 else 'Fair'} day for loads
‚Ä¢ {'High' if avg_profitability > 2.0 else 'Medium' if avg_profitability > 1.5 else 'Low'} profitability
‚Ä¢ {'Fast' if avg_scan_time < 2000 else 'Normal' if avg_scan_time < 5000 else 'Slow'} scanning
‚Ä¢ {'Stable' if total_errors == 0 else 'Some issues' if total_errors < 5 else 'Needs attention'} system

Keep up the great work! üöÄ"""
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def send_performance_report(self, performance_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            operations = performance_data.get('operations', [])
            
            if not operations:
                message = "üìä **PERFORMANCE REPORT**: No data available"
            else:
                message = f"""üìä **PERFORMANCE REPORT** ({performance_data.get('period_hours', 24)}h)

"""
                
                for op in operations[:5]:  # –¢–æ–ø-5 –æ–ø–µ—Ä–∞—Ü–∏–π
                    operation = op['operation']
                    avg_duration = op['avg_duration_ms']
                    success_rate = op['success_rate_percent']
                    count = op['count']
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    perf_emoji = "üü¢" if avg_duration < 1000 else "üü°" if avg_duration < 5000 else "üî¥"
                    success_emoji = "üü¢" if success_rate > 95 else "üü°" if success_rate > 80 else "üî¥"
                    
                    message += f"""{perf_emoji} **{operation}**:
‚Ä¢ Duration: {avg_duration:.0f}ms
‚Ä¢ Success Rate: {success_emoji} {success_rate:.1f}%
‚Ä¢ Count: {count}

"""
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info("‚úÖ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def _check_notification_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        current_time = time.time()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        if current_time - self.hour_start_time > 3600:
            self.notification_count = 0
            self.hour_start_time = current_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if current_time - self.last_notification_time < 5:  # 5 —Å–µ–∫—É–Ω–¥
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å
        if self.notification_count >= 50:
            return False
        
        return True
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram"""
        try:
            await self.bot.get_me()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False
