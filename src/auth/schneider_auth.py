import asyncio
import json
import os
import time
import random
from typing import Optional, Dict, List
from playwright.async_api import Page, Browser, BrowserContext, TimeoutError as PlaywrightTimeoutError
import pickle

from ..utils.logger import logger
from ..utils.performance_monitor import PerformanceMonitor

class SchneiderAuth:
    def __init__(self, config: Dict):
        self.config = config
        self.login_url = config['schneider']['login_url']
        self.email = config['schneider']['email']
        self.password = config['schneider']['password']
        self.user_agents = config['schneider']['user_agents']
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
        self.session_cookies_file = "data/session_cookies.pkl"
        self.is_authenticated = False
        self.last_session_check = 0
        self.session_check_interval = 30 * 60  # 30 –º–∏–Ω—É—Ç
        self.performance = PerformanceMonitor()
        
    async def initialize_browser(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                
                # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                await self.close()
                
                from playwright.async_api import async_playwright
                
                self.playwright = await async_playwright().start()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                browser_args = self.config['browser']['extra_args'].copy()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                additional_args = [
                    '--disable-blink-features=AutomationControlled',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-ipc-flooding-protection',
                    '--disable-renderer-backgrounding',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-background-timer-throttling',
                    '--force-color-profile=srgb',
                    '--metrics-recording-only',
                    '--disable-background-networking',
                    '--disable-default-apps',
                    '--disable-extensions',
                    '--no-first-run',
                    '--no-default-browser-check',
                    '--disable-logging',
                    '--disable-gpu-logging',
                    '--silent'
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                for arg in additional_args:
                    if arg not in browser_args:
                        browser_args.append(arg)
                
                self.browser = await self.playwright.chromium.launch(
                    headless=self.config['browser']['headless'],
                    args=browser_args,
                    slow_mo=100  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                self.context = await self.browser.new_context(
                    viewport={
                        'width': self.config['browser']['viewport_width'],
                        'height': self.config['browser']['viewport_height']
                    },
                    user_agent=self.rotate_user_agent(),
                    ignore_https_errors=True,
                    java_script_enabled=not self.config['browser'].get('disable_javascript', False),
                    accept_downloads=False,
                    bypass_csp=True,
                    locale='en-US',
                    timezone_id='America/New_York'
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.page = await self.context.new_page()
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    await self.performance.optimize_browser_settings(self.page)
                except Exception as perf_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {perf_error}")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
                timeout_ms = self.config['browser']['timeout_seconds'] * 1000
                self.page.set_default_timeout(timeout_ms)
                self.page.set_default_navigation_timeout(timeout_ms)
                
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                if self.config['browser'].get('disable_images', True):
                    await self.page.route('**/*.{png,jpg,jpeg,gif,webp,svg,ico}', lambda route: route.abort())
                    await self.page.route('**/*.{css}', lambda route: route.abort())
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                await self.page.goto('data:text/html,<html><body>Test</body></html>')
                
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                try:
                    await self.close()
                except:
                    pass
                
                if attempt < max_attempts - 1:
                    await asyncio.sleep(5 * (attempt + 1))
                    continue
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return False
    
    def rotate_user_agent(self) -> str:
        """–†–æ—Ç–∞—Ü–∏—è User-Agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        return random.choice(self.user_agents)
    
    async def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ Schneider —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                start_time = time.time()
                logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt + 1}/{max_attempts}...")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
                if not self.page or not self.browser:
                    logger.warning("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
                    if not await self.initialize_browser():
                        raise Exception("Failed to initialize browser")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
                if attempt == 0 and await self.load_session_cookies():
                    logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
                    if await self.check_session():
                        logger.info("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        await self.performance.log_performance_metrics(
                            "session_restore", (time.time() - start_time) * 1000, True
                        )
                        return True
                    else:
                        logger.info("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                        await self.context.clear_cookies()  # –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ cookies
                
                # –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                logger.info("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if not await self._navigate_to_login_with_retry():
                    raise Exception("Failed to navigate to login page")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Cloudflare –µ—Å–ª–∏ –µ—Å—Ç—å
                if await self.handle_cloudflare_challenge():
                    logger.info("‚úÖ Cloudflare challenge –ø—Ä–æ–π–¥–µ–Ω")
                
                # –ü–æ–∏—Å–∫ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥–∞
                if not await self._fill_login_fields_with_retry():
                    raise Exception("Failed to fill login fields")
                
                # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
                if not await self._submit_login_with_retry():
                    raise Exception("Failed to submit login form")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(3)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if await self._check_2fa_required():
                    logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    if not await self.handle_2fa():
                        logger.error("‚ùå 2FA –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                        if attempt < max_attempts - 1:
                            continue
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
                if await self._verify_login_success():
                    self.is_authenticated = True
                    await self.save_session_cookies()
                    
                    duration = (time.time() - start_time) * 1000
                    await self.performance.log_performance_metrics("login", duration, True)
                    
                    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∑–∞ {duration:.0f}ms")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(5 * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                    
            except PlaywrightTimeoutError as e:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(10 * (attempt + 1))
                    continue
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                await self.performance.log_performance_metrics("login", 0, False, str(e))
                if attempt < max_attempts - 1:
                    await asyncio.sleep(5 * (attempt + 1))
                    continue
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return False
    
    async def _navigate_to_login_with_retry(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                await self.page.goto(self.login_url, wait_until='networkidle', timeout=30000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                await self.page.wait_for_load_state('domcontentloaded')
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(2)
                
                logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(5)
                    continue
        
        return False

    async def _fill_login_fields_with_retry(self) -> bool:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                logger.info(f"üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
                await self.page.wait_for_load_state('domcontentloaded')
                await asyncio.sleep(2)
                
                # –ü–æ–∏—Å–∫ –ø–æ–ª—è email —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                email_selectors = [
                    'input[type="email"]',
                    'input[name="email"]',
                    'input[name="username"]',
                    'input[name="login"]',
                    'input[id*="email"]',
                    'input[id*="username"]',
                    'input[placeholder*="email" i]',
                    'input[placeholder*="Email" i]',
                    'input[placeholder*="username" i]',
                    '#email',
                    '#username',
                    '.email-input',
                    '.username-input'
                ]
                
                email_field = None
                for selector in email_selectors:
                    try:
                        email_field = await self.page.wait_for_selector(selector, timeout=3000)
                        if email_field and await email_field.is_visible():
                            logger.debug(f"üìß –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: {selector}")
                            break
                    except:
                        continue
                
                if email_field:
                    await email_field.fill('')  # Clear field
                    await email_field.fill(self.email)
                    logger.info("‚úÖ Email –∑–∞–ø–æ–ª–Ω–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    if attempt < max_attempts - 1:
                        continue
                    return False
                
                # –ü–æ–∏—Å–∫ –ø–æ–ª—è password —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                password_selectors = [
                    'input[type="password"]',
                    'input[name="password"]',
                    'input[name="passwd"]',
                    'input[id*="password"]',
                    'input[id*="passwd"]',
                    'input[placeholder*="password" i]',
                    'input[placeholder*="Password" i]',
                    '#password',
                    '#passwd',
                    '.password-input'
                ]
                
                password_field = None
                for selector in password_selectors:
                    try:
                        password_field = await self.page.wait_for_selector(selector, timeout=3000)
                        if password_field and await password_field.is_visible():
                            logger.debug(f"üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: {selector}")
                            break
                    except:
                        continue
                
                if password_field:
                    await password_field.fill('')  # Clear field
                    await password_field.fill(self.password)
                    logger.info("‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    if attempt < max_attempts - 1:
                        continue
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(3)
                    continue
        
        return False

    async def _fill_login_fields(self) -> None:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥–∞ (legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self._fill_login_fields_with_retry()
    
    async def _submit_login_with_retry(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫
                submit_selectors = [
                    'button[type="submit"]',
                    'input[type="submit"]',
                    'button:has-text("Sign In")',
                    'button:has-text("Login")',
                    'button:has-text("Log In")',
                    'button:has-text("–í–æ–π—Ç–∏")',
                    'button:has-text("Submit")',
                    '[data-testid="login-button"]',
                    '[data-testid="submit-button"]',
                    '.login-button',
                    '.submit-button',
                    '#login-button',
                    '#submit-button',
                    'form button',
                    'form input[type="submit"]'
                ]
                
                submit_button = None
                for selector in submit_selectors:
                    try:
                        submit_button = await self.page.wait_for_selector(selector, timeout=3000)
                        if submit_button and await submit_button.is_visible() and await submit_button.is_enabled():
                            logger.debug(f"üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {selector}")
                            break
                    except:
                        continue
                
                if submit_button:
                    # –°–∫—Ä–æ–ª–ª –∫ –∫–Ω–æ–ø–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    await submit_button.scroll_into_view_if_needed()
                    await asyncio.sleep(1)
                    
                    # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
                    await submit_button.click()
                    logger.info("‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
                    return True
                else:
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
                    password_field = await self.page.query_selector('input[type="password"]')
                    if password_field:
                        await password_field.focus()
                        await self.page.keyboard.press('Enter')
                        logger.info("‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Enter")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –∏ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        if attempt < max_attempts - 1:
                            await asyncio.sleep(2)
                            continue
                        return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(3)
                    continue
        
        return False

    async def _submit_login(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ (legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self._submit_login_with_retry()
    
    async def _check_2fa_required(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ 2FA"""
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2FA (Send Code –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –ø–æ–ª–µ –¥–ª—è –∫–æ–¥–∞)
            twofa_selectors = [
                # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
                'button:has-text("Send Code")',
                'button:has-text("Call Me")',
                # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                'input[placeholder*="code" i]',
                'input[placeholder*="Code" i]',
                'input[name*="code"]',
                'input[id*="code"]',
                '[data-testid="2fa-input"]',
                '.two-factor-input',
                # –¢–µ–∫—Å—Ç, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ 2FA
                'text="Welcome Carriers!"',
                'text="Click Send Code or Call Me"'
            ]
            
            for selector in twofa_selectors:
                try:
                    element = await self.page.wait_for_selector(selector, timeout=3000)
                    if element:
                        logger.info("üîê 2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                        return True
                except:
                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                page_content = await self.page.content()
                if ("Welcome Carriers!" in page_content and 
                    "Send Code" in page_content and 
                    "Number on File" in page_content):
                    logger.info("üîê 2FA —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                    return True
            except:
                pass
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA: {e}")
            return False
    
    async def handle_2fa(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ 2FA: Send Code -> Enter Code -> Verify"""
        max_attempts = 3
        
        try:
            logger.info("üîê –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É 2FA...")
            
            # –≠—Ç–∞–ø 1: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Send Code"
            logger.info("üì± –≠—Ç–∞–ø 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω")
            if not await self._send_2fa_code():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ 2FA")
                return False
            
            # –≠—Ç–∞–ø 2: –û–∂–∏–¥–∞–Ω–∏–µ –∏ –≤–≤–æ–¥ –∫–æ–¥–∞
            logger.info("üì± –≠—Ç–∞–ø 2: –í–≤–æ–¥ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            for attempt in range(max_attempts):
                try:
                    print(f"\nüîê 2FA Code Required (Attempt {attempt + 1}/{max_attempts})")
                    print("üì± SMS –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (XXX-XXX-5898)")
                    print("üì± –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:")
                    
                    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å timeout
                    code = await asyncio.wait_for(
                        asyncio.to_thread(input, "2FA Code: "),
                        timeout=180  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–≤–æ–¥ (—É—á–∏—Ç—ã–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫—É SMS)
                    )
                    
                    if len(code) >= 4 and code.isdigit():  # SMS –∫–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å 4-8 —Ü–∏—Ñ—Ä
                        # –ü–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                        code_selectors = [
                            'input[placeholder*="code" i]',
                            'input[placeholder*="verification" i]',
                            'input[name*="code"]',
                            'input[id*="code"]',
                            'input[type="text"]',
                            'input[type="number"]',
                            '[data-testid="2fa-input"]'
                        ]
                        
                        code_field = None
                        for selector in code_selectors:
                            try:
                                code_field = await self.page.wait_for_selector(selector, timeout=5000)
                                if code_field and await code_field.is_visible():
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {selector}")
                                    break
                            except:
                                continue
                        
                        if code_field:
                            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –∏ –≤–≤–æ–¥ –∫–æ–¥–∞
                            await code_field.clear()
                            await code_field.fill(code)
                            logger.info(f"‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω: {code}")
                            
                            # –≠—Ç–∞–ø 3: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Verify Code"
                            logger.info("üì± –≠—Ç–∞–ø 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞")
                            if await self._verify_2fa_code():
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                                await asyncio.sleep(5)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                                
                                if await self._verify_login_success():
                                    logger.info("‚úÖ 2FA –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                                    return True
                                else:
                                    logger.warning("‚ö†Ô∏è 2FA –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –≤—Ö–æ–¥ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                            else:
                                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Verify Code")
                        else:
                            logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            await self.page.screenshot(path="screenshots/2fa_error.png")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ —Ü–∏—Ñ—Ä (4-8 —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                except asyncio.TimeoutError:
                    logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞")
                    return False
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ 2FA (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(3)
                        continue
            
            logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ 2FA: {e}")
            return False
    
    async def _send_2fa_code(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"""
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Send Code"
            send_code_selectors = [
                'button:has-text("Send Code")',
                'input[value="Send Code"]',
                'button[type="submit"]:has-text("Send")',
                'a:has-text("Send Code")'
            ]
            
            send_button = None
            for selector in send_code_selectors:
                try:
                    send_button = await self.page.wait_for_selector(selector, timeout=5000)
                    if send_button and await send_button.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Send Code: {selector}")
                        break
                except:
                    continue
            
            if send_button:
                logger.info("üì± –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Send Code...")
                await send_button.click()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await asyncio.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                await asyncio.sleep(2)
                page_content = await self.page.content()
                
                if "Enter your verification code" in page_content or "Verify Code" in page_content:
                    logger.info("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å")
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await self.page.screenshot(path="screenshots/after_send_code.png")
                    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
            else:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ Send Code –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                await self.page.screenshot(path="screenshots/send_code_not_found.png")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 2FA –∫–æ–¥–∞: {e}")
            return False
    
    async def _verify_2fa_code(self) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA –∫–æ–¥–∞"""
        try:
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Verify Code"
            verify_selectors = [
                'button:has-text("Verify Code")',
                'input[value="Verify Code"]',
                'button:has-text("Verify")',
                'button:has-text("Submit")',
                'button[type="submit"]'
            ]
            
            verify_button = None
            for selector in verify_selectors:
                try:
                    verify_button = await self.page.wait_for_selector(selector, timeout=5000)
                    if verify_button and await verify_button.is_visible():
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Verify Code: {selector}")
                        break
                except:
                    continue
            
            if verify_button:
                logger.info("‚úÖ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Verify Code...")
                await verify_button.click()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await asyncio.sleep(3)
                return True
            else:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Verify Code –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter")
                await self.page.keyboard.press('Enter')
                await asyncio.sleep(3)
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA –∫–æ–¥–∞: {e}")
            return False
    
    async def handle_cloudflare_challenge(self) -> bool:
        """–û–±—Ö–æ–¥ Cloudflare challenge"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Cloudflare
            cloudflare_selectors = [
                '#challenge-form',
                '.cf-browser-verification',
                '#cf-please-wait',
                'iframe[src*="cloudflare"]'
            ]
            
            for selector in cloudflare_selectors:
                try:
                    element = await self.page.wait_for_selector(selector, timeout=5000)
                    if element:
                        logger.info("üõ°Ô∏è Cloudflare challenge detected, waiting...")
                        
                        # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è challenge
                        await asyncio.sleep(5)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        try:
                            await self.page.wait_for_selector('body:not(.cf-browser-verification)', timeout=30000)
                        except:
                            pass
                        
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Cloudflare: {e}")
            return False
    
    async def _verify_login_success(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
            error_selectors = [
                '.error-message',
                '.alert-error',
                '.login-error',
                '[data-testid="error"]',
                '.invalid-credentials',
                'div:has-text("Invalid")',
                'div:has-text("Error")',
                'div:has-text("incorrect")',
                'div:has-text("failed")'
            ]
            
            for selector in error_selectors:
                try:
                    error_element = await self.page.wait_for_selector(selector, timeout=2000)
                    if error_element and await error_element.is_visible():
                        error_text = await error_element.text_content()
                        logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_text}")
                        return False
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            current_url = self.page.url
            success_url_patterns = [
                'dashboard',
                'home',
                'main',
                'loads',
                'freight',
                'freightpower.schneider.com/loads',
                'freightpower.schneider.com/dashboard',
                '/app/',
                '/portal/'
            ]
            
            for pattern in success_url_patterns:
                if pattern in current_url.lower():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ URL: {current_url}")
                    return True
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
            success_selectors = [
                '[data-testid="dashboard"]',
                '[data-testid="user-menu"]',
                '.dashboard',
                '.main-content',
                '.user-menu',
                '.logout-button',
                '.user-profile',
                '.navigation',
                '.nav-menu',
                'a[href*="logout"]',
                'a[href*="signout"]',
                'button:has-text("Logout")',
                'button:has-text("Sign Out")',
                'button:has-text("–í—ã–π—Ç–∏")',
                '.header-user',
                '.user-dropdown',
                '#user-menu',
                '#logout'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            for selector in success_selectors:
                try:
                    element = await self.page.wait_for_selector(selector, timeout=3000)
                    if element and await element.is_visible():
                        logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω: {selector}")
                        return True
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π –≤—Ö–æ–¥–∞ (–∑–Ω–∞—á–∏—Ç –º—ã —É–∂–µ –≤–æ—à–ª–∏)
            login_selectors = [
                'input[type="password"]',
                'input[name="password"]',
                'button:has-text("Sign In")',
                'button:has-text("Login")'
            ]
            
            login_elements_found = False
            for selector in login_selectors:
                try:
                    element = await self.page.wait_for_selector(selector, timeout=2000)
                    if element and await element.is_visible():
                        login_elements_found = True
                        break
                except:
                    continue
            
            if not login_elements_found:
                logger.info("‚úÖ –ü–æ–ª—è –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–µ—Ä–æ—è—Ç–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = await self.page.title()
            if title and 'login' not in title.lower() and 'sign in' not in title.lower():
                logger.info(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {title}")
                return True
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    async def check_session(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ
            if current_time - self.last_session_check < 60:  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                return self.is_authenticated
            
            self.last_session_check = current_time
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self.page.goto(self.login_url, wait_until='networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if await self._verify_login_success():
                self.is_authenticated = True
                return True
            else:
                self.is_authenticated = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            self.is_authenticated = False
            return False
    
    async def refresh_session(self) -> bool:
        """–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
            self.is_authenticated = False
            
            # –û—á–∏—Å—Ç–∫–∞ cookies
            await self.context.clear_cookies()
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            return await self.login()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def save_session_cookies(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            os.makedirs(os.path.dirname(self.session_cookies_file), exist_ok=True)
            
            cookies = await self.context.cookies()
            
            with open(self.session_cookies_file, 'wb') as f:
                pickle.dump(cookies, f)
            
            logger.debug("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def load_session_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if not os.path.exists(self.session_cookies_file):
                return False
            
            with open(self.session_cookies_file, 'rb') as f:
                cookies = pickle.load(f)
            
            await self.context.add_cookies(cookies)
            
            logger.debug("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def get_page(self) -> Optional[Page]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return self.page
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Playwright"""
        try:
            if self.page:
                await self.page.close()
                self.page = None
            
            if self.context:
                await self.context.close()
                self.context = None
                
            if self.browser:
                await self.browser.close()
                self.browser = None
                
            if hasattr(self, 'playwright') and self.playwright:
                await self.playwright.stop()
                self.playwright = None
                
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏ Playwright –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def is_authenticated_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.is_authenticated:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
        current_time = time.time()
        if current_time - self.last_session_check > self.session_check_interval:
            return await self.check_session()
        
        return self.is_authenticated
