// FreightPower Load Monitor - Background Service Worker

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
let monitoringState = {
  isActive: false,
  tabId: null,
  sessionId: null,
  lastCheck: null,
  totalLoadsFound: 0,
  profitableLoads: 0
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_SETTINGS = {
  minRatePerMile: 2.50,
  maxDeadhead: 50,
  minDistance: 200,
  maxDistance: null, // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  equipmentTypes: ['Dry Van', 'Reefer', 'Flatbed'],
  regions: [],
  soundAlerts: true,
  notificationFrequency: 'all', // all, high_priority, none
  scanInterval: 3000 // 3 —Å–µ–∫—É–Ω–¥—ã
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onStartup.addListener(async () => {
  await initializeExtension();
});

chrome.runtime.onInstalled.addListener(async (details) => {
  await initializeExtension();
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
  if (chrome.contextMenus) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ–Ω—é
      await chrome.contextMenus.removeAll();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
      chrome.contextMenus.create({
        id: "toggle-monitoring",
        title: "Toggle FreightPower Monitoring",
        contexts: ["page"],
        documentUrlPatterns: ["https://freightpower.schneider.com/*"]
      }, () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if (chrome.runtime.lastError) {
          console.error('Error creating context menu:', chrome.runtime.lastError);
        } else {
          console.log('Context menu created successfully');
        }
      });
    } catch (error) {
      console.error('Error with context menus:', error);
    }
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function initializeExtension() {
  try {
    const result = await chrome.storage.sync.get(['settings', 'statistics']);
    
    if (!result.settings) {
      await chrome.storage.sync.set({ settings: DEFAULT_SETTINGS });
    }
    
    if (!result.statistics) {
      await chrome.storage.sync.set({ 
        statistics: {
          totalScans: 0,
          loadsFound: 0,
          profitableLoads: 0,
          lastActive: null,
          sessionsCount: 0
        }
      });
    }
    
    console.log('FreightPower Monitor initialized');
  } catch (error) {
    console.error('Error initializing extension:', error);
  }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–æ–∫
chrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {
  if (changeInfo.status === 'complete' && tab.url && 
      tab.url.includes('freightpower.schneider.com')) {
    
    console.log('FreightPower tab detected:', tab.url);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ content script –∑–∞–≥—Ä—É–∂–µ–Ω
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ content script
      const [result] = await chrome.scripting.executeScript({
        target: { tabId: tabId },
        func: () => {
          return typeof window.freightDiag !== 'undefined';
        }
      });
      
      if (!result.result) {
        console.log('Content script not loaded, injecting...');
        // –ò–Ω–∂–µ–∫—Ç–∏–º content script –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        await chrome.scripting.executeScript({
          target: { tabId: tabId },
          files: ['content.js']
        });
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tabId –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      monitoringState.tabId = tabId;
      monitoringState.sessionId = generateSessionId();
      
      console.log('Content script ready on tab:', tabId);
      
    } catch (error) {
      console.error('Error checking/injecting content script:', error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content script
chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
  try {
    switch (message.type) {
      case 'LOGIN_DETECTED':
        await handleLoginDetected(sender.tab.id);
        sendResponse({ success: true });
        break;
        
      case 'LOGOUT_DETECTED':
        await handleLogoutDetected();
        sendResponse({ success: true });
        break;
        
      case 'LOAD_FOUND':
        await handleLoadFound(message.data);
        sendResponse({ success: true });
        break;
        
      case 'MONITORING_STATUS':
        sendResponse({
          success: true,
          isActive: monitoringState.isActive,
          isLoggedIn: monitoringState.isLoggedIn,
          tabId: monitoringState.tabId,
          sessionId: monitoringState.sessionId,
          totalLoadsFound: monitoringState.totalLoadsFound,
          profitableLoads: monitoringState.profitableLoads
        });
        break;
        
      case 'UPDATE_STATISTICS':
        await updateStatistics(message.data);
        sendResponse({ success: true });
        break;
        
      case 'GET_SETTINGS':
        const settings = await getSettings();
        sendResponse({ success: true, settings });
        break;
        
      default:
        console.log('Unknown message type:', message.type);
        sendResponse({ success: false, error: 'Unknown message type' });
    }
  } catch (error) {
    console.error('Error handling message:', error);
    sendResponse({ success: false, error: error.message });
  }
  
  return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleLoginDetected(tabId) {
  console.log('Login detected, starting monitoring...');
  
  monitoringState.isActive = true;
  monitoringState.tabId = tabId;
  monitoringState.lastCheck = Date.now();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  await updateExtensionIcon('active');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  try {
    await chrome.tabs.sendMessage(tabId, {
      type: 'START_MONITORING',
      settings: await getSettings()
    });
  } catch (error) {
    console.error('Error starting monitoring:', error);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  await updateStatistics({ sessionsCount: 1 });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function handleLogoutDetected() {
  console.log('Logout detected, stopping monitoring...');
  
  monitoringState.isActive = false;
  monitoringState.tabId = null;
  
  await updateExtensionIcon('inactive');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
async function handleLoadFound(loadData) {
  console.log('Load found:', loadData);
  
  monitoringState.totalLoadsFound++;
  
  if (loadData.isProfitable) {
    monitoringState.profitableLoads++;
    
    const settings = await getSettings();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (settings.notificationFrequency !== 'none' && 
        (settings.notificationFrequency === 'all' || loadData.priority === 'HIGH')) {
      
      await showNotification(loadData);
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–ª—è HIGH priority –≥—Ä—É–∑–æ–≤
    if (settings.soundAlerts && loadData.priority === 'HIGH') {
      await playAlertSound();
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  await updateStatistics({
    totalScans: 1,
    loadsFound: 1,
    profitableLoads: loadData.isProfitable ? 1 : 0,
    lastActive: Date.now()
  });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function showNotification(loadData) {
  const notificationId = `load-${loadData.id}-${Date.now()}`;
  
  await chrome.notifications.create(notificationId, {
    type: 'basic',
    iconUrl: 'icons/icon48.png',
    title: `üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã–π –≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω! (${loadData.priority})`,
    message: `${loadData.pickup} ‚Üí ${loadData.delivery}\n` +
             `$${loadData.ratePerMile.toFixed(2)}/–º–∏–ª—è | ${loadData.miles} –º–∏–ª—å | DH: ${loadData.deadhead}`,
    priority: loadData.priority === 'HIGH' ? 2 : 1,
    requireInteraction: loadData.priority === 'HIGH'
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è MEDIUM priority
  if (loadData.priority !== 'HIGH') {
    setTimeout(() => {
      chrome.notifications.clear(notificationId);
    }, 10000);
  }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
async function playAlertSound() {
  if (monitoringState.tabId) {
    try {
      await chrome.tabs.sendMessage(monitoringState.tabId, {
        type: 'PLAY_SOUND'
      });
    } catch (error) {
      console.error('Error playing sound:', error);
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
async function updateExtensionIcon(status) {
  const iconPath = status === 'active' ? 'icon-active' : 'icon';
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∫–æ–Ω–∫–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
    await chrome.action.setIcon({
      path: {
        16: `icons/icon16.png`,
        32: `icons/icon32.png`,
        48: `icons/icon48.png`,
        128: `icons/icon128.png`
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –Ω–∞ –±—ç–π–¥–∂–µ
    if (status === 'active') {
      await chrome.action.setBadgeText({
        text: monitoringState.profitableLoads > 0 ? 
              monitoringState.profitableLoads.toString() : ''
      });
      
      await chrome.action.setBadgeBackgroundColor({
        color: '#4CAF50'
      });
    } else {
      await chrome.action.setBadgeText({ text: '' });
    }
    
  } catch (error) {
    console.error('Error updating icon:', error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function getSettings() {
  try {
    const result = await chrome.storage.sync.get('settings');
    return result.settings || DEFAULT_SETTINGS;
  } catch (error) {
    console.error('Error getting settings:', error);
    return DEFAULT_SETTINGS;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function updateStatistics(data) {
  try {
    const result = await chrome.storage.sync.get('statistics');
    const stats = result.statistics || {};
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    Object.keys(data).forEach(key => {
      if (typeof data[key] === 'number' && key !== 'lastActive') {
        stats[key] = (stats[key] || 0) + data[key];
      } else {
        stats[key] = data[key];
      }
    });
    
    await chrome.storage.sync.set({ statistics: stats });
  } catch (error) {
    console.error('Error updating statistics:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
function generateSessionId() {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
if (chrome.contextMenus) {
  chrome.contextMenus.onClicked.addListener(async (info, tab) => {
    if (info.menuItemId === "toggle-monitoring" && tab && tab.id) {
      try {
        if (monitoringState.isActive) {
          await chrome.tabs.sendMessage(tab.id, { type: 'STOP_MONITORING' });
          monitoringState.isActive = false;
          await updateExtensionIcon('inactive');
        } else {
          await chrome.tabs.sendMessage(tab.id, { 
            type: 'START_MONITORING',
            settings: await getSettings()
          });
          monitoringState.isActive = true;
          monitoringState.tabId = tab.id;
          await updateExtensionIcon('active');
        }
      } catch (error) {
        console.error('Error toggling monitoring:', error);
      }
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
chrome.tabs.onRemoved.addListener((tabId) => {
  if (tabId === monitoringState.tabId) {
    monitoringState.isActive = false;
    monitoringState.tabId = null;
    updateExtensionIcon('inactive');
  }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
setInterval(async () => {
  if (monitoringState.isActive && monitoringState.tabId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await chrome.tabs.get(monitoringState.tabId);
    } catch (error) {
      // –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
      monitoringState.isActive = false;
      monitoringState.tabId = null;
      await updateExtensionIcon('inactive');
    }
  }
}, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

console.log('FreightPower Load Monitor background script loaded');
