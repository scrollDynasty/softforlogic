// FreightPower Load Monitor - Content Script

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è FreightPower –∏ LOTHIAN)
const SELECTORS = {
  load_items: [
    'ion-card.card-content-load-web'
  ],
  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
  load_id: [
    '[data-testid="reference"]',
    '[class*="reference-number"]',
    '[class*="load-number"]',
    '[class*="load-id"]',
    '.reference',
    '.load-reference, .id-column',
    'td:first-child',
    '[class*="id"]',
    '[class*="reference"]',
    // LOTHIAN: ID –æ–±—ã—á–Ω–æ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    'td:nth-child(1)',
    'div:nth-child(1)',
    '[class*="col"]:first-child'
  ],
  capacity_type: [
    '[class*="capacity-type"]',
    '[class*="equipment-type"]',
    '[class*="type"]'
  ],
  pickup_location: [
    '.origin_city',
    '[class*="origin"]',
    '[class*="pickup"]',
    '[data-testid="pickup-location"]',
    '.origin, .pickup, .pickup-location',
    'td:nth-child(2)',
    // LOTHIAN: –õ–æ–∫–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    'td:nth-child(3)',
    'td:nth-child(4)',
    '[class*="col"]:nth-child(3)',
    '[class*="col"]:nth-child(4)'
  ],
  delivery_location: [
    '.origin_city:nth-of-type(2)',
    '[class*="destination"]',
    '[class*="delivery"]',
    '[data-testid="delivery-location"]',
    '.destination, .delivery, .delivery-location',
    'td:nth-child(3)',
    // LOTHIAN: Destination –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ pickup
    'td:nth-child(4)',
    'td:nth-child(5)',
    '[class*="col"]:nth-child(4)',
    '[class*="col"]:nth-child(5)'
  ],
  pickup_date: [
    '[class*="pickup-date"]',
    '[class*="origin-date"]',
    '[class*="start-date"]'
  ],
  delivery_date: [
    '[class*="delivery-date"]',
    '[class*="destination-date"]',
    '[class*="end-date"]'
  ],
  miles: [
    '.card-distance[data-testid="card-distance"]',
    '[data-testid="card-distance"]',
    '.card-distance',
    '[class*="miles"]',
    '[class*="distance"]',
    '[data-testid="miles"]',
    '.distance, .total-miles, .miles-column',
    'td:nth-child(4)',
    // LOTHIAN: –ú–∏–ª–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    'td:nth-child(2)',
    'td:nth-child(3)',
    '[class*="col"]:nth-child(2)',
    '[class*="col"]:nth-child(3)'
  ],
  deadhead: [
    '.origin_dateTime.load_header_elements.stop-appointment',
    '[class*="deadhead"]',
    '[class*="empty-miles"]',
    '[data-testid="deadhead"]',
    '.deadhead, .empty-miles',
    'td:nth-child(5)'
  ],
  rate: [
    '.rate-amount',
    '[class*="rate"]',
    '[class*="price"]',
    '[class*="pay"]',
    '[data-testid="rate"]',
    '.rate, .price, .pay, .freight-rate',
    'td:nth-child(6)',
    // LOTHIAN: –°—Ç–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    'td:nth-child(2)',
    'td:nth-child(3)',
    '[class*="col"]:nth-child(2)',
    '[class*="col"]:nth-child(3)',
    // Ionic —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
    'p.card-price',
    '.card-price',
    'ion-label[class*="price"]',
    'ion-text[class*="price"]'
  ],
  radius: [
    '[class*="radius"]',
    'select[class*="radius"]',
    'input[type="range"]'
  ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let monitoringState = {
  isActive: false,
  isLoggedIn: false,
  scanInterval: null,
  settings: {
    minRatePerMile: 2.5,
    maxDeadhead: 50,
    scanInterval: 3000,
    soundAlerts: true
  }, // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  foundLoads: new Map(), // –ö–µ—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  lastScanTime: 0,
  scanCount: 0,
  adaptiveInterval: 3000,
  pendingScan: false, // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  scanTimeout: null, // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  watchdogInterval: null // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è watchdog
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(function initialize() {
  console.log('üöÄ FreightPower Load Monitor content script –∑–∞–≥—Ä—É–∂–µ–Ω');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
function getCardRoot(el) {
  if (!el) return null;
  return el.matches && el.matches('ion-card.card-content-load-web')
    ? el
    : el.closest && el.closest('ion-card.card-content-load-web');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function hasMinimalData(load) {
  if (!load) return false;
  return (
    (load.pickup && load.pickup !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') ||
    (load.delivery && load.delivery !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') ||
    (load.rate && load.rate > 0) ||
    (load.miles && load.miles > 0)
  );
}
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–∞–π—Ç–∞
  const siteType = detectSiteType();
  console.log(`üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–∞–π—Ç–∞: ${siteType} (URL: ${window.location.href})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  checkLoginStatus();
  
  // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç background script
  chrome.runtime.onMessage.addListener(handleMessage);
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  setInterval(() => {
    checkLoginStatus();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (monitoringState.isLoggedIn && !monitoringState.isActive) {
      console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
      startAutomaticMonitoring();
    }
  }, 5000);
  
  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
  observePageChanges();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  window.addEventListener('popstate', () => {
    setTimeout(() => checkLoginStatus(true), 1000);
  });
  
  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è SPA)
  const originalPushState = history.pushState;
  const originalReplaceState = history.replaceState;
  
  history.pushState = function() {
    originalPushState.apply(history, arguments);
    setTimeout(() => checkLoginStatus(true), 1000);
  };
  
  history.replaceState = function() {
    originalReplaceState.apply(history, arguments);
    setTimeout(() => checkLoginStatus(true), 1000);
  };
  
  // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(() => {
    if (monitoringState.isLoggedIn && !monitoringState.isActive) {
      console.log('‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ...');
      startAutomaticMonitoring();
    }
  }, 3000);
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  window.freightAuthCheck = function() {
    console.log('üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    const result = detectLogin();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    return result;
  };
  
  window.freightForceReauth = function() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    forceReCheckAuth();
  };
})();

// –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function detectLogin() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
  const isOnFreightPower = window.location.href.includes('freightpower.schneider.com');
  const currentUrl = window.location.href.toLowerCase();
  
  // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ö–æ–¥–∞
  const loginPagePatterns = ['/login', '/signin', '/auth', '/authenticate', '/sign-in'];
  const isOnLoginPage = loginPagePatterns.some(pattern => currentUrl.includes(pattern));
  
  if (!isOnFreightPower) {
    return false;
  }
  
  // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ - —Ç–æ—á–Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (isOnLoginPage) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—Ö–æ–¥–∞
  const titleIndicatesLogin = document.title.toLowerCase().includes('login') ||
                             document.title.toLowerCase().includes('sign in') ||
                             document.title.toLowerCase().includes('authenticate') ||
                             document.title.toLowerCase().includes('access denied');
  
  if (titleIndicatesLogin) {
    return false;
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Storage –∏ cookies (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
  const authStorageKeys = [
    'userToken', 'authToken', 'auth', 'accessToken', 'jwt',
    'session', 'user', 'userData', 'schneider_auth', 
    'freightpower_auth', 'auth_token', 'bearer_token',
    'access_token', 'refresh_token', 'authorization'
  ];
  
  const hasAuthStorage = authStorageKeys.some(key => {
    const localValue = localStorage.getItem(key);
    const sessionValue = sessionStorage.getItem(key);
    return (localValue && localValue !== 'null' && localValue !== 'undefined') ||
           (sessionValue && sessionValue !== 'null' && sessionValue !== 'undefined');
  });
  
  // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cookies
  const authCookiePatterns = [
    'auth', 'session', 'token', 'jwt', 'bearer',
    'schneider', 'freightpower', 'user', 'access'
  ];
  
  const hasAuthCookie = authCookiePatterns.some(pattern => {
    const cookies = document.cookie.toLowerCase();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cookie –Ω–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    const regex = new RegExp(`${pattern}[^=]*=([^;]+)`);
    const match = cookies.match(regex);
    return match && match[1] && match[1].trim() !== '' && match[1] !== 'null';
  });
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã/–∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Å—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
  if (hasAuthStorage || hasAuthCookie) {
    console.log('üîë –ù–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { hasAuthStorage, hasAuthCookie });
    return true;
  }
  
  // –í–¢–û–†–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const strongAuthIndicators = [
    // –°–∏–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    document.querySelector('[data-user-authenticated="true"]'),
    document.querySelector('[data-user-id]'),
    document.querySelector('.user-avatar'),
    document.querySelector('.profile-dropdown'),
    document.querySelector('[class*="user-profile"]'),
    document.querySelector('[class*="account-menu"]'),
    document.querySelector('.logout'),
    document.querySelector('[href*="logout"]'),
    document.querySelector('[onclick*="logout"]'),
    document.querySelector('.user-menu'),
    document.querySelector('.header-user')
  ];
  
  const hasStrongAuthElement = strongAuthIndicators.some(el => el !== null);
  
  if (hasStrongAuthElement) {
    console.log('üë§ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return true;
  }
  
  // –¢–†–ï–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º –≤—Ö–æ–¥–∞
  const loginFormElements = [
    document.querySelector('input[name="password"]'),
    document.querySelector('input[type="password"]'),
    document.querySelector('.login-form'),
    document.querySelector('form[action*="login"]'),
    document.querySelector('form[action*="signin"]'),
    document.querySelector('[class*="signin-form"]'),
    document.querySelector('[class*="login-container"]')
  ];
  
  const hasLoginForm = loginFormElements.some(el => el !== null);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appIndicators = [
    document.querySelector('.search-results'),
    document.querySelector('[class*="search-container"]'),
    document.querySelector('[class*="load-list"]'),
    document.querySelector('[class*="freight-list"]'),
    document.querySelector('main[class*="app"]'),
    document.querySelector('[role="main"]'),
    document.querySelector('#app[class*="authenticated"]'),
    document.querySelector('.content[class*="main"]')
  ];
  
  const hasAppElements = appIndicators.some(el => el !== null);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ù–ï–¢ —Ñ–æ—Ä–º –≤—Ö–æ–¥–∞
  const isLoggedIn = hasAppElements && !hasLoginForm && !titleIndicatesLogin;
  
  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
    url: window.location.href,
    title: document.title,
    isOnFreightPower,
    isOnLoginPage,
    titleIndicatesLogin,
    hasAuthStorage,
    hasAuthCookie,
    hasStrongAuthElement,
    hasLoginForm,
    hasAppElements,
    finalResult: isLoggedIn
  });
  
  return isLoggedIn;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkLoginStatus(force = false) {
  const wasLoggedIn = monitoringState.isLoggedIn;
  const newLoginStatus = detectLogin();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  monitoringState.isLoggedIn = newLoginStatus;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (force) {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      previous: wasLoggedIn,
      current: newLoginStatus,
      changed: wasLoggedIn !== newLoginStatus
    });
  }
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
  if (wasLoggedIn !== monitoringState.isLoggedIn) {
    if (monitoringState.isLoggedIn) {
      console.log('‚úÖ User logged in to FreightPower');
      safeSendMessage({ 
        type: 'LOGIN_DETECTED',
        url: window.location.href
      }).catch(error => {
        console.error('Error sending login message:', error);
      });
    } else {
      console.log('üîí User logged out from FreightPower');
      safeSendMessage({ type: 'LOGOUT_DETECTED' }).catch(error => {
        console.error('Error sending logout message:', error);
      });
      stopMonitoring();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function forceReCheckAuth() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  checkLoginStatus(true);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  setTimeout(() => {
    console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫...');
    checkLoginStatus(true);
  }, 2000);
  
  setTimeout(() => {
    console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...');
    checkLoginStatus(true);
  }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
function handleMessage(message, sender, sendResponse) {
  console.log('Received message:', message.type);
  
  switch (message.type) {
    case 'START_MONITORING':
      if (!monitoringState.isActive && monitoringState.isLoggedIn) {
        startMonitoring(message.settings);
        sendResponse({ success: true });
      } else {
        sendResponse({ 
          success: false, 
          reason: monitoringState.isLoggedIn ? 'Already monitoring' : 'Not logged in' 
        });
      }
      break;
      
    case 'STOP_MONITORING':
      stopMonitoring();
      sendResponse({ success: true });
      break;
      
    case 'GET_STATUS':
      sendResponse({
        isActive: monitoringState.isActive,
        isLoggedIn: monitoringState.isLoggedIn,
        scanCount: monitoringState.scanCount,
        foundLoads: monitoringState.foundLoads.size
      });
      break;
      
    case 'PLAY_SOUND':
      playAlertSound();
      sendResponse({ success: true });
      break;
      
    case 'FORCE_RECHECK_AUTH':
      forceReCheckAuth();
      sendResponse({ 
        success: true, 
        currentStatus: monitoringState.isLoggedIn 
      });
      break;
      
    case 'FORCE_SCAN':
      if (monitoringState.isActive) {
        scanForLoads();
        sendResponse({ success: true });
      } else {
        sendResponse({ success: false, reason: 'Monitoring not active' });
      }
      break;
      
    case 'UPDATE_SETTINGS':
      if (message.settings) {
        console.log('Updating monitoring settings:', message.settings);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!monitoringState.settings) {
          monitoringState.settings = {
            minRatePerMile: 2.5,
            maxDeadhead: 50,
            scanInterval: 3000,
            soundAlerts: true
          };
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        monitoringState.settings = {
          ...monitoringState.settings,
          ...message.settings
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (message.settings.scanInterval && message.settings.scanInterval !== monitoringState.adaptiveInterval) {
          monitoringState.adaptiveInterval = message.settings.scanInterval;
        }
        
        // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (monitoringState.isActive) {
          restartMonitoring(message.settings);
        }
        
        sendResponse({ success: true });
      } else {
        sendResponse({ success: false, reason: 'No settings provided' });
      }
      break;
      
    default:
      console.warn('Unknown message type:', message.type);
      sendResponse({ success: false, reason: 'Unknown message type' });
  }
  
  return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function startMonitoring(settings) {
  if (monitoringState.isActive) {
    console.log('Monitoring already active');
    return;
  }
  
  if (!monitoringState.isLoggedIn) {
    console.log('Cannot start monitoring: not logged in');
    return;
  }
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (!monitoringState.settings) {
    monitoringState.settings = {
      minRatePerMile: 2.5,
      maxDeadhead: 50,
      scanInterval: 3000,
      soundAlerts: true
    };
  }
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
  if (settings) {
    monitoringState.settings = {
      ...monitoringState.settings,
      ...settings
    };
  }
  
  monitoringState.isActive = true;
  monitoringState.scanCount = 0;
  monitoringState.foundLoads.clear();
  monitoringState.lastScanTime = Date.now();
  monitoringState.pendingScan = false;
  
  console.log('Starting automatic load monitoring with settings:', monitoringState.settings);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É
  scheduleNextScan(0);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  showMonitoringIndicator();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watchdog –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  startMonitoringWatchdog();
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function stopMonitoring() {
  if (!monitoringState.isActive) {
    return;
  }
  
  monitoringState.isActive = false;
  monitoringState.pendingScan = false;
  
  if (monitoringState.scanInterval) {
    clearInterval(monitoringState.scanInterval);
    monitoringState.scanInterval = null;
  }
  
  if (monitoringState.scanTimeout) {
    clearTimeout(monitoringState.scanTimeout);
    monitoringState.scanTimeout = null;
  }
  
  if (monitoringState.watchdogInterval) {
    clearInterval(monitoringState.watchdogInterval);
    monitoringState.watchdogInterval = null;
  }
  
  hideMonitoringIndicator();
  
  console.log('Load monitoring stopped');
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function scheduleNextScan(delay) {
  if (!monitoringState.isActive) return;
  
  if (monitoringState.scanTimeout) {
    clearTimeout(monitoringState.scanTimeout);
  }
  
  const actualDelay = delay || monitoringState.adaptiveInterval;
  
  monitoringState.scanTimeout = setTimeout(() => {
    if (monitoringState.isActive && monitoringState.isLoggedIn && !monitoringState.pendingScan) {
      performScan();
    }
  }, actualDelay);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
function performScan() {
  if (!monitoringState.isActive || !monitoringState.isLoggedIn || monitoringState.pendingScan) {
    return;
  }
  
  monitoringState.pendingScan = true;
  monitoringState.lastScanTime = Date.now();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
  const scanTimeout = setTimeout(() => {
    if (monitoringState.pendingScan) {
      console.warn('Scan timeout, resetting pending state');
      monitoringState.pendingScan = false;
      scheduleNextScan();
    }
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  
  try {
    scanForLoads();
  } catch (error) {
    console.error('Error during scan:', error);
  } finally {
    clearTimeout(scanTimeout);
    monitoringState.pendingScan = false;
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (monitoringState.isActive) {
      scheduleNextScan();
    }
  }
}

// Watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function startMonitoringWatchdog() {
  if (monitoringState.watchdogInterval) {
    clearInterval(monitoringState.watchdogInterval);
  }
  
  monitoringState.watchdogInterval = setInterval(() => {
    if (!monitoringState.isActive) return;
    
    const now = Date.now();
    const timeSinceLastScan = now - monitoringState.lastScanTime;
    const maxIdleTime = monitoringState.adaptiveInterval * 3; // 3 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–∞–∫—Å–∏–º—É–º
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å–ª–æ –ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (timeSinceLastScan > maxIdleTime) {
      console.warn('Monitoring appears to be stuck, restarting...');
      restartMonitoring();
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!monitoringState.isLoggedIn) {
      console.log('User is no longer logged in, stopping monitoring');
      stopMonitoring();
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.hidden || !document.hasFocus()) {
      console.log('Page is hidden or not focused, reducing scan frequency');
      monitoringState.adaptiveInterval = Math.min(monitoringState.adaptiveInterval * 1.5, 15000);
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
      const normalInterval = (monitoringState.settings && monitoringState.settings.scanInterval) || 3000;
      if (monitoringState.adaptiveInterval > normalInterval) {
        monitoringState.adaptiveInterval = Math.max(monitoringState.adaptiveInterval * 0.8, normalInterval);
      }
    }
    
  }, 15000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function restartMonitoring(newSettings) {
  if (monitoringState.isActive) {
    const settings = newSettings || monitoringState.settings;
    console.log('Restarting monitoring with settings:', settings);
    
    stopMonitoring();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    setTimeout(() => {
      if (monitoringState.isLoggedIn) {
        startMonitoring(settings);
      }
    }, 2000);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function scanForLoads() {
  if (!monitoringState.isActive || !monitoringState.isLoggedIn) {
    return;
  }
  
  const startTime = Date.now();
  monitoringState.scanCount++;
  
  console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤... (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ${monitoringState.scanCount})`);
  
  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    cleanupFoundLoadsCache();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (!isOnLoadSearchPage()) {
      console.log('üìç –ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...');
      navigateToLoadSearchPage();
      return;
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫–∞–Ω–∞
    const siteType = detectSiteType();
    console.log('Site type:', siteType);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Ö
    const rawNodes = Array.from(document.querySelectorAll(SELECTORS.load_items[0]));
    // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º:
    const normalized = rawNodes
      .map(getCardRoot)
      .filter(Boolean);

    // –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Å–∞–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    const loadElements = Array.from(new Set(normalized));
    
    if (loadElements.length === 0) {
      console.log('‚ùå –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫...');
      attemptRefreshSearch();
      adjustScanInterval('no_loads');
      return;
    }
    
    console.log(`Found ${loadElements.length} load elements`);
    
    let newLoadsFound = 0;
    let profitableLoadsFound = 0;
    const batchSize = 10; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < loadElements.length; i += batchSize) {
      const batch = loadElements.slice(i, i + batchSize);
      
      batch.forEach((element, batchIndex) => {
        try {
          console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + batchIndex + 1}/${loadElements.length}`);
          const load = parseLoadElement(element);
          
          if (!loadData) {
            console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${i + batchIndex + 1} –≤–µ—Ä–Ω—É–ª null –¥–∞–Ω–Ω—ã–µ`);
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ ID)
          const hasBasicData = (
            (loadData.pickup && loadData.pickup !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') ||
            (loadData.delivery && loadData.delivery !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') ||
            (loadData.rate && loadData.rate > 0) ||
            (loadData.miles && loadData.miles > 0)
          );
          
          if (!hasBasicData) {
            // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return;
          }
          
          if (!load.id) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–∑–∞
            if (load.pickup && load.delivery && 
                load.pickup !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' && load.delivery !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
              console.log(`üîß –≠–ª–µ–º–µ–Ω—Ç ${i + batchIndex + 1} –±–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ ID, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
            } else if (hasBasicData) {
              console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${i + batchIndex + 1} –±–µ–∑ ID –Ω–æ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:`, {
                pickup: load.pickup,
                delivery: load.delivery,
                rate: load.rate,
                miles: load.miles
              });
            }
          }
          
          if (load && load.id && !monitoringState.foundLoads.has(load.id)) {
            // –ù–æ–≤—ã–π –≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω
            monitoringState.foundLoads.set(load.id, {
              ...load,
              foundAt: Date.now(),
              scanNumber: monitoringState.scanCount
            });
            
            newLoadsFound++;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
            const profitability = calculateProfitability(load);
            
            if (profitability.isProfitable && passesFilters(load, profitability)) {
              profitableLoadsFound++;
              
              const enrichedLoadData = {
                ...load,
                ...profitability,
                priority: calculatePriority(load, profitability),
                foundAt: Date.now()
              };
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ background script –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
              safeSendMessage({
                type: 'LOAD_FOUND',
                data: enrichedLoadData
              }).catch(error => {
                console.error('Error sending load data:', error);
              });
              
              console.log('üí∞ Profitable load found:', enrichedLoadData);
            }
          }
          
        } catch (parseError) {
          console.error(`Error parsing load element ${i + batchIndex}:`, {
            error: parseError.message || parseError,
            stack: parseError.stack,
            element: element ? {
              tagName: element.tagName,
              className: element.className,
              id: element.id,
              textContent: element.textContent?.substring(0, 100) + '...'
            } : 'element is null'
          });
        }
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
      if (i + batchSize < loadElements.length) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        setTimeout(() => {}, 0);
      }
    }
    
    const endTime = Date.now();
    const scanDuration = endTime - startTime;
    
    console.log(`Scan completed: ${newLoadsFound} new loads, ${profitableLoadsFound} profitable (${scanDuration}ms)`);
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (profitableLoadsFound > 0) {
      adjustScanInterval('profitable_found');
    } else if (newLoadsFound > 0) {
      adjustScanInterval('loads_found');
    } else {
      adjustScanInterval('no_new_loads');
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (scanDuration > 5000) {
      console.warn(`Slow scan detected: ${scanDuration}ms`);
      adjustScanInterval('slow_scan');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    safeSendMessage({
      type: 'UPDATE_STATISTICS',
      data: {
        totalScans: 1,
        loadsFound: newLoadsFound,
        profitableLoads: profitableLoadsFound,
        lastActive: Date.now()
      }
    }).catch(error => {
      console.debug('Stats update failed:', error.message);
    });
    
  } catch (error) {
    console.error('Error during load scanning:', error);
    adjustScanInterval('error');
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
function cleanupFoundLoadsCache() {
  if (monitoringState.foundLoads.size <= 100) {
    return; // –ö–µ—à –µ—â–µ –Ω–µ–±–æ–ª—å–æ–π
  }
  
  const now = Date.now();
  const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  const maxSize = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
  
  const entries = Array.from(monitoringState.foundLoads.entries());
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
  const freshEntries = entries.filter(([id, load]) => {
    return (now - load.foundAt) < maxAge;
  });
  
  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
  if (freshEntries.length > maxSize) {
    freshEntries.sort((a, b) => b[1].foundAt - a[1].foundAt);
    freshEntries.splice(maxSize);
  }
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º Map —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  monitoringState.foundLoads.clear();
  freshEntries.forEach(([id, load]) => {
    monitoringState.foundLoads.set(id, load);
  });
  
  console.log(`Cache cleaned: ${entries.length} -> ${freshEntries.length} entries`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
function isOnLoadSearchPage() {
  const url = window.location.href;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
  const validPaths = [
    '/search',
    '/loads',
    '/freight',
    '/board',
    '/loadboard'
  ];
  
  const isValidPath = validPaths.some(path => url.includes(path));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
  const searchIndicators = [
    document.querySelector('[class*="search"]'),
    document.querySelector('[class*="load"]'),
    document.querySelector('[class*="freight"]'),
    document.querySelector('input[type="submit"], button[type="submit"]'),
    document.querySelector('[class*="filter"]'),
    document.querySelector('[class*="result"]')
  ];
  
  const hasSearchElements = searchIndicators.some(el => el !== null);
  
  return isValidPath || hasSearchElements;
}

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
function navigateToLoadSearchPage() {
  console.log('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤...');
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤
  const searchLinks = [
    'a[href*="search"]',
    'a[href*="loads"]',
    'a[href*="freight"]',
    'a[href*="board"]',
    '[class*="search"] a',
    '[class*="load"] a',
    '[class*="freight"] a'
  ];
  
  for (const selector of searchLinks) {
    const link = document.querySelector(selector);
    if (link) {
      console.log(`üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫: ${selector}`);
      link.click();
      return;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ø—Ä—è–º–æ–º—É URL
  const baseUrl = window.location.origin;
  const searchPaths = [
    '/search',
    '/loads',
    '/freight-board',
    '/loadboard'
  ];
  
  for (const path of searchPaths) {
    try {
      window.location.href = baseUrl + path;
      return;
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ ${path}:`, error);
    }
  }
}

// –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫
function attemptRefreshSearch() {
  console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫...');
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const searchButtons = [
    'button[type="submit"]',
    'input[type="submit"]',
    '[class*="search"][class*="button"]',
    '[class*="search-btn"]',
    '[class*="refresh"]',
    '[class*="reload"]',
    'button:contains("Search")',
    'button:contains("–ü–æ–∏—Å–∫")',
    'button:contains("–ù–∞–π—Ç–∏")'
  ];
  
  for (const selector of searchButtons) {
    try {
      const button = document.querySelector(selector);
      if (button && !button.disabled) {
        console.log(`üîç –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞: ${selector}`);
        button.click();
        return true;
      }
    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ${selector}:`, error);
    }
  }
  
  // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º—É
  const searchForms = document.querySelectorAll('form');
  for (const form of searchForms) {
    try {
      const formText = form.textContent.toLowerCase();
      if (formText.includes('search') || formText.includes('–ø–æ–∏—Å–∫') || formText.includes('load')) {
        console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞');
        form.submit();
        return true;
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
    }
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  window.location.reload();
  return false;
}

// –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function findLoadElements() {
  console.log('üîç Searching for load elements...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
  const searchContainers = [
    '.search-results',
    '[class*="search-result"]',
    '[class*="result-container"]',
    '[class*="load-list"]',
    '[class*="freight-list"]',
    'main [class*="container"]',
    '[role="main"]',
    '#app main',
    '.content-area'
  ];
  
  let container = document.body;
  for (const selector of searchContainers) {
    const found = document.querySelector(selector);
    if (found) {
      container = found;
      console.log(`üì¶ Found search container: ${selector}`);
      break;
    }
  }
  
  // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–∑–æ–≤
  for (const selector of SELECTORS.load_items) {
    const elements = container.querySelectorAll(selector);
    if (elements.length > 0) {
      console.log(`‚úÖ Found ${elements.length} load elements using selector: ${selector}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤
      const validElements = Array.from(elements).filter(el => {
        // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã Origin –∏–ª–∏ Destination
        const text = el.textContent || '';
        const hasLocation = text.includes('Origin') || text.includes('Destination') || 
                          text.includes(', ') || // –ì–æ—Ä–æ–¥–∞ –æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                          /[A-Z]{2}\s*\d{5}/.test(text); // ZIP –∫–æ–¥—ã
        
        // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º (–Ω–µ –ø—É—Å—Ç—ã–º)
        const hasContent = el.childElementCount > 0 || text.length > 20;
        
        return hasLocation && hasContent;
      });
      
      if (validElements.length > 0) {
        console.log(`‚úÖ Validated ${validElements.length} load elements`);
        return validElements;
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  console.log('‚ö†Ô∏è No elements found with selectors, trying heuristic search...');
  
  const allElements = container.querySelectorAll('div, article, section, tr');
  const potentialLoads = Array.from(allElements).filter(el => {
    const text = el.textContent || '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasOrigin = text.includes('Origin') || /\b[A-Z][a-z]+(?:ville|ton|burg|city|town)\b/.test(text);
    const hasDestination = text.includes('Destination') || text.split(',').length > 2;
    const hasState = /\b[A-Z]{2}\b/.test(text);
    const hasMiles = /\b\d+\s*mi/i.test(text) || text.includes('miles');
    const hasDate = /\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}/i.test(text);
    
    // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≥—Ä—É–∑–∞
    const score = [hasOrigin, hasDestination, hasState, hasMiles, hasDate].filter(Boolean).length;
    
    return score >= 2 && el.childElementCount > 2;
  });
  
  if (potentialLoads.length > 0) {
    console.log(`üîç Found ${potentialLoads.length} potential load elements through heuristic search`);
    return potentialLoads;
  }
  
  console.log('‚ùå No load elements found on page');
  return [];
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
function detectSiteType() {
  const url = window.location.href.toLowerCase();
  const hostname = window.location.hostname.toLowerCase();
  
  if (hostname.includes('lothian') || url.includes('lothian')) {
    return 'lothian';
  }
  if (hostname.includes('freightpower') || url.includes('freightpower')) {
    return 'freightpower';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Ionic –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  const ionicIndicators = [
    document.querySelector('ion-app'),
    document.querySelector('ion-content'),
    document.querySelector('ion-grid'),
    document.querySelector('ion-row'),
    document.querySelector('ion-col'),
    document.querySelector('[class*="ionic"]'),
    window.Ionic !== undefined
  ];
  
  const isIonic = ionicIndicators.some(indicator => !!indicator);
  if (isIonic) {
    console.log('üî∑ Detected Ionic application');
    return 'ionic';
  }
  
  return 'unknown';
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è LOTHIAN —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
function parseLothianCard(element) {
  console.log('üöõ –ü–∞—Ä—Å–∏–Ω–≥ LOTHIAN –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏...', element);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  if (!element || !element.textContent) {
    console.error('‚ùå Invalid Lothian element');
    return null;
  }
  
  const loadData = {
    id: null,
    capacityType: 'Power Only', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è LOTHIAN
    pickup: null,
    delivery: null,
    pickupDate: null,
    deliveryDate: null,
    miles: 0,
    deadhead: 0,
    rate: 0,
    weight: null,
    originRadius: null,
    destinationRadius: null,
    element: element
  };
  
  try {
    // 1. ID - —Å–µ–ª–µ–∫—Ç–æ—Ä .card_p-elements.loadno_card
    const idElement = element.querySelector('.card_p-elements.loadno_card');
    if (idElement) {
      const idText = idElement.textContent.trim();
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
      const idMatch = idText.match(/\b(\d{8,12})\b/);
      if (idMatch) {
        loadData.id = idMatch[1];
        console.log('üÜî ID –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä:', loadData.id);
      }
    }
    
    // 2. –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - —Å–µ–ª–µ–∫—Ç–æ—Ä .capacity-type.capacity-type-font
    const typeElement = element.querySelector('.capacity-type.capacity-type-font');
    if (typeElement) {
      loadData.capacityType = typeElement.textContent.trim() || 'Power Only';
      console.log('üöö –¢–∏–ø –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä:', loadData.capacityType);
    }
    
    // 3. –ú–∏–ª–∏ - —Å–µ–ª–µ–∫—Ç–æ—Ä .card-distance[data-testid="card-distance"]
    const milesElement = element.querySelector('.card-distance[data-testid="card-distance"]');
    if (milesElement) {
      const milesText = milesElement.textContent.trim();
      const milesMatch = milesText.match(/(\d+)\s*mi(?:les?)?/i);
      if (milesMatch) {
        loadData.miles = parseInt(milesMatch[1]);
        console.log('üìè –ú–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä:', loadData.miles);
      }
    }
    
    // 4. –í–µ—Å - —Å–µ–ª–µ–∫—Ç–æ—Ä .card_p-elements.card-lbs
    const weightElement = element.querySelector('.card_p-elements.card-lbs');
    if (weightElement) {
      const weightText = weightElement.textContent.trim();
      const weightMatch = weightText.match(/(\d{1,3}(?:,\d{3})*)\s*lbs/i);
      if (weightMatch) {
        loadData.weight = parseInt(weightMatch[1].replace(/,/g, ''));
        console.log('‚öñÔ∏è –í–µ—Å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä:', loadData.weight, 'lbs');
      }
    }
    
    // 5. –õ–æ–∫–∞—Ü–∏–∏ - —Å–µ–ª–µ–∫—Ç–æ—Ä .origin_city (–ø–µ—Ä–≤—ã–π - –æ—Ç–∫—É–¥–∞, –≤—Ç–æ—Ä–æ–π - –∫—É–¥–∞)
    const locationElements = element.querySelectorAll('.origin_city');
    if (locationElements.length >= 2) {
      loadData.pickup = locationElements[0].textContent.trim();
      loadData.delivery = locationElements[1].textContent.trim();
      console.log('üìç –õ–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:', {
        pickup: loadData.pickup,
        delivery: loadData.delivery
      });
    } else if (locationElements.length === 1) {
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ pickup
      loadData.pickup = locationElements[0].textContent.trim();
      console.log('üìç –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ª–æ–∫–∞—Ü–∏—è:', loadData.pickup);
    }
    
    // 6. Deadhead - –∏—â–µ–º –≤ p.origin_dateTime, –≥–¥–µ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "Deadhead"
    const dateTimeElements = element.querySelectorAll('p.origin_dateTime');
    for (const elem of dateTimeElements) {
      const text = elem.textContent || '';
      if (text.includes('Deadhead')) {
        const deadheadMatch = text.match(/Deadhead\s+(\d+)\s*mi/i);
        if (deadheadMatch) {
          loadData.deadhead = parseInt(deadheadMatch[1]);
          console.log('üöö Deadhead –Ω–∞–π–¥–µ–Ω:', loadData.deadhead, 'mi');
          break;
        }
      }
    }
    
    // 7. –°—Ç–∞–≤–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const rateSelectors = [
      '.rate-amount',
      '.card-price',
      '[class*="rate"]',
      '[class*="price"]'
    ];
    
    for (const selector of rateSelectors) {
      const rateElement = element.querySelector(selector);
      if (rateElement) {
        const rateText = rateElement.textContent.trim();
        const rateMatch = rateText.match(/\$\s*(\d{1,6}(?:,\d{3})*(?:\.\d{2})?)/);
        if (rateMatch) {
          loadData.rate = parseFloat(rateMatch[1].replace(/,/g, ''));
          console.log('üí∞ –°—Ç–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä', selector + ':', loadData.rate);
          break;
        }
      }
    }
    
    // 8. –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if (loadData.rate === 0) {
      const fullText = element.textContent || '';
      const rateMatch = fullText.match(/\$\s*(\d{1,6})/);
      if (rateMatch) {
        loadData.rate = parseFloat(rateMatch[1]);
        console.log('üí∞ –°—Ç–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ:', loadData.rate);
      }
    }
    
    // 9. –î–∞—Ç—ã - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    const dateElements = element.querySelectorAll('.origin_dateTime, [class*="date"]');
    const dates = [];
    for (const elem of dateElements) {
      const text = elem.textContent || '';
      const dateMatch = text.match(/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}/i);
      if (dateMatch && !text.includes('Deadhead')) {
        dates.push(dateMatch[0]);
      }
    }
    
    if (dates.length >= 2) {
      loadData.pickupDate = dates[0];
      loadData.deliveryDate = dates[1];
      console.log('üìÖ –î–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
        pickup: loadData.pickupDate,
        delivery: loadData.deliveryDate
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ LOTHIAN –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é hasMinimalData
  // –ù–æ —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!loadData.id) {
    loadData.id = generateLoadId(loadData);
  }
  
  if (!window.hasMinimalData(loadData)) {
    console.warn('‚ö†Ô∏è LOTHIAN –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
  if (loadData.miles > 5000) {
    console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:', loadData.miles);
    loadData.miles = 0;
  }
  
  if (loadData.rate > 50000) {
    console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è —Å—Ç–∞–≤–∫–∞:', loadData.rate);
    loadData.rate = 0;
  }
  
  if (loadData.deadhead > 250) {
    console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π deadhead:', loadData.deadhead);
    loadData.deadhead = 0;
  }
  
  console.log('‚úÖ LOTHIAN –∫–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞:', loadData);
  return loadData;
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è LOTHIAN
function parseLoadElementLothian(element) {
  const card = getCardRoot(element) || element;
  if (!card) return null;

  const getText = (sel) => card.querySelector(sel)?.textContent?.trim() || '';
  const getAll = (sel) => Array.from(card.querySelectorAll(sel));

  const idText = getText('.card_p-elements.loadno_card');
  const id = (idText.match(/\b\d{8,12}\b/) || [null])[0];

  const capacityType = getText('.capacity-type.capacity-type-font') || null;

  const milesText = getText('.card-distance[data-testid="card-distance"]');
  const miles = milesText ? parseInt(milesText.replace(/[^\d]/g, ''), 10) || 0 : 0;

  const weight = getText('.card_p-elements.card-lbs') || null;

  const cities = getAll('.origin_city').map(n => n.textContent.trim()).filter(Boolean);
  const pickup = cities[0] || null;
  const delivery = cities[1] || null;

  const deadheadText = getAll('p.origin_dateTime, .origin_dateTime')
    .map(n => n.textContent.trim())
    .find(t => /Deadhead/i.test(t)) || '';
  const deadhead = (deadheadText.match(/Deadhead\s+(\d+)\s*mi/i) || [0, 0])[1] | 0;

  const fullText = card.textContent || '';
  const rateMatch = fullText.match(/\$\s*([\d,]+(?:\.\d{2})?)(?=\D|$)/);
  const rate = rateMatch ? parseFloat(rateMatch[1].replace(/,/g, '')) : 0;

  // –í–∞–ª–∏–¥–∞—Ü–∏–∏
  const validRate = rate >= 50 && rate <= 50000 ? rate : 0;
  const validMiles = miles >= 1 && miles <= 5000 ? miles : 0;
  const validDeadhead = deadhead >= 0 && deadhead <= 1000 ? deadhead : 0;

  if (!id || !pickup || !delivery) {
    console.debug('LOTHIAN: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', { id, pickup, delivery });
    return null;
  }

  return {
    id,
    capacityType,
    pickup,
    delivery,
    pickupDate: null,
    deliveryDate: null,
    miles: validMiles,
    deadhead: validDeadhead,
    rate: validRate,
    weight,
    originRadius: null,
    destinationRadius: null,
    element: card
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function createDebugReport() {
  const siteType = detectSiteType();
  const report = {
    siteType: siteType,
    url: window.location.href,
    timestamp: new Date().toISOString(),
    loadElements: [],
    selectors: SELECTORS,
    parsing_results: []
  };
  
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è', siteType);
  
  // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–∑–æ–≤
  const loadElements = findLoadElements();
  report.loadElements = loadElements.map((el, index) => ({
    index: index,
    tagName: el.tagName,
    className: el.className,
    textContent: el.textContent?.substring(0, 200) + '...',
    outerHTML: el.outerHTML.substring(0, 500) + '...'
  }));
  
  // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
  for (let i = 0; i < Math.min(3, loadElements.length); i++) {
    try {
      const element = loadElements[i];
      const loadData = parseLoadElement(element);
      report.parsing_results.push({
        element_index: i,
        success: true,
        data: loadData
      });
    } catch (error) {
      report.parsing_results.push({
        element_index: i,
        success: false,
        error: error.message
      });
    }
  }
  
  console.log('üìã –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç:', report);
  return report;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.freightDebugReport = createDebugReport;

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è LOTHIAN
function testLothianParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ LOTHIAN...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ LOTHIAN
  const testHTML = `
    <tr>
      <td>4007568993</td>
      <td>Power Only</td>
      <td>29 miles</td>
      <td>43,373 lbs</td>
      <td>IRVING, TX</td>
      <td>Aug 22 6:30am - Aug 24 8:59am</td>
      <td>Drop Empty Trailer, Pick Up Loaded Trailer</td>
      <td>Deadhead 20 mi</td>
      <td>LANCASTER, TX</td>
      <td>Aug 24 9:00am - 9:00am</td>
      <td>Live Unload</td>
    </tr>
  `;
  
  const testElement = document.createElement('div');
  testElement.innerHTML = testHTML;
  const trElement = testElement.firstElementChild;
  
  console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', trElement);
  
  try {
    const result = parseLoadElementLothian(trElement);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    const checks = {
      hasId: !!result.id,
      hasPickup: !!result.pickup && result.pickup !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      hasDelivery: !!result.delivery && result.delivery !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      hasMiles: result.miles > 0,
      hasDeadhead: result.deadhead >= 0,
      hasRate: result.rate >= 0
    };
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∏:', checks);
    
    const passedChecks = Object.values(checks).filter(Boolean).length;
    const totalChecks = Object.keys(checks).length;
    
    console.log(`üìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passedChecks}/${totalChecks}`);
    
    if (passedChecks >= 4) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω, –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è');
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return null;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
window.testLothianParsing = testLothianParsing;

// –ù–æ–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è parseLothianCard
function testLothianCardParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ LOTHIAN –∫–∞—Ä—Ç–æ—á–µ–∫...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π LOTHIAN
  const testHTML = `
    <div class="load-card">
      <div class="card_p-elements loadno_card">Load #4007568993</div>
      <div class="capacity-type capacity-type-font">Power Only</div>
      <div class="card-distance" data-testid="card-distance">29 miles</div>
      <div class="card_p-elements card-lbs">43,373 lbs</div>
      <div class="origin_city">IRVING, TX</div>
      <div class="origin_city">LANCASTER, TX</div>
      <p class="origin_dateTime load_header_elements stop-appointment">Deadhead 20 mi</p>
      <div class="origin_dateTime">Aug 22 6:30am - Aug 24 8:59am</div>
      <div class="origin_dateTime">Aug 24 9:00am - 9:00am</div>
      <div class="rate-amount">$850</div>
    </div>
  `;
  
  const testElement = document.createElement('div');
  testElement.innerHTML = testHTML;
  const cardElement = testElement.firstElementChild;
  
  console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
  
  try {
    const result = parseLothianCard(cardElement);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const expectedResults = {
      id: '4007568993',
      capacityType: 'Power Only',
      miles: 29,
      weight: 43373,
      pickup: 'IRVING, TX',
      delivery: 'LANCASTER, TX',
      deadhead: 20,
      rate: 850
    };
    
    const checks = {
      'ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π': result && result.id === expectedResults.id,
      '–¢–∏–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π': result && result.capacityType === expectedResults.capacityType,
      '–ú–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ': result && result.miles === expectedResults.miles,
      '–í–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π': result && result.weight === expectedResults.weight,
      '–û—Ç–∫—É–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ': result && result.pickup === expectedResults.pickup,
      '–ö—É–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ': result && result.delivery === expectedResults.delivery,
      'Deadhead –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π': result && result.deadhead === expectedResults.deadhead,
      '–°—Ç–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è': result && result.rate === expectedResults.rate
    };
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∏:');
    Object.entries(checks).forEach(([check, passed]) => {
      console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
    });
    
    console.log('üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', expectedResults);
    console.log('üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', result ? {
      id: result.id,
      capacityType: result.capacityType,
      miles: result.miles,
      weight: result.weight,
      pickup: result.pickup,
      delivery: result.delivery,
      deadhead: result.deadhead,
      rate: result.rate
    } : 'null');
    
    const passedChecks = Object.values(checks).filter(Boolean).length;
    const totalChecks = Object.keys(checks).length;
    
    console.log(`\nüìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passedChecks}/${totalChecks}`);
    
    if (passedChecks === totalChecks) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return null;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
window.testLothianCardParsing = testLothianCardParsing;

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Ionic
function testIonicParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Ionic...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
  const testHTML = `
    <ion-row class="load-item">
      4007567920Power Only$909521 miles26,000 lbsHigh ValueDALLAS, TXAug 26 12:01am - 1:00amDrop Empty Trailer, Pick Up Loaded TrailerBIRMINGHAM, MOAug 26 12:31am - 12:00pm
    </ion-row>
  `;
  
  const testElement = document.createElement('div');
  testElement.innerHTML = testHTML;
  const ionElement = testElement.firstElementChild;
  
  console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–π Ionic —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', ionElement);
  
  try {
    const result = parseLoadElementIonic(ionElement);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Ionic:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const expectedResults = {
      id: '4007567920',
      capacityType: 'Power Only',
      rate: 909,
      miles: 521,
      pickup: 'DALLAS, TX',
      delivery: 'BIRMINGHAM, MO',
      weight: 26000
    };
    
    const checks = {
      idCorrect: result.id === expectedResults.id,
      typeCorrect: result.capacityType === expectedResults.capacityType,
      rateCorrect: result.rate === expectedResults.rate,
      milesCorrect: result.miles === expectedResults.miles,
      pickupCorrect: result.pickup === expectedResults.pickup,
      deliveryCorrect: result.delivery === expectedResults.delivery,
      weightCorrect: result.weight === expectedResults.weight
    };
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∏:', checks);
    console.log('üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', expectedResults);
    console.log('üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
      id: result.id,
      capacityType: result.capacityType,
      rate: result.rate,
      miles: result.miles,
      pickup: result.pickup,
      delivery: result.delivery,
      weight: result.weight
    });
    
    const passedChecks = Object.values(checks).filter(Boolean).length;
    const totalChecks = Object.keys(checks).length;
    
    console.log(`üìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passedChecks}/${totalChecks}`);
    
    if (passedChecks === totalChecks) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ionic:', error);
    return null;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é Ionic –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
window.testIonicParsing = testIonicParsing;

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Ionic –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
function parseLoadElementIonic(element) {
  console.log('üî∑ –ü–∞—Ä—Å–∏–Ω–≥ Ionic —ç–ª–µ–º–µ–Ω—Ç–∞...', element);
  
  const loadData = {
    id: null,
    capacityType: null,
    pickup: null,
    delivery: null,
    pickupDate: null,
    deliveryDate: null,
    miles: 0,
    deadhead: 0,
    rate: 0,
    weight: null,
    originRadius: null,
    destinationRadius: null,
    element: element
  };
  
  const fullText = element.textContent || '';
  console.log('üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç Ionic —ç–ª–µ–º–µ–Ω—Ç–∞:', fullText);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ Ionic
  // –ü—Ä–∏–º–µ—Ä: "4007567920Power Only$909521 miles26,000 lbsHigh ValueDALLAS, TXAug 26 12:01am - 1:00amDrop Empty Trailer, Pick Up Loaded TrailerBIRMINGHAM, MOAug 26 12:31am - 12:00pm"
  
  // ID –≥—Ä—É–∑–∞ (—á–∏—Å–ª–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ–±—ã—á–Ω–æ 10+ —Ü–∏—Ñ—Ä)
  const idMatch = fullText.match(/^(\d{10,})/);
  if (idMatch) {
    loadData.id = idMatch[1];
    console.log('üÜî –ù–∞–π–¥–µ–Ω ID:', loadData.id);
  }
  
  // –¢–∏–ø –≥—Ä—É–∑–∞ (–ø–æ—Å–ª–µ ID, –ø–µ—Ä–µ–¥ $)
  const typeMatch = fullText.match(/^\d*([A-Za-z\s]+)\$/);
  if (typeMatch) {
    loadData.capacityType = typeMatch[1].trim();
    console.log('üöö –ù–∞–π–¥–µ–Ω —Ç–∏–ø:', loadData.capacityType);
  }
  
  // –°—Ç–∞–≤–∫–∞ ($ + —á–∏—Å–ª–æ, –Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—è —Å–ª–µ–¥—É—é—â–∏–µ —Ü–∏—Ñ—Ä—ã –º–∏–ª—å)
  const rateMatch = fullText.match(/\$(\d{1,4})(?=\d+\s|[a-zA-Z])/);
  if (rateMatch) {
    loadData.rate = parseFloat(rateMatch[1]);
    console.log('üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞:', loadData.rate);
  }
  
  // –ú–∏–ª–∏ (—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "miles")
  const milesMatch = fullText.match(/(\d{1,4})\s*miles/i);
  if (milesMatch) {
    loadData.miles = parseInt(milesMatch[1]);
    console.log('üìè –ù–∞–π–¥–µ–Ω—ã –º–∏–ª–∏:', loadData.miles);
  }
  
  // Deadhead (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const deadheadMatch = fullText.match(/deadhead\s*(\d+)\s*mi/i);
  if (deadheadMatch) {
    loadData.deadhead = parseInt(deadheadMatch[1]);
    console.log('üöö –ù–∞–π–¥–µ–Ω deadhead:', loadData.deadhead);
  }
  
  // –í–µ—Å –≥—Ä—É–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const weightMatch = fullText.match(/(\d{1,3}(?:,\d{3})*)\s*lbs/i);
  if (weightMatch) {
    const weight = weightMatch[1].replace(/,/g, '');
    loadData.weight = parseInt(weight);
    console.log('‚öñÔ∏è –ù–∞–π–¥–µ–Ω –≤–µ—Å:', loadData.weight, 'lbs');
  }
  
  // –õ–æ–∫–∞—Ü–∏–∏ (–ì–û–†–û–î, –®–¢–ê–¢)
  const locationPattern = /([A-Z][A-Z\s]+),\s*([A-Z]{2})/g;
  const locations = [...fullText.matchAll(locationPattern)];
  
  if (locations.length >= 2) {
    loadData.pickup = `${locations[0][1].trim()}, ${locations[0][2]}`;
    loadData.delivery = `${locations[1][1].trim()}, ${locations[1][2]}`;
    console.log('üìç –ù–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏:', { pickup: loadData.pickup, delivery: loadData.delivery });
  }
  
  // –î–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: Aug 26 12:01am)
  const datePattern = /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}\s+\d{1,2}:\d{2}[ap]m/gi;
  const dates = [...fullText.matchAll(datePattern)];
  
  if (dates.length > 0) {
    loadData.pickupDate = dates[0][0];
    if (dates.length > 1) {
      loadData.deliveryDate = dates[1][0];
    }
    console.log('üìÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã:', { pickup: loadData.pickupDate, delivery: loadData.deliveryDate });
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
  if (!loadData.rate || loadData.rate === 0) {
    // –ò—â–µ–º —Ü–µ–Ω—É –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const priceElement = element.querySelector('p.card-price, .card-price, [class*="price"]');
    if (priceElement) {
      const priceText = priceElement.textContent || '';
      loadData.rate = parseNumberImproved(priceText, 'rate');
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!loadData.id) {
    loadData.id = generateLoadId(loadData);
  }
  
  console.log('‚úÖ Ionic –≥—Ä—É–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', loadData);
  return loadData;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function parseLoadElement(element) {
  const siteType = detectSiteType();
  let load = null;

  if (siteType === 'freightpower') {
    load = parseLoadElementLothian(element);
  } else if (siteType === 'ionic') {
    load = parseLoadElementIonic(element);
  }

  if (!load || !load.pickup || !load.delivery) {
    const text = (getCardRoot(element) || element)?.textContent || '';
    const fallback = parseLoadFromText(text);
    if (fallback?.pickup && fallback?.delivery) {
      load = { ...fallback, element: getCardRoot(element) || element };
    }
  }
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º hasMinimalData
  if (!load || !window.hasMinimalData(load)) {
    return null;
  }

  return load;
}  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ ID
  if (!extractedId) {
    const idCandidates = [
      element.querySelector('[data-load-id]')?.getAttribute('data-load-id'),
      element.querySelector('[id]')?.getAttribute('id'),
      element.dataset?.loadId,
      element.dataset?.id
    ].filter(Boolean);
    
    extractedId = idCandidates[0];
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID
  if (extractedId && (
    extractedId.toLowerCase().includes('dlefield') ||
    extractedId.toLowerCase().includes('field') ||
    extractedId.toLowerCase().includes('placeholder') ||
    extractedId.toLowerCase().includes('enter') ||
    extractedId.toLowerCase().includes('select') ||
    extractedId.length < 3 ||
    extractedId.length > 50
  )) {
    extractedId = null;
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç –ø–æ–≥—Ä—É–∑–∫–∏/—Ä–∞–∑–≥—Ä—É–∑–∫–∏
  loadData.pickup = extractLocationText(element, SELECTORS.pickup_location, 'pickup');
  loadData.delivery = extractLocationText(element, SELECTORS.delivery_location, 'delivery');
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ pickup/delivery —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º heuristic search
  if (!loadData.pickup || !loadData.delivery) {
    const locations = extractLocationsHeuristic(element);
    if (locations.pickup && !loadData.pickup) loadData.pickup = locations.pickup;
    if (locations.delivery && !loadData.delivery) loadData.delivery = locations.delivery;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –≥—Ä—É–∑–∞
  loadData.capacityType = extractText(element, SELECTORS.capacity_type) || '–°—É—Ö–æ–π —Ñ—É—Ä–≥–æ–Ω';
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã
  loadData.pickupDate = extractText(element, SELECTORS.pickup_date);
  loadData.deliveryDate = extractText(element, SELECTORS.delivery_date);
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const milesText = extractText(element, SELECTORS.miles);
  loadData.miles = parseNumberImproved(milesText, 'miles');
  
  const deadheadText = extractText(element, SELECTORS.deadhead);
  loadData.deadhead = parseNumberImproved(deadheadText, 'deadhead');
  
  const rateText = extractText(element, SELECTORS.rate);
  loadData.rate = parseNumberImproved(rateText, 'rate');
  
  // –ï—Å–ª–∏ –º–∏–ª–∏ = 0, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Ö –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
  if (loadData.miles === 0) {
    loadData.miles = findMilesAlternative(element);
  }
  
  // –ï—Å–ª–∏ rate = 0, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç–∞–≤–∫—É –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
  if (loadData.rate === 0) {
    loadData.rate = findRateAlternative(element);
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–¥–∏—É—Å—ã
  const radiusElements = element.querySelectorAll(SELECTORS.radius.join(', '));
  if (radiusElements.length >= 2) {
    loadData.originRadius = extractRadius(radiusElements[0]);
    loadData.destinationRadius = extractRadius(radiusElements[1]);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  loadData.id = extractedId || generateLoadId(loadData);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (!loadData.pickup || !loadData.delivery) {
    console.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (pickup/delivery):', JSON.stringify({
      pickup: loadData.pickup,
      delivery: loadData.delivery,
      elementHTML: element.innerHTML.substring(0, 200)
    }, null, 2));
    return null;
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  if (loadData.miles > 5000 || loadData.rate > 50000) {
    console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:', JSON.stringify({
      id: loadData.id,
      miles: loadData.miles,
      rate: loadData.rate,
      milesText: milesText,
      rateText: rateText,
      deadheadText: deadheadText
    }, null, 2));
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö
    if (loadData.miles > 5000) {
      console.log('üîß –°–±—Ä–æ—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–∏–ª—å:', loadData.miles, '-> 0');
      loadData.miles = 0;
    }
    if (loadData.rate > 50000) {
      console.log('üîß –°–±—Ä–æ—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏:', loadData.rate, '-> 0');
      loadData.rate = 0;
    }
  }
  
  console.log('‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', JSON.stringify({
    id: loadData.id,
    pickup: loadData.pickup,
    delivery: loadData.delivery,
    miles: loadData.miles,
    rate: loadData.rate
  }, null, 2));
  
  return loadData;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –≥—Ä—É–∑–∞
function generateLoadId(data) {
  try {
    let idParts = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞)
    if (data.pickup) {
      const pickupPart = data.pickup.split(/[,\s]+/)[0]?.substring(0, 8) || 'pickup';
      idParts.push(pickupPart);
    }
    
    if (data.delivery) {
      const deliveryPart = data.delivery.split(/[,\s]+/)[0]?.substring(0, 8) || 'delivery';
      idParts.push(deliveryPart);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–ª—å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (data.miles > 0) {
      idParts.push(`${data.miles}mi`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (data.rate > 0) {
      idParts.push(`$${Math.round(data.rate)}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    const timestamp = Date.now().toString().slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
    idParts.push(timestamp);
    
    // –°–æ–∑–¥–∞–µ–º ID
    const generatedId = idParts.join('-').replace(/[^\w\-$]/g, '');
    
    console.log('üîß Generated load ID:', generatedId, 'from data:', JSON.stringify({
      pickup: data.pickup,
      delivery: data.delivery,
      miles: data.miles,
      rate: data.rate
    }, null, 2));
    
    return generatedId;
    
  } catch (error) {
    console.error('Error generating load ID:', error);
    // Fallback ID
    return `load-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function extractLocationText(element, selectors, type) {
  const text = extractText(element, selectors);
  if (!text) return null;
  
  // –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  const cleaned = text.trim()
    .replace(/^(Origin|Destination|Pickup|Delivery):\s*/i, '')
    .replace(/\s+/g, ' ');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ä–æ–¥/—à—Ç–∞—Ç)
  if (cleaned.length < 3 || cleaned.length > 100) return null;
  if (/^[^a-zA-Z]*$/.test(cleaned)) return null; // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã/—Å–∏–º–≤–æ–ª—ã
  
  return cleaned;
}

// –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
function extractLocationsHeuristic(element) {
  const text = element.textContent || '';
  const locations = { pickup: null, delivery: null };
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
  const locationPatterns = [
    // –ì–æ—Ä–æ–¥, –®—Ç–∞—Ç ZIP
    /([A-Z][a-z]+(?:\s+[A-Z][a-z]*)*),\s*([A-Z]{2})\s*(\d{5})?/g,
    // –ì–æ—Ä–æ–¥ –®—Ç–∞—Ç
    /([A-Z][a-z]+(?:\s+[A-Z][a-z]*)*)\s+([A-Z]{2})\b/g,
    // –ü—Ä–æ—Å—Ç—ã–µ –≥–æ—Ä–æ–¥–∞
    /\b([A-Z][a-z]+(?:ville|ton|burg|city|town|field))\b/g
  ];
  
  for (const pattern of locationPatterns) {
    const matches = [...text.matchAll(pattern)];
    if (matches.length >= 2) {
      locations.pickup = matches[0][0];
      locations.delivery = matches[1][0];
      break;
    } else if (matches.length === 1 && !locations.pickup) {
      locations.pickup = matches[0][0];
    }
  }
  
  return locations;
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª
function parseNumberImproved(text, type) {
  if (!text) return 0;
  
  console.log(`üî¢ –ü–∞—Ä—Å–∏–Ω–≥ ${type}: "${text}"`);
  
  let result = 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  const ranges = {
    rate: { min: 50, max: 1000000 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—Ç–æ–≤
    price: { min: 50, max: 1000000 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—Ç–æ–≤
    miles: { min: 1, max: 5000 },
    distance: { min: 1, max: 5000 },
    deadhead: { min: 0, max: 250 }
  };
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
  if (type === 'rate' || type === 'price') {
    // –ò—â–µ–º —á–∏—Å–ª–∞ —Å –∑–Ω–∞–∫–æ–º –¥–æ–ª–ª–∞—Ä–∞ - –±–µ—Ä–µ–º –ü–ï–†–í–û–ï —á–∏—Å–ª–æ –ø–æ—Å–ª–µ $
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "$761413 miles" –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 761
    const rateMatch = text.match(/\$\s*(\d{1,6})/);
    if (rateMatch) {
      result = parseFloat(rateMatch[1]);
      console.log(`üíµ –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞: $${result} –∏–∑ "${text}"`);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç $, –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–æ–ª–ª–∞—Ä–æ–º
      const dollarMatch = text.match(/\$\s*(\d+(?:,\d{3})*(?:\.\d{2})?)/);
      if (dollarMatch) {
        const cleaned = dollarMatch[1].replace(/,/g, '');
        result = parseFloat(cleaned);
      }
    }
  } else if (type === 'miles' || type === 'distance') {
    // –ò—â–µ–º —á–∏—Å–ª–∞ —Å–æ —Å–ª–æ–≤–æ–º "miles" –∏–ª–∏ "mi"
    const milesMatch = text.match(/(\d+(?:,\d{3})*)\s*(?:miles?|mi)/i);
    if (milesMatch) {
      const cleaned = milesMatch[1].replace(/,/g, '');
      result = parseFloat(cleaned);
    } else {
      // –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è –º–∏–ª—å
      const numbers = text.match(/(\d+(?:,\d{3})*)/g);
      if (numbers) {
        for (const num of numbers) {
          const cleaned = num.replace(/,/g, '');
          const parsed = parseFloat(cleaned);
          if (parsed >= ranges.miles.min && parsed <= ranges.miles.max) {
            result = parsed;
            break;
          }
        }
      }
    }
  } else if (type === 'deadhead') {
    // –ò—â–µ–º –¢–û–õ–¨–ö–û —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ "Deadhead XX mi"
    const deadheadMatch = text.match(/Deadhead\s+(\d+)\s*mi/i);
    if (deadheadMatch) {
      result = parseFloat(deadheadMatch[1]);
      console.log(`üöö –ò–∑–≤–ª–µ—á–µ–Ω deadhead: ${result} mi –∏–∑ "${text}"`);
    }
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–µ—Ç—Å—è 0
  } else {
    // –û–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    const cleaned = text.replace(/[^\d\.,]/g, '');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    if (cleaned.includes(',')) {
      const parts = cleaned.split(',');
      if (parts.length === 2 && parts[1].length <= 2) {
        // –ó–∞–ø—è—Ç–∞—è –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        const finalCleaned = parts[0] + '.' + parts[1];
        result = parseFloat(finalCleaned);
      } else {
        // –ó–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
        const finalCleaned = cleaned.replace(/,/g, '');
        result = parseFloat(finalCleaned);
      }
    } else {
      result = parseFloat(cleaned);
    }
  }
  
  result = isNaN(result) ? 0 : result;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const range = ranges[type];
  if (range && result > 0) {
    if (result < range.min || result > range.max) {
      console.warn(`‚ö†Ô∏è ${type} –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${range.min}-${range.max}]: ${result}`);
      // –î–ª—è Ionic –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (detectSiteType() !== 'ionic') {
        result = 0;
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ rate –∏–ª–∏ price –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Ü–µ–Ω—Ç—ã
    // –ù–û: –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–ª–µ–∫–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if ((type === 'rate' || type === 'price') && result > 50000) {
      console.warn(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${type}: ${result}. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.`);
      // –ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    }
  }
  
  console.log(`‚úÖ ${type}: "${text}" -> ${result}`);
  return result;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –º–∏–ª–µ–π
function findMilesAlternative(element) {
  const text = element.textContent || '';
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∏–ª—å
  const milesPatterns = [
    /(\d+(?:,\d+)*)\s*(?:mi|miles|–º–∏–ª—å|–º–∏–ª)/gi,
    /(?:miles|–º–∏–ª—å|–º–∏–ª):\s*(\d+(?:,\d+)*)/gi,
    /(?:distance|—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ):\s*(\d+(?:,\d+)*)/gi
  ];
  
  for (const pattern of milesPatterns) {
    const match = text.match(pattern);
    if (match) {
      const number = parseNumberImproved(match[0], 'miles');
      if (number > 0 && number < 10000) {
        return number;
      }
    }
  }
  
  return 0;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞–≤–∫–∏
function findRateAlternative(element) {
  const text = element.textContent || '';
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∞–≤–æ–∫
  const ratePatterns = [
    /\$(\d+(?:,\d+)*(?:\.\d{2})?)/g,
    /(?:rate|—Å—Ç–∞–≤–∫–∞|—Ü–µ–Ω–∞):\s*\$?(\d+(?:,\d+)*(?:\.\d{2})?)/gi,
    /(?:pay|–æ–ø–ª–∞—Ç–∞):\s*\$?(\d+(?:,\d+)*(?:\.\d{2})?)/gi
  ];
  
  const numbers = [];
  
  for (const pattern of ratePatterns) {
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const number = parseNumberImproved(match[1], 'rate');
      if (number > 100 && number < 100000) { // –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç–∞–≤–∫–∏
        numbers.push(number);
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–±—â–∞—è —Å—Ç–∞–≤–∫–∞)
  return numbers.length > 0 ? Math.max(...numbers) : 0;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
function extractRadius(element) {
  if (!element) return null;
  
  const text = element.textContent || element.value || '';
  const match = text.match(/(\d+)\s*mi/i);
  return match ? parseInt(match[1]) : null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
function extractText(parentElement, selectors) {
  for (const selector of selectors) {
    try {
      let elements = [];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
      if (selector.includes(':contains(')) {
        // –ü–∞—Ä—Å–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å :contains()
        const match = selector.match(/(.*):\contains\("([^"]+)"\)(.*)/);
        if (match) {
          const [, prefix, text, suffix] = match;
          const baseSelector = prefix || '*';
          const candidates = parentElement.querySelectorAll(baseSelector);
          
          for (const el of candidates) {
            if (el.textContent && el.textContent.includes(text)) {
              if (suffix) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ~ * –∏–ª–∏ + *), –∏—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (suffix.trim() === '~ *') {
                  // –°–ª–µ–¥—É—é—â–∏–µ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                  let sibling = el.nextElementSibling;
                  while (sibling) {
                    elements.push(sibling);
                    sibling = sibling.nextElementSibling;
                  }
                } else if (suffix.trim() === '+ *') {
                  // –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                  if (el.nextElementSibling) {
                    elements.push(el.nextElementSibling);
                  }
                }
              } else {
                elements.push(el);
              }
            }
          }
        }
      } else {
        // –û–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        elements = Array.from(parentElement.querySelectorAll(selector));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      for (const el of elements) {
        const text = extractTextFromElement(el);
        if (text) {
          return text;
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      console.debug(`Selector error for "${selector}":`, e.message);
    }
  }
  
  return null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
function extractTextFromElement(element) {
  if (!element) return null;
  
  // –î–ª—è input/select —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ—Ä–µ–º value
  if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
    return element.value || null;
  }
  
  // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–∑–ª–æ–º
  if (element.childNodes.length === 1 && element.childNodes[0].nodeType === Node.TEXT_NODE) {
    const text = element.textContent.trim();
    return text || null;
  }
  
  // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—â–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ labels
  const clonedElement = element.cloneNode(true);
  const labels = clonedElement.querySelectorAll('label');
  labels.forEach(label => label.remove());
  
  const text = clonedElement.textContent.trim();
  return text || null;
}

// –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function parseNumber(text) {
  if (!text) return 0;
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
  const cleaned = text.replace(/[^\d\.,]/g, '');
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
  const number = parseFloat(cleaned.replace(/,/g, ''));
  
  return isNaN(number) ? 0 : number;
}

// –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞
function calculateProfitability(load) {
  const totalMiles = load.miles + load.deadhead;
  const ratePerMile = totalMiles > 0 ? load.rate / totalMiles : 0;
  const deadheadRatio = load.miles > 0 ? load.deadhead / load.miles : 1;
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç deadhead)
  const profitabilityScore = ratePerMile * (1 - deadheadRatio * 0.3);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  let priority = 'LOW';
  if (profitabilityScore > 3.5) {
    priority = 'HIGH';
  } else if (profitabilityScore > 2.5) {
    priority = 'MEDIUM';
  }
  
  return {
    ratePerMile,
    profitabilityScore,
    deadheadRatio,
    isProfitable: ratePerMile >= 2.50 && deadheadRatio <= 0.25,
    priority
  };
}

// –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≥—Ä—É–∑–∞
function calculatePriority(loadData, profitability) {
  if (!profitability.isProfitable) {
    return 'LOW';
  }
  
  let score = 0;
  
  // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ —Å—Ç–∞–≤–∫—É –∑–∞ –º–∏–ª—é
  if (profitability.ratePerMile >= 4.0) score += 30;
  else if (profitability.ratePerMile >= 3.0) score += 20;
  else if (profitability.ratePerMile >= 2.5) score += 10;
  
  // –ë–∞–ª–ª –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π deadhead
  if (loadData.deadhead <= 10) score += 20;
  else if (loadData.deadhead <= 25) score += 15;
  else if (loadData.deadhead <= 50) score += 10;
  
  // –ë–∞–ª–ª –∑–∞ —Ö–æ—Ä–æ—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  if (loadData.miles >= 300 && loadData.miles <= 800) score += 15;
  else if (loadData.miles >= 200) score += 10;
  
  // –ë–∞–ª–ª –∑–∞ –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
  if (profitability.totalRevenue >= 2000) score += 15;
  else if (profitability.totalRevenue >= 1000) score += 10;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
  if (score >= 60) return 'HIGH';
  if (score >= 30) return 'MEDIUM';
  return 'LOW';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function passesFilters(load, profitability) {
  const settings = monitoringState.settings || {};
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –º–∏–ª—é
  if (profitability.ratePerMile < (settings.minRatePerMile || 2.50)) {
    return false;
  }
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π deadhead
  if (load.deadhead > (settings.maxDeadhead || 50)) {
    return false;
  }
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  if (load.miles < (settings.minDistance || 200)) {
    return false;
  }
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
  if (settings.maxDistance && load.miles > settings.maxDistance) {
    return false;
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  if (settings.regions && settings.regions.length > 0) {
    const matchesRegion = settings.regions.some(region => {
      const regionLower = region.trim().toLowerCase();
      
      // –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!regionLower) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)
      if (regionLower.length === 2) {
        const regionUpper = regionLower.toUpperCase();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ pickup –∏ delivery
        if ((load.pickup && load.pickup.includes(regionUpper)) || 
            (load.delivery && load.delivery.includes(regionUpper))) {
          return true;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤/–ª–æ–∫–∞—Ü–∏–π
      const pickupMatch = load.pickup && load.pickup.toLowerCase().includes(regionLower);
      const deliveryMatch = load.delivery && load.delivery.toLowerCase().includes(regionLower);
      
      return pickupMatch || deliveryMatch;
    });
    
    if (!matchesRegion) {
      console.log('üö´ Load filtered out by region:', JSON.stringify({ 
        loadRegions: {
          pickup: load.pickup,
          delivery: load.delivery
        },
        filterRegions: settings.regions
      }, null, 2));
      return false;
    } else {
      console.log('‚úÖ Load matches region filter:', JSON.stringify({
        loadRegions: {
          pickup: load.pickup,
          delivery: load.delivery
        },
        filterRegions: settings.regions
      }, null, 2));
    }
  }
  
  return true;
}

// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function adjustScanInterval(result) {
  const currentInterval = monitoringState.adaptiveInterval;
  const baseInterval = (monitoringState.settings && monitoringState.settings.scanInterval) || 3000;
  let newInterval = currentInterval;
  
  switch (result) {
    case 'profitable_found':
      // –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º
      newInterval = Math.max(1500, currentInterval - 1000);
      break;
      
    case 'loads_found':
      // –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≥—Ä—É–∑—ã - —É—Å–∫–æ—Ä—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      newInterval = Math.max(2000, currentInterval - 500);
      break;
      
    case 'no_new_loads':
      // –ù–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –Ω–µ—Ç - –∑–∞–º–µ–¥–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      newInterval = Math.min(baseInterval * 2, currentInterval + 1000);
      break;
      
    case 'no_loads':
      // –ì—Ä—É–∑–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º
      newInterval = Math.min(baseInterval * 3, currentInterval + 2000);
      break;
      
    case 'error':
      // –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–º–µ–¥–ª—è–µ–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      newInterval = Math.min(baseInterval * 2.5, currentInterval + 1500);
      break;
      
    case 'slow_scan':
      // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      newInterval = Math.min(baseInterval * 2, currentInterval + 1000);
      break;
      
    default:
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
      newInterval = baseInterval;
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  newInterval = Math.max(1500, Math.min(15000, newInterval));
  
  if (newInterval !== currentInterval) {
    console.log(`Scan interval adjusted: ${currentInterval}ms -> ${newInterval}ms (reason: ${result})`);
    monitoringState.adaptiveInterval = newInterval;
  }
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function showMonitoringIndicator() {
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
  hideMonitoringIndicator();
  
  const indicator = document.createElement('div');
  indicator.id = 'freightpower-monitor-indicator';
  indicator.innerHTML = `
    <div style="
      position: fixed;
      top: 10px;
      right: 10px;
      background: #4CAF50;
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      font-size: 12px;
      font-family: Arial, sans-serif;
      z-index: 10000;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      animation: pulse 2s infinite;
    ">
      üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
      <div style="font-size: 10px; opacity: 0.8;">
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: <span id="scan-counter">0</span>
      </div>
    </div>
    <style>
      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
      }
    </style>
  `;
  
  document.body.appendChild(indicator);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  setInterval(() => {
    const counter = document.getElementById('scan-counter');
    if (counter && monitoringState.isActive) {
      counter.textContent = monitoringState.scanCount;
    }
  }, 1000);
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function hideMonitoringIndicator() {
  const indicator = document.getElementById('freightpower-monitor-indicator');
  if (indicator) {
    indicator.remove();
  }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
function playAlertSound() {
  try {
    // –°–æ–∑–¥–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
    const audio = new Audio(chrome.runtime.getURL('sounds/alert.mp3'));
    audio.volume = 0.7;
    
    audio.play().then(() => {
      console.log('üîä Alert sound played');
    }).catch(error => {
      console.error('Error playing sound:', error);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Audio API
      try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = 800; // –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞
        gainNode.gain.value = 0.3; // –ì—Ä–æ–º–∫–æ—Å—Ç—å
        
        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.2); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 200–º—Å
        
        console.log('üîä Fallback beep played');
      } catch (fallbackError) {
        console.error('Fallback sound also failed:', fallbackError);
      }
    });
  } catch (error) {
    console.error('Failed to create audio element:', error);
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function observePageChanges() {
  console.log('üëÅÔ∏è Starting DOM observer...');
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–¥–ª—è SPA)
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      console.log('üìç URL changed:', url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞
      if (url.includes('/search') || url.includes('/app/search')) {
        console.log('üîç On search page, checking for results...');
        setTimeout(() => {
          if (monitoringState.isActive) {
            scanForLoads();
          }
        }, 1000);
      }
    }
  }).observe(document, {subtree: true, childList: true});
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM
  const observer = new MutationObserver((mutations) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    let hasNewContent = false;
    
    for (const mutation of mutations) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –Ω–æ–≤—ã–µ —É–∑–ª—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã
        for (const node of mutation.addedNodes) {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const text = node.textContent || '';
            // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥—Ä—É–∑–æ–≤
            if (text.includes('Origin') || text.includes('Destination') || 
                text.includes('miles') || /\$\d+/.test(text) ||
                node.querySelector && node.querySelector('[class*="load"], [class*="freight"], [class*="card"]')) {
              hasNewContent = true;
              break;
            }
          }
        }
      }
      
      if (hasNewContent) break;
    }
    
    // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
    if (hasNewContent && monitoringState.isActive && !monitoringState.pendingScan) {
      console.log('üÜï New content detected, scheduling scan...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      monitoringState.pendingScan = true;
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
      setTimeout(() => {
        monitoringState.pendingScan = false;
        if (monitoringState.isActive) {
          scanForLoads();
        }
      }, 500);
    }
  });
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
  const config = {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['class', 'style'] // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
  observer.observe(document.body, config);
  
  // –¢–∞–∫–∂–µ –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const containers = [
    document.querySelector('.search-results'),
    document.querySelector('[class*="result-container"]'),
    document.querySelector('main'),
    document.querySelector('#app')
  ].filter(Boolean);
  
  containers.forEach(container => {
    console.log('üëÅÔ∏è Observing container:', container.className || container.tagName);
    observer.observe(container, config);
  });
  
  console.log('‚úÖ DOM observer started');
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now();
  const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  
  for (const [loadId, loadData] of monitoringState.foundLoads.entries()) {
    if (now - loadData.foundAt > maxAge) {
      monitoringState.foundLoads.delete(loadId);
    }
  }
  
  // –û—á–∏—â–∞–µ–º throttle –∫–µ—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  for (const [key, timestamp] of logThrottle.entries()) {
    if (now - timestamp > maxAge) {
      logThrottle.delete(key);
    }
  }
  
  console.log(`Cache cleaned. Remaining loads: ${monitoringState.foundLoads.size}, throttle entries: ${logThrottle.size}`);
}, 30 * 60 * 1000);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function diagnosePage() {
  console.log('üîç Starting page diagnostics...');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
  console.log('üìç Current URL:', window.location.href);
  console.log('üìÑ Page title:', document.title);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  const containers = {
    'main': document.querySelector('main'),
    '#app': document.querySelector('#app'),
    '.search-results': document.querySelector('.search-results'),
    '[role="main"]': document.querySelector('[role="main"]'),
    '.content': document.querySelector('.content')
  };
  
  console.log('üì¶ Main containers found:');
  Object.entries(containers).forEach(([selector, element]) => {
    if (element) {
      console.log(`  ‚úÖ ${selector} - ${element.className || element.id || element.tagName}`);
    }
  });
  
  // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
  const potentialCards = [];
  
  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
  const classPatterns = ['card', 'load', 'freight', 'result', 'item', 'row'];
  classPatterns.forEach(pattern => {
    const elements = document.querySelectorAll(`[class*="${pattern}"]`);
    if (elements.length > 0) {
      console.log(`üéØ Found ${elements.length} elements with class containing "${pattern}"`);
      elements.forEach(el => {
        if (el.textContent.length > 50 && el.childElementCount > 2) {
          potentialCards.push({
            element: el,
            selector: `[class*="${pattern}"]`,
            className: el.className
          });
        }
      });
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  console.log(`\nüÉè Found ${potentialCards.length} potential card elements:`);
  potentialCards.slice(0, 3).forEach((card, index) => {
    console.log(`\nüìã Card #${index + 1}:`);
    console.log(`  Selector: ${card.selector}`);
    console.log(`  Class: ${card.className}`);
    console.log(`  Children: ${card.element.childElementCount}`);
    console.log(`  Text preview: ${card.element.textContent.substring(0, 100).replace(/\s+/g, ' ')}...`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const structure = analyzeElementStructure(card.element);
    console.log(`  Structure:`, structure);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const keywords = ['Origin', 'Destination', 'Capacity Type', 'miles', 'Romeoville', 'Dayville'];
  console.log('\nüî§ Keyword search:');
  keywords.forEach(keyword => {
    const count = (document.body.textContent.match(new RegExp(keyword, 'gi')) || []).length;
    if (count > 0) {
      console.log(`  ‚úÖ "${keyword}" found ${count} times`);
    }
  });
  
  return potentialCards;
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
function analyzeElementStructure(element) {
  const structure = {
    tag: element.tagName,
    classes: element.className.split(' ').filter(c => c),
    hasOrigin: false,
    hasDestination: false,
    hasDate: false,
    hasMiles: false,
    hasPrice: false,
    textFields: []
  };
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  function findTextFields(el, depth = 0) {
    if (depth > 3) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
    
    for (const child of el.children) {
      const text = child.textContent.trim();
      
      if (text && child.children.length === 0) {
        structure.textFields.push({
          text: text.substring(0, 50),
          tag: child.tagName,
          class: child.className
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if (text.includes('Origin')) structure.hasOrigin = true;
        if (text.includes('Destination')) structure.hasDestination = true;
        if (/\b\d{1,2}\/\d{1,2}\/\d{2,4}\b/.test(text) || /\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b/i.test(text)) structure.hasDate = true;
        if (/\b\d+\s*mi/i.test(text)) structure.hasMiles = true;
        if (/\$\d+/.test(text)) structure.hasPrice = true;
      }
      
      findTextFields(child, depth + 1);
    }
  }
  
  findTextFields(element);
  
  return structure;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
function isExtensionContextValid() {
  try {
    chrome.runtime.id;
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Extension context invalidated:', error.message);
    return false;
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logThrottle = new Map();

function throttledLog(key, logFunction, message, interval = 30000) {
  const now = Date.now();
  const lastLog = logThrottle.get(key);
  
  if (!lastLog || now - lastLog > interval) {
    logThrottle.set(key, now);
    logFunction(message);
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ background script
async function safeSendMessage(message, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      if (!isExtensionContextValid()) {
        throttledLog('context_invalid', console.warn, '‚ùå Extension context invalid, skipping message send');
        return null;
      }
      
      const response = await chrome.runtime.sendMessage(message);
      return response;
    } catch (error) {
              throttledLog(`message_fail_${i}`, console.warn, `‚ö†Ô∏è Message send attempt ${i + 1} failed: ${error.message}`);
      
      if (error.message.includes('Extension context invalidated') || 
          error.message.includes('receiving end does not exist')) {
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã
        console.error('‚ùå Extension context permanently invalidated');
        return null;
      }
      
      if (i === retries - 1) {
        console.error('‚ùå All message send attempts failed:', error);
        return null;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 500 * (i + 1)));
    }
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startAutomaticMonitoring() {
  try {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if (!isExtensionContextValid()) {
      console.error('‚ùå Extension context invalidated, cannot start monitoring');
      return;
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!monitoringState.settings) {
      monitoringState.settings = {
        minRatePerMile: 2.5,
        maxDeadhead: 50,
        scanInterval: 3000,
        soundAlerts: true
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ storage —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try {
      const response = await safeSendMessage({ type: 'GET_SETTINGS' });
      if (response && response.success && response.settings) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        monitoringState.settings = {
          ...monitoringState.settings,
          ...response.settings
        };
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', monitoringState.settings);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
    } catch (messageError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', messageError);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoringState.isActive = true;
    monitoringState.adaptiveInterval = (monitoringState.settings && monitoringState.settings.scanInterval) || 3000;
    monitoringState.lastScanTime = Date.now();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    showMonitoringIndicator();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º watchdog
    startMonitoringWatchdog();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º background script —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    safeSendMessage({
      type: 'MONITORING_STATUS',
      data: {
        isActive: true,
        isLoggedIn: true,
        timestamp: Date.now()
      }
    }).catch(err => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å background script:', err));
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      if (monitoringState.isActive) {
        console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        performScan();
      }
    }, 2000);
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
    safeSendMessage({
      type: 'MONITORING_ERROR',
      data: {
        error: error.message,
        timestamp: Date.now()
      }
    });
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
window.freightDiag = diagnosePage;
console.log('üí° Tip: Run "freightDiag()" in console to diagnose page structure');
console.log('üí° Tip: Run "testLothianCardParsing()" in console to test LOTHIAN parsing');

console.log('üî• FreightPower Load Monitor content script –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!');

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
function parseLoadFromText(text) {
  console.log('üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞:', text);
  
  const loadData = {
    id: null,
    capacityType: null,
    pickup: null,
    delivery: null,
    pickupDate: null,
    deliveryDate: null,
    miles: 0,
    deadhead: 0,
    rate: 0,
    weight: null
  };
  
  // 1. ID - –ø–µ—Ä–≤–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–æ–±—ã—á–Ω–æ 10 —Ü–∏—Ñ—Ä)
  const idMatch = text.match(/\b(\d{10})\b/);
  if (idMatch) {
    loadData.id = idMatch[1];
  }
  
  // 2. Capacity Type - –∏—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
  const capacityTypes = ['Power Only', 'Dry Van', 'Flatbed', 'Reefer', 'Van'];
  for (const type of capacityTypes) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–ø–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—Ç
    const typeRegex = new RegExp(type.replace(' ', '\\s*'), 'i');
    if (typeRegex.test(text)) {
      loadData.capacityType = type;
      break;
    }
  }
  
  // 3. Rate - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ $ (–Ω–∞–ø—Ä–∏–º–µ—Ä, $704 –∏–∑ "$704388 miles")
  const rateMatch = text.match(/\$\s*(\d{1,6})/);
  if (rateMatch) {
    loadData.rate = parseFloat(rateMatch[1]);
  }
  
  // 4. Miles - —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "miles"
  const milesMatch = text.match(/(\d+)\s*miles/i);
  if (milesMatch) {
    loadData.miles = parseInt(milesMatch[1]);
  }
  
  // 5. Weight - —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "lbs"
  const weightMatch = text.match(/([\d,]+)\s*lbs/i);
  if (weightMatch) {
    loadData.weight = weightMatch[1].replace(/,/g, '');
  }
  
  // 6. Deadhead - –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫–∏ "Deadhead XX mi"
  const deadheadMatch = text.match(/Deadhead\s+(\d+)\s*mi/i);
  if (deadheadMatch) {
    loadData.deadhead = parseInt(deadheadMatch[1]);
  }
  
  // 7. Locations - —Ñ–æ—Ä–º–∞—Ç "–ì–û–†–û–î, –®–¢–ê–¢" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "WILMER, TX")
  const locationPattern = /\b([A-Z][A-Z\s]+),\s*([A-Z]{2})\b/g;
  const locations = [];
  let match;
  while ((match = locationPattern.exec(text)) !== null) {
    locations.push(`${match[1].trim()}, ${match[2]}`);
  }
  
  // –ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ capacity type - pickup, –≤—Ç–æ—Ä–∞—è - delivery
  if (locations.length >= 2) {
    loadData.pickup = locations[0];
    loadData.delivery = locations[1];
  }
  
  // 8. –î–∞—Ç—ã - –∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç "Aug 25" –∏–ª–∏ "Aug 25 6:00am"
  const datePattern = /\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}\b/g;
  const dates = [];
  while ((match = datePattern.exec(text)) !== null) {
    dates.push(match[0]);
  }
  
  if (dates.length >= 2) {
    loadData.pickupDate = dates[0];
    loadData.deliveryDate = dates[1];
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º rate per mile
  if (loadData.rate > 0 && loadData.miles > 0) {
    loadData.ratePerMile = (loadData.rate / loadData.miles).toFixed(2);
  }
  
  console.log('‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', loadData);
  return loadData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
function testLoadParser() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –≥—Ä—É–∑–æ–≤...');
  
  const testCases = [
    "4007568740 Power Only $704 388 miles 24,710 lbs WILMER, TX Aug 25 6:00am - 11:59pm Deadhead 16 mi GODDARD, KS Aug 26 9:00am - 9:00am",
    "4007566104Dry Van$761413 miles10,000 lbsDESOTO, TXAug 25 1:00pm - 2:00pmLive LoadDeadhead 17 miJACKSON, MS"
  ];
  
  console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:');
  testCases.forEach((testCase, index) => {
    console.log(`\n--- –¢–µ—Å—Ç ${index + 1} ---`);
    console.log('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', testCase);
    
    const result = parseLoadFromText(testCase);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const checks = {
      'ID –Ω–∞–π–¥–µ–Ω': result.id !== null,
      '–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': result.capacityType !== null,
      '–°—Ç–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è': result.rate > 0 && result.rate < 10000,
      '–ú–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã': result.miles > 0,
      '–û—Ç–∫—É–¥–∞': result.pickup !== null,
      '–ö—É–¥–∞': result.delivery !== null,
      'Deadhead': result.deadhead >= 0,
      'Rate per mile': result.ratePerMile > 0
    };
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∏:');
    Object.entries(checks).forEach(([check, passed]) => {
      console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed ? '–î–∞' : '–ù–µ—Ç'}`);
    });
  });
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

window.testLoadParser = testLoadParser;

