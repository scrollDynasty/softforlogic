// FreightPower Load Monitor - Content Script

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è FreightPower)
const SELECTORS = {
  load_items: [
    // FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤
    '.load-card',
    '.freight-card', 
    '.search-result-item',
    '[class*="load-result"]',
    '[class*="freight-result"]',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    '.card',
    '[class*="card"]',
    '.result-item',
    '[class*="result-item"]',
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≥—Ä—É–∑–æ–≤
    'div[class*="load"]',
    'div[class*="freight"]',
    'article',
    'section[class*="load"]',
    // –¢–∞–±–ª–∏—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏
    'tr[class*="load"]',
    'tbody tr',
    '.search-results tr',
    'table tbody tr',
    // Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    'div:has(> *:contains("Power Only"))',
    'div:has(> *:contains("Dry Van"))',
    'div:has(> *:contains("Reefer"))',
    'div:has(> *:contains("Flatbed"))'
  ],
  
  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ (FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
  load_id: [
    // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ ID –≤ –Ω–∞—á–∞–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    ':first-child:matches([0-9]+)',
    'span:matches([0-9]{10})',
    'div:matches([0-9]{10})',
    '*:contains("400")',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[data-testid="reference"]',
    '[class*="reference"]',
    '[class*="load-id"]',
    '[class*="id"]',
    '.reference',
    'td:first-child'
  ],
  
  capacity_type: [
    // FreightPower —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    '*:contains("Power Only"):not(:contains("$")):not(:contains("mi"))',
    '*:contains("Dry Van"):not(:contains("$")):not(:contains("mi"))',
    '*:contains("Reefer"):not(:contains("$")):not(:contains("mi"))',
    '*:contains("Flatbed"):not(:contains("$")):not(:contains("mi"))',
    '*:contains("Step Deck"):not(:contains("$")):not(:contains("mi"))',
    '*:contains("Lowboy"):not(:contains("$")):not(:contains("mi"))',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="capacity-type"]',
    '[class*="equipment-type"]',
    '[class*="trailer-type"]',
    '[class*="type"]'
  ],
  
  pickup_location: [
    // FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ (–≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã)
    '*:matches([A-Z ]+, [A-Z]{2}):not(:contains("Deadhead"))',
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –≥–æ—Ä–æ–¥–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    'div:contains(", OH")',
    'div:contains(", PA")', 
    'div:contains(", TX")',
    'div:contains(", CA")',
    'div:contains(", FL")',
    'span:contains(", OH")',
    'span:contains(", PA")',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="origin"]',
    '[class*="pickup"]',
    '[class*="from"]',
    '[data-testid="pickup-location"]',
    '.origin, .pickup, .pickup-location'
  ],
  
  delivery_location: [
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    '*:matches([A-Z ]+, [A-Z]{2}):not(:contains("Deadhead")):not(:first-of-type)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="destination"]',
    '[class*="delivery"]',
    '[class*="to"]',
    '[data-testid="delivery-location"]',
    '.destination, .delivery, .delivery-location'
  ],
  
  pickup_date: [
    // FreightPower –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Aug 21 12:02pm"
    '*:contains("Aug "):contains("pm")',
    '*:contains("Aug "):contains("am")',
    '*:matches(\\w{3} \\d{1,2} \\d{1,2}:\\d{2}[ap]m)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="pickup-date"]',
    '[class*="origin-date"]',
    '[class*="start-date"]'
  ],
  
  delivery_date: [
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    '*:contains("Aug "):contains("pm"):not(:first-of-type)',
    '*:contains("Aug "):contains("am"):not(:first-of-type)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="delivery-date"]',
    '[class*="destination-date"]',
    '[class*="end-date"]'
  ],
  
  miles: [
    // FreightPower –º–∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ "425 miles"
    '*:contains(" miles"):not(:contains("Deadhead"))',
    '*:matches(\\d+ miles)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="miles"]',
    '[class*="distance"]',
    '[data-testid="miles"]',
    '.distance, .total-miles'
  ],
  
  deadhead: [
    // FreightPower deadhead –∫–∞–∫ "Deadhead 195 mi"
    '*:contains("Deadhead"):contains("mi")',
    '*:matches(Deadhead \\d+ mi)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="deadhead"]',
    '[class*="empty-miles"]',
    '.deadhead, .empty-miles'
  ],
  
  rate: [
    // FreightPower —Å—Ç–∞–≤–∫–∏ –∫–∞–∫ "$1,019"
    '*:contains("$"):not(:contains("lbs")):not(:contains("mi"))',
    '*:matches(\\$[0-9,]+)',
    // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    '[class*="rate"]',
    '[class*="price"]',
    '[class*="pay"]',
    '.rate, .price, .pay, .freight-rate'
  ],
  
  weight: [
    // FreightPower –≤–µ—Å –∫–∞–∫ "44,500 lbs"
    '*:contains(" lbs")',
    '*:matches(\\d{1,3},?\\d{3} lbs)',
    '[class*="weight"]',
    '.weight'
  ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let monitoringState = {
  isActive: false,
  isLoggedIn: false,
  scanInterval: null,
  settings: null,
  foundLoads: new Map(), // –ö–µ—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  lastScanTime: 0,
  scanCount: 0,
  adaptiveInterval: 3000,
  pendingScan: false // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(function initialize() {
  console.log('FreightPower Load Monitor content script loaded');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  checkLoginStatus();
  
  // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç background script
  chrome.runtime.onMessage.addListener(handleMessage);
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  setInterval(checkLoginStatus, 5000);
  
  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
  observePageChanges();
})();

// –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å background.js)
function detectLogin() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
  const isOnFreightPower = window.location.href.includes('freightpower.schneider.com');
  const notOnLoginPage = !window.location.href.includes('/login') && !window.location.href.includes('/signin');
  
  if (!isOnFreightPower || !notOnLoginPage) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const authIndicators = [
    document.querySelector('[data-user-authenticated]'),
    document.querySelector('.dashboard'),
    document.querySelector('.user-menu'),
    document.querySelector('.header-user'),
    document.querySelector('[class*="user-nav"]'),
    document.querySelector('[class*="profile"]'),
    document.querySelector('nav[class*="user"]'),
    document.querySelector('[class*="logged-in"]'),
    document.querySelector('[class*="authenticated"]')
  ];
  
  const hasAuthElement = authIndicators.some(el => el !== null);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º storage –∏ cookies
  const hasAuthStorage = localStorage.getItem('userToken') || 
                        sessionStorage.getItem('authToken') ||
                        localStorage.getItem('auth') ||
                        sessionStorage.getItem('auth');
  
  const hasAuthCookie = document.cookie.includes('auth') || 
                       document.cookie.includes('session') ||
                       document.cookie.includes('token');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
  const hasSearchElements = document.querySelector('.search-results') ||
                          document.querySelector('[class*="search"]') ||
                          document.querySelector('[class*="load"]') ||
                          document.querySelector('main');
  
  // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π
  const isLoggedIn = isOnFreightPower && notOnLoginPage && 
                    (hasAuthElement || hasAuthStorage || hasAuthCookie || hasSearchElements);
  
  console.log('Login check:', {
    isOnFreightPower,
    notOnLoginPage,
    hasAuthElement,
    hasAuthStorage,
    hasAuthCookie,
    hasSearchElements,
    result: isLoggedIn
  });
  
  return isLoggedIn;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkLoginStatus() {
  const wasLoggedIn = monitoringState.isLoggedIn;
  monitoringState.isLoggedIn = detectLogin();
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
  if (wasLoggedIn !== monitoringState.isLoggedIn) {
    if (monitoringState.isLoggedIn) {
      console.log('‚úÖ User logged in to FreightPower');
      chrome.runtime.sendMessage({ 
        type: 'LOGIN_DETECTED',
        url: window.location.href
      }).catch(error => {
        console.error('Error sending login message:', error);
      });
    } else {
      console.log('üîí User logged out from FreightPower');
      chrome.runtime.sendMessage({ type: 'LOGOUT_DETECTED' }).catch(error => {
        console.error('Error sending logout message:', error);
      });
      stopMonitoring();
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
function handleMessage(message, sender, sendResponse) {
  console.log('Received message:', message.type);
  
  switch (message.type) {
    case 'START_MONITORING':
      if (!monitoringState.isActive && monitoringState.isLoggedIn) {
        startMonitoring(message.settings);
        sendResponse({ success: true });
      } else {
        sendResponse({ 
          success: false, 
          reason: monitoringState.isLoggedIn ? 'Already monitoring' : 'Not logged in' 
        });
      }
      break;
      
    case 'STOP_MONITORING':
      stopMonitoring();
      sendResponse({ success: true });
      break;
      
    case 'GET_STATUS':
      sendResponse({
        isActive: monitoringState.isActive,
        isLoggedIn: monitoringState.isLoggedIn,
        scanCount: monitoringState.scanCount,
        foundLoads: monitoringState.foundLoads.size
      });
      break;
      
    case 'PLAY_SOUND':
      playAlertSound();
      sendResponse({ success: true });
      break;
      
    case 'FORCE_SCAN':
      if (monitoringState.isActive) {
        scanForLoads();
        sendResponse({ success: true });
      } else {
        sendResponse({ success: false, reason: 'Monitoring not active' });
      }
      break;
      
    default:
      console.warn('Unknown message type:', message.type);
      sendResponse({ success: false, reason: 'Unknown message type' });
  }
  
  return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startMonitoring(settings) {
  if (monitoringState.isActive) {
    console.log('Monitoring already active');
    return;
  }
  
  if (!monitoringState.isLoggedIn) {
    console.log('Cannot start monitoring: not logged in');
    return;
  }
  
  monitoringState.settings = settings || {};
  monitoringState.isActive = true;
  monitoringState.scanCount = 0;
  monitoringState.foundLoads.clear();
  
  console.log('Starting automatic load monitoring...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É
  scanForLoads();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  monitoringState.scanInterval = setInterval(() => {
    scanForLoads();
  }, monitoringState.adaptiveInterval);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  showMonitoringIndicator();
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function stopMonitoring() {
  if (!monitoringState.isActive) {
    return;
  }
  
  monitoringState.isActive = false;
  
  if (monitoringState.scanInterval) {
    clearInterval(monitoringState.scanInterval);
    monitoringState.scanInterval = null;
  }
  
  hideMonitoringIndicator();
  
  console.log('Load monitoring stopped');
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
function restartMonitoring() {
  if (monitoringState.isActive) {
    const settings = monitoringState.settings;
    stopMonitoring();
    setTimeout(() => startMonitoring(settings), 1000);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤
function scanForLoads() {
  if (!monitoringState.isActive || !monitoringState.isLoggedIn) {
    return;
  }
  
  const startTime = Date.now();
  monitoringState.scanCount++;
  
  console.log(`Scanning for loads... (scan #${monitoringState.scanCount})`);
  
  try {
    const loadElements = findLoadElements();
    
    if (loadElements.length === 0) {
      console.log('No load elements found on page');
      adjustScanInterval('no_loads');
      return;
    }
    
    console.log(`Found ${loadElements.length} load elements`);
    
    let newLoadsFound = 0;
    let profitableLoadsFound = 0;
    
    loadElements.forEach((element, index) => {
      try {
        const loadData = parseLoadElement(element);
        
        if (loadData && loadData.id && !monitoringState.foundLoads.has(loadData.id)) {
          // –ù–æ–≤—ã–π –≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω
          monitoringState.foundLoads.set(loadData.id, {
            ...loadData,
            foundAt: Date.now(),
            scanNumber: monitoringState.scanCount
          });
          
          newLoadsFound++;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
          const profitability = calculateProfitability(loadData);
          
          if (profitability.isProfitable && passesFilters(loadData, profitability)) {
            profitableLoadsFound++;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –≤ background script
            chrome.runtime.sendMessage({
              type: 'LOAD_FOUND',
              data: {
                ...loadData,
                ...profitability,
                foundAt: Date.now(),
                scanNumber: monitoringState.scanCount
              }
            }).catch(error => {
              console.error('Error sending load found message:', error);
            });
            
            console.log(`üí∞ Profitable load found: ${loadData.id} - $${profitability.ratePerMile.toFixed(2)}/mile`);
          }
        }
      } catch (error) {
        console.error(`Error parsing load element ${index}:`, error);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chrome.runtime.sendMessage({
      type: 'UPDATE_STATISTICS',
      data: {
        totalScans: 1,
        loadsFound: newLoadsFound,
        profitableLoads: profitableLoadsFound,
        lastActive: Date.now()
      }
    }).catch(error => {
      console.error('Error updating statistics:', error);
    });
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (newLoadsFound > 0) {
      adjustScanInterval('loads_found');
    } else {
      adjustScanInterval('no_new_loads');
    }
    
    const scanDuration = Date.now() - startTime;
    console.log(`Scan completed in ${scanDuration}ms. New loads: ${newLoadsFound}, Profitable: ${profitableLoadsFound}`);
    
  } catch (error) {
    console.error('Error during load scanning:', error);
    adjustScanInterval('error');
  }
  
  monitoringState.lastScanTime = Date.now();
}

// –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function findLoadElements() {
  console.log('üîç Searching for load elements...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
  const searchContainers = [
    '.search-results',
    '[class*="search-result"]',
    '[class*="result-container"]',
    '[class*="load-list"]',
    '[class*="freight-list"]',
    'main [class*="container"]',
    '[role="main"]',
    '#app main',
    '.content-area'
  ];
  
  let container = document.body;
  for (const selector of searchContainers) {
    const found = document.querySelector(selector);
    if (found) {
      container = found;
      console.log(`üì¶ Found search container: ${selector}`);
      break;
    }
  }
  
  // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–∑–æ–≤
  for (const selector of SELECTORS.load_items) {
    const elements = container.querySelectorAll(selector);
    if (elements.length > 0) {
      console.log(`‚úÖ Found ${elements.length} load elements using selector: ${selector}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤
      const validElements = Array.from(elements).filter(el => {
        // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã Origin –∏–ª–∏ Destination
        const text = el.textContent || '';
        const hasLocation = text.includes('Origin') || text.includes('Destination') || 
                          text.includes(', ') || // –ì–æ—Ä–æ–¥–∞ –æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                          /[A-Z]{2}\s*\d{5}/.test(text); // ZIP –∫–æ–¥—ã
        
        // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º (–Ω–µ –ø—É—Å—Ç—ã–º)
        const hasContent = el.childElementCount > 0 || text.length > 20;
        
        return hasLocation && hasContent;
      });
      
      if (validElements.length > 0) {
        console.log(`‚úÖ Validated ${validElements.length} load elements`);
        return validElements;
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  console.log('‚ö†Ô∏è No elements found with selectors, trying heuristic search...');
  
  const allElements = container.querySelectorAll('div, article, section, tr');
  const potentialLoads = Array.from(allElements).filter(el => {
    const text = el.textContent || '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const hasOrigin = text.includes('Origin') || /\b[A-Z][a-z]+(?:ville|ton|burg|city|town)\b/.test(text);
    const hasDestination = text.includes('Destination') || text.split(',').length > 2;
    const hasState = /\b[A-Z]{2}\b/.test(text);
    const hasMiles = /\b\d+\s*mi/i.test(text) || text.includes('miles');
    const hasDate = /\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}/i.test(text);
    
    // –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≥—Ä—É–∑–∞
    const score = [hasOrigin, hasDestination, hasState, hasMiles, hasDate].filter(Boolean).length;
    
    return score >= 2 && el.childElementCount > 2;
  });
  
  if (potentialLoads.length > 0) {
    console.log(`üîç Found ${potentialLoads.length} potential load elements through heuristic search`);
    return potentialLoads;
  }
  
  console.log('‚ùå No load elements found on page');
  return [];
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ (FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)
function parseLoadElement(element) {
  const loadData = {
    id: null,
    capacityType: null,
    pickup: null,
    delivery: null,
    pickupCity: null,
    pickupState: null,
    pickupZip: null,
    deliveryCity: null,
    deliveryState: null,
    deliveryZip: null,
    pickupDate: null,
    deliveryDate: null,
    miles: 0,
    deadhead: 0,
    rate: 0,
    weight: 0,
    element: element
  };
  
  const fullText = element.textContent || '';
  console.log('üîç Parsing FreightPower load element:', fullText.substring(0, 300));
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä—è–º–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const freightPowerData = parseFreightPowerText(fullText);
  if (freightPowerData) {
    Object.assign(loadData, freightPowerData);
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–∞—Ä—Å–∏–Ω–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  if (!loadData.id) {
    loadData.id = extractText(element, SELECTORS.load_id) || generateLoadId(element);
  }
  
  if (!loadData.capacityType) {
    loadData.capacityType = extractText(element, SELECTORS.capacity_type);
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
  if (!loadData.pickup || !loadData.delivery) {
    const pickupText = extractText(element, SELECTORS.pickup_location);
    if (pickupText) {
      loadData.pickup = pickupText;
      const pickupParsed = parseLocation(pickupText);
      loadData.pickupCity = pickupParsed.city;
      loadData.pickupState = pickupParsed.state;
      loadData.pickupZip = pickupParsed.zip;
    }
    
    const deliveryText = extractText(element, SELECTORS.delivery_location);
    if (deliveryText) {
      loadData.delivery = deliveryText;
      const deliveryParsed = parseLocation(deliveryText);
      loadData.deliveryCity = deliveryParsed.city;
      loadData.deliveryState = deliveryParsed.state;
      loadData.deliveryZip = deliveryParsed.zip;
    }
  }
  
  // Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  if (!loadData.pickup || !loadData.delivery) {
    const locationData = extractLocationsFromText(fullText);
    if (locationData.pickup && !loadData.pickup) {
      loadData.pickup = locationData.pickup;
      const pickupParsed = parseLocation(locationData.pickup);
      loadData.pickupCity = pickupParsed.city;
      loadData.pickupState = pickupParsed.state;
      loadData.pickupZip = pickupParsed.zip;
    }
    if (locationData.delivery && !loadData.delivery) {
      loadData.delivery = locationData.delivery;
      const deliveryParsed = parseLocation(locationData.delivery);
      loadData.deliveryCity = deliveryParsed.city;
      loadData.deliveryState = deliveryParsed.state;
      loadData.deliveryZip = deliveryParsed.zip;
    }
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
  if (!loadData.pickupDate) {
    loadData.pickupDate = extractText(element, SELECTORS.pickup_date);
  }
  
  if (!loadData.deliveryDate) {
    loadData.deliveryDate = extractText(element, SELECTORS.delivery_date);
  }
  
  if (!loadData.miles) {
    const milesText = extractText(element, SELECTORS.miles);
    loadData.miles = parseNumber(milesText);
  }
  
  if (!loadData.deadhead) {
    const deadheadText = extractText(element, SELECTORS.deadhead);
    loadData.deadhead = parseNumber(deadheadText);
  }
  
  if (!loadData.rate) {
    const rateText = extractText(element, SELECTORS.rate);
    loadData.rate = parseNumber(rateText);
  }
  
  if (!loadData.weight) {
    const weightText = extractText(element, SELECTORS.weight);
    loadData.weight = parseNumber(weightText);
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (!loadData.pickup || !loadData.delivery) {
    console.warn('‚ùå Missing pickup or delivery location:', {
      pickup: loadData.pickup,
      delivery: loadData.delivery,
      elementText: fullText.substring(0, 200)
    });
    return null;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç ID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
  if (!loadData.id) {
    loadData.id = generateLoadId(loadData);
  }
  
  console.log('‚úÖ Parsed FreightPower load:', {
    id: loadData.id,
    type: loadData.capacityType,
    pickup: `${loadData.pickupCity}, ${loadData.pickupState}`,
    delivery: `${loadData.deliveryCity}, ${loadData.deliveryState}`,
    miles: loadData.miles,
    deadhead: loadData.deadhead,
    rate: loadData.rate,
    weight: loadData.weight
  });
  
  return loadData;
}

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ FreightPower —Ç–µ–∫—Å—Ç–∞
function parseFreightPowerText(text) {
  const data = {};
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–∑–∞ (10-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ)
    const idMatch = text.match(/(\d{10})/);
    if (idMatch) {
      data.id = idMatch[1];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const typeMatch = text.match(/(Power Only|Dry Van|Reefer|Flatbed|Step Deck|Lowboy)/);
    if (typeMatch) {
      data.capacityType = typeMatch[1];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫—É
    const rateMatch = text.match(/\$([0-9,]+)/);
    if (rateMatch) {
      data.rate = parseNumber(rateMatch[0]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–ª–∏
    const milesMatch = text.match(/(\d+)\s+miles/);
    if (milesMatch) {
      data.miles = parseInt(milesMatch[1]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    const weightMatch = text.match(/([0-9,]+)\s+lbs/);
    if (weightMatch) {
      data.weight = parseNumber(weightMatch[0]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º deadhead
    const deadheadMatch = text.match(/Deadhead\s+(\d+)\s+mi/);
    if (deadheadMatch) {
      data.deadhead = parseInt(deadheadMatch[1]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ (–≥–æ—Ä–æ–¥–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    const locations = text.match(/([A-Z ]+,\s*[A-Z]{2})/g);
    if (locations && locations.length >= 2) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º, –∏—Å–∫–ª—é—á–∞—è –ª–æ–∫–∞—Ü–∏–∏ —Ä—è–¥–æ–º —Å "Deadhead"
      const validLocations = locations.filter(loc => {
        const locIndex = text.indexOf(loc);
        const contextBefore = text.substring(Math.max(0, locIndex - 20), locIndex);
        const contextAfter = text.substring(locIndex, locIndex + loc.length + 20);
        return !contextBefore.includes('Deadhead') && !contextAfter.includes('Deadhead');
      });
      
      if (validLocations.length >= 2) {
        data.pickup = validLocations[0].trim();
        data.delivery = validLocations[1].trim();
        
        // –ü–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥–∞ –∏ —à—Ç–∞—Ç—ã
        const pickupParsed = parseLocation(data.pickup);
        data.pickupCity = pickupParsed.city;
        data.pickupState = pickupParsed.state;
        data.pickupZip = pickupParsed.zip;
        
        const deliveryParsed = parseLocation(data.delivery);
        data.deliveryCity = deliveryParsed.city;
        data.deliveryState = deliveryParsed.state;
        data.deliveryZip = deliveryParsed.zip;
      }
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã
    const dateMatches = text.match(/(\w{3}\s+\d{1,2}\s+\d{1,2}:\d{2}[ap]m)/g);
    if (dateMatches && dateMatches.length >= 2) {
      data.pickupDate = dateMatches[0];
      data.deliveryDate = dateMatches[1];
    }
    
    console.log('üìù FreightPower text parsing result:', data);
    return data;
    
  } catch (error) {
    console.error('Error parsing FreightPower text:', error);
    return null;
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
function parseLocation(locationText) {
  if (!locationText) {
    return { city: null, state: null, zip: null };
  }
  
  const location = {
    city: null,
    state: null,
    zip: null
  };
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanText = locationText.trim().replace(/\s+/g, ' ');
  
  // –ò—â–µ–º ZIP –∫–æ–¥ (5 —Ü–∏—Ñ—Ä)
  const zipMatch = cleanText.match(/\b(\d{5})\b/);
  if (zipMatch) {
    location.zip = zipMatch[1];
  }
  
  // –ò—â–µ–º —à—Ç–∞—Ç (2 –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã)
  const stateMatch = cleanText.match(/\b([A-Z]{2})\b/);
  if (stateMatch) {
    location.state = stateMatch[1];
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ (–≤—Å–µ —á—Ç–æ –¥–æ —à—Ç–∞—Ç–∞ –∏–ª–∏ ZIP –∫–æ–¥–∞)
  let cityText = cleanText;
  
  // –£–±–∏—Ä–∞–µ–º ZIP –∫–æ–¥
  if (location.zip) {
    cityText = cityText.replace(new RegExp(`\\b${location.zip}\\b`), '').trim();
  }
  
  // –£–±–∏—Ä–∞–µ–º —à—Ç–∞—Ç
  if (location.state) {
    cityText = cityText.replace(new RegExp(`\\b${location.state}\\b`), '').trim();
  }
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
  cityText = cityText.replace(/[,\-\s]+$/, '').replace(/^[,\-\s]+/, '').trim();
  
  if (cityText) {
    location.city = cityText;
  }
  
  return location;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)
function extractLocationsFromText(text) {
  const locations = { pickup: null, delivery: null };
  
  if (!text) return locations;
  
  console.log('üîç Extracting locations from text:', text.substring(0, 200));
  
  // FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ò—â–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ —Å —à—Ç–∞—Ç–∞–º–∏
  // –ü—Ä–∏–º–µ—Ä: "LIMA, OH" –∏ "SHIPPENSBURG, PA"
  const upperCaseLocations = text.match(/([A-Z ]+,\s*[A-Z]{2})/g);
  
  if (upperCaseLocations && upperCaseLocations.length >= 2) {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç "Deadhead"
    const validLocations = upperCaseLocations.filter(loc => 
      !text.substring(text.indexOf(loc) - 20, text.indexOf(loc) + 20).includes('Deadhead')
    );
    
    if (validLocations.length >= 2) {
      locations.pickup = validLocations[0].trim();
      locations.delivery = validLocations[1].trim();
      console.log('‚úÖ Found locations via uppercase pattern:', locations);
      return locations;
    }
  }
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ò—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å –¥–∞—Ç–∞–º–∏
  // –í FreightPower –ª–æ–∫–∞—Ü–∏–∏ –∏–¥—É—Ç –ø–µ—Ä–µ–¥ –¥–∞—Ç–∞–º–∏
  const locationWithDatePattern = /([A-Z ]+,\s*[A-Z]{2})\s*\n\s*\w{3}\s+\d{1,2}/g;
  const locationsWithDates = [...text.matchAll(locationWithDatePattern)];
  
  if (locationsWithDates.length >= 2) {
    locations.pickup = locationsWithDates[0][1].trim();
    locations.delivery = locationsWithDates[1][1].trim();
    console.log('‚úÖ Found locations via date context pattern:', locations);
    return locations;
  }
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const pickupKeywords = ['Drop Empty Trailer', 'Live Load'];
  const deliveryKeywords = ['Drop Loaded Trailer', 'Live Unload'];
  
  for (const keyword of pickupKeywords) {
    const keywordIndex = text.indexOf(keyword);
    if (keywordIndex > 0) {
      // –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
      const beforeKeyword = text.substring(Math.max(0, keywordIndex - 100), keywordIndex);
      const locationMatch = beforeKeyword.match(/([A-Z ]+,\s*[A-Z]{2})/);
      if (locationMatch && !locations.pickup) {
        locations.pickup = locationMatch[1].trim();
      }
    }
  }
  
  for (const keyword of deliveryKeywords) {
    const keywordIndex = text.indexOf(keyword);
    if (keywordIndex > 0) {
      // –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
      const beforeKeyword = text.substring(Math.max(0, keywordIndex - 100), keywordIndex);
      const locationMatch = beforeKeyword.match(/([A-Z ]+,\s*[A-Z]{2})/);
      if (locationMatch && !locations.delivery && locationMatch[1] !== locations.pickup) {
        locations.delivery = locationMatch[1].trim();
      }
    }
  }
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω 4: Fallback - –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
  if (!locations.pickup || !locations.delivery) {
    const allLocations = text.match(/([A-Z ]+,\s*[A-Z]{2})/g);
    if (allLocations && allLocations.length >= 2) {
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
      const uniqueLocations = [...new Set(allLocations)];
      if (uniqueLocations.length >= 2) {
        if (!locations.pickup) locations.pickup = uniqueLocations[0].trim();
        if (!locations.delivery) locations.delivery = uniqueLocations[1].trim();
      }
    }
  }
  
  console.log('üéØ Final extracted locations:', locations);
  return locations;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –≥—Ä—É–∑–∞
function generateLoadId(data) {
  if (data.pickup && data.delivery) {
    return `${data.pickup}-${data.delivery}-${Date.now()}`.replace(/\s+/g, '-');
  }
  return `load-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
function extractRadius(element) {
  if (!element) return null;
  
  const text = element.textContent || element.value || '';
  const match = text.match(/(\d+)\s*mi/i);
  return match ? parseInt(match[1]) : null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º (FreightPower —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)
function extractText(parentElement, selectors) {
  const fullText = parentElement.textContent || '';
  
  for (const selector of selectors) {
    try {
      let elements = [];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å :contains()
      if (selector.includes(':contains(')) {
        const match = selector.match(/\*:contains\("([^"]+)"\)(.*)$/);
        if (match) {
          const searchText = match[1];
          const modifier = match[2];
          
          // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏—Å–∫–æ–º—ã–π —Ç–µ–∫—Å—Ç
          const allElements = parentElement.querySelectorAll('*');
          for (const el of allElements) {
            if (el.textContent && el.textContent.includes(searchText)) {
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
              if (modifier.includes(':not(:contains("$"))')) {
                if (el.textContent.includes('$')) continue;
              }
              if (modifier.includes(':not(:contains("mi"))')) {
                if (el.textContent.includes('mi')) continue;
              }
              if (modifier.includes(':not(:contains("lbs"))')) {
                if (el.textContent.includes('lbs')) continue;
              }
              if (modifier.includes(':not(:contains("Deadhead"))')) {
                if (el.textContent.includes('Deadhead')) continue;
              }
              if (modifier.includes(':not(:first-of-type)')) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                const sameTextElements = Array.from(allElements).filter(e => 
                  e.textContent && e.textContent.includes(searchText)
                );
                if (sameTextElements[0] === el) continue;
              }
              
              elements.push(el);
            }
          }
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ :matches() —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
      else if (selector.includes(':matches(')) {
        const match = selector.match(/\*:matches\(([^)]+)\)/);
        if (match) {
          const regexPattern = match[1];
          const regex = new RegExp(regexPattern, 'g');
          
          // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
          const matches = fullText.match(regex);
          if (matches && matches.length > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            return matches[0];
          }
        }
      }
      // –û–±—ã—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      else {
        try {
          elements = Array.from(parentElement.querySelectorAll(selector));
        } catch (selectorError) {
          // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          console.debug(`Selector "${selector}" not supported:`, selectorError.message);
          continue;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      for (const el of elements) {
        const text = extractTextFromElement(el);
        if (text) {
          return text;
        }
      }
    } catch (e) {
      console.debug(`Selector error for "${selector}":`, e.message);
    }
  }
  
  return null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
function extractTextFromElement(element) {
  if (!element) return null;
  
  // –î–ª—è input/select —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ—Ä–µ–º value
  if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
    return element.value || null;
  }
  
  // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–∑–ª–æ–º
  if (element.childNodes.length === 1 && element.childNodes[0].nodeType === Node.TEXT_NODE) {
    const text = element.textContent.trim();
    return text || null;
  }
  
  // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—â–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ labels
  const clonedElement = element.cloneNode(true);
  const labels = clonedElement.querySelectorAll('label');
  labels.forEach(label => label.remove());
  
  const text = clonedElement.textContent.trim();
  return text || null;
}

// –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function parseNumber(text) {
  if (!text) return 0;
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
  const cleaned = text.replace(/[^\d\.,]/g, '');
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
  const number = parseFloat(cleaned.replace(/,/g, ''));
  
  return isNaN(number) ? 0 : number;
}

// –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞
function calculateProfitability(load) {
  const totalMiles = load.miles + load.deadhead;
  const ratePerMile = totalMiles > 0 ? load.rate / totalMiles : 0;
  const deadheadRatio = load.miles > 0 ? load.deadhead / load.miles : 1;
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç deadhead)
  const profitabilityScore = ratePerMile * (1 - deadheadRatio * 0.3);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  let priority = 'LOW';
  if (profitabilityScore > 3.5) {
    priority = 'HIGH';
  } else if (profitabilityScore > 2.5) {
    priority = 'MEDIUM';
  }
  
  return {
    ratePerMile,
    profitabilityScore,
    deadheadRatio,
    isProfitable: ratePerMile >= 2.50 && deadheadRatio <= 0.25,
    priority
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function passesFilters(load, profitability) {
  const settings = monitoringState.settings || {};
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –º–∏–ª—é
  if (profitability.ratePerMile < (settings.minRatePerMile || 2.50)) {
    return false;
  }
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π deadhead
  if (load.deadhead > (settings.maxDeadhead || 50)) {
    return false;
  }
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  if (load.miles < (settings.minDistance || 200)) {
    return false;
  }
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
  if (settings.maxDistance && load.miles > settings.maxDistance) {
    return false;
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
  if (settings.regions && settings.regions.length > 0) {
    const matchesRegion = settings.regions.some(region => 
      (load.pickupState && load.pickupState.toLowerCase().includes(region.toLowerCase())) ||
      (load.deliveryState && load.deliveryState.toLowerCase().includes(region.toLowerCase())) ||
      (load.pickup && load.pickup.toLowerCase().includes(region.toLowerCase())) ||
      (load.delivery && load.delivery.toLowerCase().includes(region.toLowerCase()))
    );
    if (!matchesRegion) {
      return false;
    }
  }
  
  return true;
}

// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function adjustScanInterval(result) {
  const currentInterval = monitoringState.adaptiveInterval;
  
  switch (result) {
    case 'loads_found':
      // –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≥—Ä—É–∑—ã - —É—Å–∫–æ—Ä—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      monitoringState.adaptiveInterval = Math.max(2000, currentInterval - 500);
      break;
      
    case 'no_new_loads':
      // –ù–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –Ω–µ—Ç - –∑–∞–º–µ–¥–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      monitoringState.adaptiveInterval = Math.min(5000, currentInterval + 200);
      break;
      
    case 'no_loads':
      // –ì—Ä—É–∑–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º
      monitoringState.adaptiveInterval = Math.min(10000, currentInterval + 1000);
      break;
      
    case 'error':
      // –û—à–∏–±–∫–∞ - –∑–∞–º–µ–¥–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      monitoringState.adaptiveInterval = Math.min(8000, currentInterval + 1000);
      break;
  }
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
  if (monitoringState.scanInterval && monitoringState.adaptiveInterval !== currentInterval) {
    clearInterval(monitoringState.scanInterval);
    monitoringState.scanInterval = setInterval(() => {
      scanForLoads();
    }, monitoringState.adaptiveInterval);
    
    console.log(`Scan interval adjusted to ${monitoringState.adaptiveInterval}ms`);
  }
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function showMonitoringIndicator() {
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
  hideMonitoringIndicator();
  
  const indicator = document.createElement('div');
  indicator.id = 'freightpower-monitor-indicator';
  indicator.innerHTML = `
    <div style="
      position: fixed;
      top: 10px;
      right: 10px;
      background: #4CAF50;
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      font-size: 12px;
      font-family: Arial, sans-serif;
      z-index: 10000;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      animation: pulse 2s infinite;
    ">
      üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
      <div style="font-size: 10px; opacity: 0.8;">
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: <span id="scan-counter">0</span>
      </div>
    </div>
    <style>
      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
      }
    </style>
  `;
  
  document.body.appendChild(indicator);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  setInterval(() => {
    const counter = document.getElementById('scan-counter');
    if (counter && monitoringState.isActive) {
      counter.textContent = monitoringState.scanCount;
    }
  }, 1000);
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function hideMonitoringIndicator() {
  const indicator = document.getElementById('freightpower-monitor-indicator');
  if (indicator) {
    indicator.remove();
  }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
function playAlertSound() {
  try {
    // –°–æ–∑–¥–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
    const audio = new Audio(chrome.runtime.getURL('sounds/alert.mp3'));
    audio.volume = 0.7;
    
    audio.play().then(() => {
      console.log('üîä Alert sound played');
    }).catch(error => {
      console.error('Error playing sound:', error);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Audio API
      try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = 800; // –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞
        gainNode.gain.value = 0.3; // –ì—Ä–æ–º–∫–æ—Å—Ç—å
        
        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.2); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 200–º—Å
        
        console.log('üîä Fallback beep played');
      } catch (fallbackError) {
        console.error('Fallback sound also failed:', fallbackError);
      }
    });
  } catch (error) {
    console.error('Failed to create audio element:', error);
  }
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function observePageChanges() {
  console.log('üëÅÔ∏è Starting DOM observer...');
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–¥–ª—è SPA)
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      console.log('üìç URL changed:', url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞
      if (url.includes('/search') || url.includes('/app/search')) {
        console.log('üîç On search page, checking for results...');
        setTimeout(() => {
          if (monitoringState.isActive) {
            scanForLoads();
          }
        }, 1000);
      }
    }
  }).observe(document, {subtree: true, childList: true});
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM
  const observer = new MutationObserver((mutations) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    let hasNewContent = false;
    
    for (const mutation of mutations) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –Ω–æ–≤—ã–µ —É–∑–ª—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã
        for (const node of mutation.addedNodes) {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const text = node.textContent || '';
            // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥—Ä—É–∑–æ–≤
            if (text.includes('Origin') || text.includes('Destination') || 
                text.includes('miles') || /\$\d+/.test(text) ||
                node.querySelector && node.querySelector('[class*="load"], [class*="freight"], [class*="card"]')) {
              hasNewContent = true;
              break;
            }
          }
        }
      }
      
      if (hasNewContent) break;
    }
    
    // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
    if (hasNewContent && monitoringState.isActive && !monitoringState.pendingScan) {
      console.log('üÜï New content detected, scheduling scan...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      monitoringState.pendingScan = true;
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
      setTimeout(() => {
        monitoringState.pendingScan = false;
        if (monitoringState.isActive) {
          scanForLoads();
        }
      }, 500);
    }
  });
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
  const config = {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['class', 'style'] // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
  observer.observe(document.body, config);
  
  // –¢–∞–∫–∂–µ –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const containers = [
    document.querySelector('.search-results'),
    document.querySelector('[class*="result-container"]'),
    document.querySelector('main'),
    document.querySelector('#app')
  ].filter(Boolean);
  
  containers.forEach(container => {
    console.log('üëÅÔ∏è Observing container:', container.className || container.tagName);
    observer.observe(container, config);
  });
  
  console.log('‚úÖ DOM observer started');
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now();
  const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  
  for (const [loadId, loadData] of monitoringState.foundLoads.entries()) {
    if (now - loadData.foundAt > maxAge) {
      monitoringState.foundLoads.delete(loadId);
    }
  }
  
  console.log(`Cache cleaned. Remaining loads: ${monitoringState.foundLoads.size}`);
}, 30 * 60 * 1000);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function diagnosePage() {
  console.log('üîç Starting page diagnostics...');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
  console.log('üìç Current URL:', window.location.href);
  console.log('üìÑ Page title:', document.title);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  const containers = {
    'search-results': document.querySelector('.search-results'),
    'load-list': document.querySelector('[class*="load-list"]'),
    'freight-list': document.querySelector('[class*="freight-list"]'),
    'main': document.querySelector('main'),
    'app': document.querySelector('#app')
  };
  
  console.log('üì¶ Found containers:');
  for (const [name, element] of Object.entries(containers)) {
    if (element) {
      console.log(`  ‚úÖ ${name}: ${element.tagName}.${element.className}`);
    } else {
      console.log(`  ‚ùå ${name}: not found`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–∑–æ–≤
  const loadElements = findLoadElements();
  console.log(`üöõ Found ${loadElements.length} load elements`);
  
  if (loadElements.length > 0) {
    console.log('üìù Sample load element analysis:');
    const sample = loadElements[0];
    const parsed = parseLoadElement(sample);
    console.log('  Parsed data:', parsed);
    console.log('  Element HTML:', sample.outerHTML.substring(0, 500) + '...');
  }
  
  return {
    url: window.location.href,
    title: document.title,
    containers: Object.fromEntries(
      Object.entries(containers).map(([k, v]) => [k, !!v])
    ),
    loadElementsCount: loadElements.length,
    isLoggedIn: monitoringState.isLoggedIn
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏)
window.freightPowerDebug = {
  diagnosePage,
  scanForLoads,
  findLoadElements,
  parseLoadElement,
  getState: () => monitoringState
};